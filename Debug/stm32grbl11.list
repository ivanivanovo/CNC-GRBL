
stm32grbl11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfe8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  0800c0f8  0800c0f8  0001c0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800c7b4  0800c7b4  0001c7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c7bc  0800c7bc  0001c7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000520  20000000  0800c7c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001180  20000520  0800cce0  00020520  2**2
                  ALLOC
  7 ._user_heap_stack 00000280  200016a0  0800cce0  000216a0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020520  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002734f  00000000  00000000  00020549  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006ba2  00000000  00000000  00047898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ea4a  00000000  00000000  0004e43a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010e0  00000000  00000000  0005ce88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003148  00000000  00000000  0005df68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00015de7  00000000  00000000  000610b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001728c  00000000  00000000  00076e97  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0005d775  00000000  00000000  0008e123  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000eb898  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003548  00000000  00000000  000eb914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000520 	.word	0x20000520
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c0e0 	.word	0x0800c0e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000524 	.word	0x20000524
 800014c:	0800c0e0 	.word	0x0800c0e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	d1ed      	bne.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmpun>:
 8001044:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001048:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800104c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001050:	d102      	bne.n	8001058 <__aeabi_fcmpun+0x14>
 8001052:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001056:	d108      	bne.n	800106a <__aeabi_fcmpun+0x26>
 8001058:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800105c:	d102      	bne.n	8001064 <__aeabi_fcmpun+0x20>
 800105e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001062:	d102      	bne.n	800106a <__aeabi_fcmpun+0x26>
 8001064:	f04f 0000 	mov.w	r0, #0
 8001068:	4770      	bx	lr
 800106a:	f04f 0001 	mov.w	r0, #1
 800106e:	4770      	bx	lr

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010fc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001100:	4b02      	ldr	r3, [pc, #8]	; (800110c <NVIC_PriorityGroupConfig+0x10>)
 8001102:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001106:	60d8      	str	r0, [r3, #12]
}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001110:	b4f0      	push	{r4, r5, r6, r7}
 8001112:	2401      	movs	r4, #1
 8001114:	7801      	ldrb	r1, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001116:	78c3      	ldrb	r3, [r0, #3]
 8001118:	f001 021f 	and.w	r2, r1, #31
 800111c:	4094      	lsls	r4, r2
 800111e:	094e      	lsrs	r6, r1, #5
 8001120:	b92b      	cbnz	r3, 800112e <NVIC_Init+0x1e>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <NVIC_Init+0x50>)
 8001124:	3620      	adds	r6, #32
 8001126:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800112a:	bcf0      	pop	{r4, r5, r6, r7}
 800112c:	4770      	bx	lr
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <NVIC_Init+0x54>)
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001130:	7847      	ldrb	r7, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001132:	68dd      	ldr	r5, [r3, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001134:	7882      	ldrb	r2, [r0, #2]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001136:	43e8      	mvns	r0, r5
    tmpsub = tmpsub >> tmppriority;
 8001138:	230f      	movs	r3, #15
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800113a:	f3c0 2002 	ubfx	r0, r0, #8, #3
    tmppre = (0x4 - tmppriority);
 800113e:	f1c0 0504 	rsb	r5, r0, #4
    tmpsub = tmpsub >> tmppriority;
 8001142:	40c3      	lsrs	r3, r0
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001144:	fa07 f505 	lsl.w	r5, r7, r5
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001148:	4013      	ands	r3, r2
 800114a:	432b      	orrs	r3, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <NVIC_Init+0x50>)
    tmppriority = tmppriority << 0x04;
 800114e:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4411      	add	r1, r2
 8001154:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001158:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
}
 800115c:	bcf0      	pop	{r4, r5, r6, r7}
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001168:	7903      	ldrb	r3, [r0, #4]
 800116a:	b470      	push	{r4, r5, r6}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800116c:	7982      	ldrb	r2, [r0, #6]
 800116e:	6805      	ldr	r5, [r0, #0]
 8001170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001174:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001178:	43ec      	mvns	r4, r5
 800117a:	b31a      	cbz	r2, 80011c4 <EXTI_Init+0x5c>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <EXTI_Init+0x78>)
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800117e:	7941      	ldrb	r1, [r0, #5]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001180:	6816      	ldr	r6, [r2, #0]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001182:	2910      	cmp	r1, #16
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001184:	ea06 0604 	and.w	r6, r6, r4
 8001188:	6016      	str	r6, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800118a:	6856      	ldr	r6, [r2, #4]
 800118c:	ea04 0406 	and.w	r4, r4, r6
 8001190:	6054      	str	r4, [r2, #4]
    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	ea45 0504 	orr.w	r5, r5, r4
 8001198:	601d      	str	r5, [r3, #0]
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800119a:	6800      	ldr	r0, [r0, #0]
 800119c:	6894      	ldr	r4, [r2, #8]
 800119e:	ea6f 0300 	mvn.w	r3, r0
 80011a2:	ea04 0403 	and.w	r4, r4, r3
 80011a6:	6094      	str	r4, [r2, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80011a8:	68d4      	ldr	r4, [r2, #12]
 80011aa:	ea03 0304 	and.w	r3, r3, r4
 80011ae:	60d3      	str	r3, [r2, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80011b0:	d00d      	beq.n	80011ce <EXTI_Init+0x66>
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80011b2:	bc70      	pop	{r4, r5, r6}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80011b4:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80011b8:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4310      	orrs	r0, r2
 80011c0:	6018      	str	r0, [r3, #0]
}
 80011c2:	4770      	bx	lr
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4014      	ands	r4, r2
 80011c8:	601c      	str	r4, [r3, #0]
}
 80011ca:	bc70      	pop	{r4, r5, r6}
 80011cc:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011ce:	6893      	ldr	r3, [r2, #8]
}
 80011d0:	bc70      	pop	{r4, r5, r6}
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011d2:	4303      	orrs	r3, r0
 80011d4:	6093      	str	r3, [r2, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80011d6:	68d3      	ldr	r3, [r2, #12]
 80011d8:	4318      	orrs	r0, r3
 80011da:	60d0      	str	r0, [r2, #12]
}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40010400 	.word	0x40010400

080011e4 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <EXTI_GetITStatus+0x18>)
 80011e6:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4003      	ands	r3, r0
 80011ec:	d004      	beq.n	80011f8 <EXTI_GetITStatus+0x14>
 80011ee:	4202      	tst	r2, r0
  {
    bitstatus = SET;
 80011f0:	bf14      	ite	ne
 80011f2:	2001      	movne	r0, #1
 80011f4:	2000      	moveq	r0, #0
 80011f6:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 80011f8:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 80011fa:	4770      	bx	lr
 80011fc:	40010400 	.word	0x40010400

08001200 <EXTI_ClearITPendingBit>:
 8001200:	4b01      	ldr	r3, [pc, #4]	; (8001208 <EXTI_ClearITPendingBit+0x8>)
 8001202:	6158      	str	r0, [r3, #20]
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40010400 	.word	0x40010400

0800120c <FLASH_Unlock>:
  * @retval None
  */
void FLASH_Unlock(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 800120c:	4b02      	ldr	r3, [pc, #8]	; (8001218 <FLASH_Unlock+0xc>)
 800120e:	4903      	ldr	r1, [pc, #12]	; (800121c <FLASH_Unlock+0x10>)
  FLASH->KEYR = FLASH_KEY2;
 8001210:	4a03      	ldr	r2, [pc, #12]	; (8001220 <FLASH_Unlock+0x14>)
  FLASH->KEYR = FLASH_KEY1;
 8001212:	6059      	str	r1, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8001214:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8001216:	4770      	bx	lr
 8001218:	40022000 	.word	0x40022000
 800121c:	45670123 	.word	0x45670123
 8001220:	cdef89ab 	.word	0xcdef89ab

08001224 <FLASH_ErasePage>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001224:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <FLASH_ErasePage+0xcc>)
{
 8001226:	b410      	push	{r4}
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001228:	68d3      	ldr	r3, [r2, #12]
 800122a:	07dc      	lsls	r4, r3, #31
 800122c:	d426      	bmi.n	800127c <FLASH_ErasePage+0x58>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 800122e:	68d3      	ldr	r3, [r2, #12]
 8001230:	0759      	lsls	r1, r3, #29
 8001232:	d440      	bmi.n	80012b6 <FLASH_ErasePage+0x92>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001234:	68d3      	ldr	r3, [r2, #12]
 8001236:	06db      	lsls	r3, r3, #27
 8001238:	d502      	bpl.n	8001240 <FLASH_ErasePage+0x1c>
      {
        flashstatus = FLASH_ERROR_WRP;
 800123a:	2003      	movs	r0, #3
}
 800123c:	bc10      	pop	{r4}
 800123e:	4770      	bx	lr
    FLASH->CR|= CR_PER_Set;
 8001240:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <FLASH_ErasePage+0xcc>)
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	f042 0202 	orr.w	r2, r2, #2
 8001248:	611a      	str	r2, [r3, #16]
    FLASH->AR = Page_Address; 
 800124a:	6158      	str	r0, [r3, #20]
    FLASH->CR|= CR_STRT_Set;
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001252:	611a      	str	r2, [r3, #16]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	07d1      	lsls	r1, r2, #31
 8001258:	d42f      	bmi.n	80012ba <FLASH_ErasePage+0x96>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	0752      	lsls	r2, r2, #29
 800125e:	d445      	bmi.n	80012ec <FLASH_ErasePage+0xc8>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001260:	68db      	ldr	r3, [r3, #12]
        flashstatus = FLASH_ERROR_WRP;
 8001262:	f013 0f10 	tst.w	r3, #16
 8001266:	bf0c      	ite	eq
 8001268:	2004      	moveq	r0, #4
 800126a:	2003      	movne	r0, #3
    FLASH->CR &= CR_PER_Reset;
 800126c:	f641 71fd 	movw	r1, #8189	; 0x1ffd
 8001270:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <FLASH_ErasePage+0xcc>)
}
 8001272:	bc10      	pop	{r4}
    FLASH->CR &= CR_PER_Reset;
 8001274:	6913      	ldr	r3, [r2, #16]
 8001276:	400b      	ands	r3, r1
 8001278:	6113      	str	r3, [r2, #16]
}
 800127a:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800127c:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8001280:	68d4      	ldr	r4, [r2, #12]
 8001282:	1e59      	subs	r1, r3, #1
 8001284:	07e4      	lsls	r4, r4, #31
 8001286:	d40a      	bmi.n	800129e <FLASH_ErasePage+0x7a>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001288:	68d4      	ldr	r4, [r2, #12]
 800128a:	0764      	lsls	r4, r4, #29
 800128c:	d411      	bmi.n	80012b2 <FLASH_ErasePage+0x8e>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 800128e:	68d2      	ldr	r2, [r2, #12]
 8001290:	06d4      	lsls	r4, r2, #27
 8001292:	d408      	bmi.n	80012a6 <FLASH_ErasePage+0x82>
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    status = FLASH_GetBank1Status();
    Timeout--;
  }
  if(Timeout == 0x00 )
 8001294:	2b01      	cmp	r3, #1
 8001296:	d1d3      	bne.n	8001240 <FLASH_ErasePage+0x1c>
  {
    status = FLASH_TIMEOUT;
 8001298:	2005      	movs	r0, #5
}
 800129a:	bc10      	pop	{r4}
 800129c:	4770      	bx	lr
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 800129e:	460b      	mov	r3, r1
 80012a0:	2900      	cmp	r1, #0
 80012a2:	d1ed      	bne.n	8001280 <FLASH_ErasePage+0x5c>
 80012a4:	e7f8      	b.n	8001298 <FLASH_ErasePage+0x74>
        flashstatus = FLASH_ERROR_WRP;
 80012a6:	2003      	movs	r0, #3
    status = FLASH_TIMEOUT;
 80012a8:	2900      	cmp	r1, #0
 80012aa:	bf08      	it	eq
 80012ac:	2005      	moveq	r0, #5
}
 80012ae:	bc10      	pop	{r4}
 80012b0:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 80012b2:	2002      	movs	r0, #2
 80012b4:	e7f8      	b.n	80012a8 <FLASH_ErasePage+0x84>
 80012b6:	2002      	movs	r0, #2
 80012b8:	e7ef      	b.n	800129a <FLASH_ErasePage+0x76>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012ba:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80012be:	68d9      	ldr	r1, [r3, #12]
 80012c0:	3a01      	subs	r2, #1
 80012c2:	07cc      	lsls	r4, r1, #31
 80012c4:	d40c      	bmi.n	80012e0 <FLASH_ErasePage+0xbc>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012c6:	68d9      	ldr	r1, [r3, #12]
 80012c8:	0749      	lsls	r1, r1, #29
 80012ca:	d40d      	bmi.n	80012e8 <FLASH_ErasePage+0xc4>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012cc:	68db      	ldr	r3, [r3, #12]
        flashstatus = FLASH_COMPLETE;
 80012ce:	f013 0f10 	tst.w	r3, #16
 80012d2:	bf14      	ite	ne
 80012d4:	2003      	movne	r0, #3
 80012d6:	2004      	moveq	r0, #4
    status = FLASH_TIMEOUT;
 80012d8:	2a00      	cmp	r2, #0
 80012da:	bf08      	it	eq
 80012dc:	2005      	moveq	r0, #5
 80012de:	e7c5      	b.n	800126c <FLASH_ErasePage+0x48>
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	d1ec      	bne.n	80012be <FLASH_ErasePage+0x9a>
    status = FLASH_TIMEOUT;
 80012e4:	2005      	movs	r0, #5
 80012e6:	e7c1      	b.n	800126c <FLASH_ErasePage+0x48>
      flashstatus = FLASH_ERROR_PG;
 80012e8:	2002      	movs	r0, #2
 80012ea:	e7f5      	b.n	80012d8 <FLASH_ErasePage+0xb4>
 80012ec:	2002      	movs	r0, #2
 80012ee:	e7bd      	b.n	800126c <FLASH_ErasePage+0x48>
 80012f0:	40022000 	.word	0x40022000

080012f4 <FLASH_ProgramHalfWord>:
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012f4:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <FLASH_ProgramHalfWord+0xc4>)
{
 80012f6:	b430      	push	{r4, r5}
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012f8:	68d3      	ldr	r3, [r2, #12]
 80012fa:	07dd      	lsls	r5, r3, #31
 80012fc:	d422      	bmi.n	8001344 <FLASH_ProgramHalfWord+0x50>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012fe:	68d3      	ldr	r3, [r2, #12]
 8001300:	075c      	lsls	r4, r3, #29
 8001302:	d43c      	bmi.n	800137e <FLASH_ProgramHalfWord+0x8a>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001304:	68d3      	ldr	r3, [r2, #12]
 8001306:	06db      	lsls	r3, r3, #27
 8001308:	d502      	bpl.n	8001310 <FLASH_ProgramHalfWord+0x1c>
}
 800130a:	bc30      	pop	{r4, r5}
        flashstatus = FLASH_ERROR_WRP;
 800130c:	2003      	movs	r0, #3
}
 800130e:	4770      	bx	lr
    FLASH->CR |= CR_PG_Set;
 8001310:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <FLASH_ProgramHalfWord+0xc4>)
 8001312:	6913      	ldr	r3, [r2, #16]
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 800131a:	8001      	strh	r1, [r0, #0]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800131c:	68d3      	ldr	r3, [r2, #12]
 800131e:	07db      	lsls	r3, r3, #31
 8001320:	d42f      	bmi.n	8001382 <FLASH_ProgramHalfWord+0x8e>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001322:	68d3      	ldr	r3, [r2, #12]
 8001324:	075d      	lsls	r5, r3, #29
 8001326:	d445      	bmi.n	80013b4 <FLASH_ProgramHalfWord+0xc0>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001328:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_ERROR_WRP;
 800132a:	f013 0f10 	tst.w	r3, #16
 800132e:	bf0c      	ite	eq
 8001330:	2004      	moveq	r0, #4
 8001332:	2003      	movne	r0, #3
}
 8001334:	bc30      	pop	{r4, r5}
    FLASH->CR &= CR_PG_Reset;
 8001336:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <FLASH_ProgramHalfWord+0xc4>)
 800133c:	6913      	ldr	r3, [r2, #16]
 800133e:	400b      	ands	r3, r1
 8001340:	6113      	str	r3, [r2, #16]
}
 8001342:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001348:	68d5      	ldr	r5, [r2, #12]
 800134a:	1e5c      	subs	r4, r3, #1
 800134c:	07ed      	lsls	r5, r5, #31
 800134e:	d40a      	bmi.n	8001366 <FLASH_ProgramHalfWord+0x72>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001350:	68d5      	ldr	r5, [r2, #12]
 8001352:	076d      	lsls	r5, r5, #29
 8001354:	d411      	bmi.n	800137a <FLASH_ProgramHalfWord+0x86>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001356:	68d2      	ldr	r2, [r2, #12]
 8001358:	06d2      	lsls	r2, r2, #27
 800135a:	d408      	bmi.n	800136e <FLASH_ProgramHalfWord+0x7a>
  if(Timeout == 0x00 )
 800135c:	2b01      	cmp	r3, #1
 800135e:	d1d7      	bne.n	8001310 <FLASH_ProgramHalfWord+0x1c>
    status = FLASH_TIMEOUT;
 8001360:	2005      	movs	r0, #5
}
 8001362:	bc30      	pop	{r4, r5}
 8001364:	4770      	bx	lr
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001366:	4623      	mov	r3, r4
 8001368:	2c00      	cmp	r4, #0
 800136a:	d1ed      	bne.n	8001348 <FLASH_ProgramHalfWord+0x54>
 800136c:	e7f8      	b.n	8001360 <FLASH_ProgramHalfWord+0x6c>
        flashstatus = FLASH_ERROR_WRP;
 800136e:	2003      	movs	r0, #3
    status = FLASH_TIMEOUT;
 8001370:	2c00      	cmp	r4, #0
 8001372:	bf08      	it	eq
 8001374:	2005      	moveq	r0, #5
}
 8001376:	bc30      	pop	{r4, r5}
 8001378:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 800137a:	2002      	movs	r0, #2
 800137c:	e7f8      	b.n	8001370 <FLASH_ProgramHalfWord+0x7c>
 800137e:	2002      	movs	r0, #2
 8001380:	e7ef      	b.n	8001362 <FLASH_ProgramHalfWord+0x6e>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001386:	68d1      	ldr	r1, [r2, #12]
 8001388:	3b01      	subs	r3, #1
 800138a:	07cc      	lsls	r4, r1, #31
 800138c:	d40c      	bmi.n	80013a8 <FLASH_ProgramHalfWord+0xb4>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 800138e:	68d1      	ldr	r1, [r2, #12]
 8001390:	0749      	lsls	r1, r1, #29
 8001392:	d40d      	bmi.n	80013b0 <FLASH_ProgramHalfWord+0xbc>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001394:	68d2      	ldr	r2, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 8001396:	f012 0f10 	tst.w	r2, #16
 800139a:	bf14      	ite	ne
 800139c:	2003      	movne	r0, #3
 800139e:	2004      	moveq	r0, #4
    status = FLASH_TIMEOUT;
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf08      	it	eq
 80013a4:	2005      	moveq	r0, #5
 80013a6:	e7c5      	b.n	8001334 <FLASH_ProgramHalfWord+0x40>
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1ec      	bne.n	8001386 <FLASH_ProgramHalfWord+0x92>
    status = FLASH_TIMEOUT;
 80013ac:	2005      	movs	r0, #5
 80013ae:	e7c1      	b.n	8001334 <FLASH_ProgramHalfWord+0x40>
      flashstatus = FLASH_ERROR_PG;
 80013b0:	2002      	movs	r0, #2
 80013b2:	e7f5      	b.n	80013a0 <FLASH_ProgramHalfWord+0xac>
 80013b4:	2002      	movs	r0, #2
 80013b6:	e7bd      	b.n	8001334 <FLASH_ProgramHalfWord+0x40>
 80013b8:	40022000 	.word	0x40022000

080013bc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80013bc:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80013be:	78cc      	ldrb	r4, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80013c0:	06e3      	lsls	r3, r4, #27
 80013c2:	bf48      	it	mi
 80013c4:	788b      	ldrbmi	r3, [r1, #2]
 80013c6:	f004 050f 	and.w	r5, r4, #15
 80013ca:	bf48      	it	mi
 80013cc:	431d      	orrmi	r5, r3
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80013ce:	880b      	ldrh	r3, [r1, #0]
 80013d0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80013d4:	d033      	beq.n	800143e <GPIO_Init+0x82>
 80013d6:	2c48      	cmp	r4, #72	; 0x48
  {
    tmpreg = GPIOx->CRL;
 80013d8:	6802      	ldr	r2, [r0, #0]
 80013da:	f000 80f4 	beq.w	80015c6 <GPIO_Init+0x20a>
 80013de:	2c28      	cmp	r4, #40	; 0x28
 80013e0:	f000 8133 	beq.w	800164a <GPIO_Init+0x28e>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80013e4:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80013e6:	bf44      	itt	mi
 80013e8:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80013ec:	432a      	orrmi	r2, r5
      if (currentpin == pos)
 80013ee:	0799      	lsls	r1, r3, #30
        tmpreg &= ~pinmask;
 80013f0:	bf44      	itt	mi
 80013f2:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80013f6:	ea42 1205 	orrmi.w	r2, r2, r5, lsl #4
      if (currentpin == pos)
 80013fa:	0759      	lsls	r1, r3, #29
        tmpreg &= ~pinmask;
 80013fc:	bf44      	itt	mi
 80013fe:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001402:	ea42 2205 	orrmi.w	r2, r2, r5, lsl #8
      if (currentpin == pos)
 8001406:	0719      	lsls	r1, r3, #28
        tmpreg &= ~pinmask;
 8001408:	bf44      	itt	mi
 800140a:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800140e:	ea42 3205 	orrmi.w	r2, r2, r5, lsl #12
      if (currentpin == pos)
 8001412:	06d9      	lsls	r1, r3, #27
        tmpreg &= ~pinmask;
 8001414:	bf44      	itt	mi
 8001416:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800141a:	ea42 4205 	orrmi.w	r2, r2, r5, lsl #16
      if (currentpin == pos)
 800141e:	0699      	lsls	r1, r3, #26
        tmpreg &= ~pinmask;
 8001420:	bf44      	itt	mi
 8001422:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001426:	ea42 5205 	orrmi.w	r2, r2, r5, lsl #20
      if (currentpin == pos)
 800142a:	0659      	lsls	r1, r3, #25
        tmpreg &= ~pinmask;
 800142c:	bf44      	itt	mi
 800142e:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001432:	ea42 6205 	orrmi.w	r2, r2, r5, lsl #24
      if (currentpin == pos)
 8001436:	0619      	lsls	r1, r3, #24
 8001438:	f100 8104 	bmi.w	8001644 <GPIO_Init+0x288>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800143c:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800143e:	2bff      	cmp	r3, #255	; 0xff
 8001440:	d94b      	bls.n	80014da <GPIO_Init+0x11e>
 8001442:	2c28      	cmp	r4, #40	; 0x28
  {
    tmpreg = GPIOx->CRH;
 8001444:	6842      	ldr	r2, [r0, #4]
 8001446:	d04a      	beq.n	80014de <GPIO_Init+0x122>
 8001448:	2c48      	cmp	r4, #72	; 0x48
 800144a:	f040 808e 	bne.w	800156a <GPIO_Init+0x1ae>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800144e:	05d9      	lsls	r1, r3, #23
 8001450:	d505      	bpl.n	800145e <GPIO_Init+0xa2>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001452:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 8001456:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 800145a:	432a      	orrs	r2, r5
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800145c:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800145e:	059c      	lsls	r4, r3, #22
 8001460:	d506      	bpl.n	8001470 <GPIO_Init+0xb4>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001462:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 8001466:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800146a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800146e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001470:	0559      	lsls	r1, r3, #21
 8001472:	d506      	bpl.n	8001482 <GPIO_Init+0xc6>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001474:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8001478:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800147c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001480:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001482:	051c      	lsls	r4, r3, #20
 8001484:	d506      	bpl.n	8001494 <GPIO_Init+0xd8>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001486:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 800148a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800148e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001492:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001494:	04d9      	lsls	r1, r3, #19
 8001496:	d506      	bpl.n	80014a6 <GPIO_Init+0xea>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 800149c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80014a0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014a4:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80014a6:	049c      	lsls	r4, r3, #18
 80014a8:	d506      	bpl.n	80014b8 <GPIO_Init+0xfc>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 80014ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80014b2:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014b6:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80014b8:	0459      	lsls	r1, r3, #17
 80014ba:	d506      	bpl.n	80014ca <GPIO_Init+0x10e>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 80014c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80014c4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014c8:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80014ca:	041c      	lsls	r4, r3, #16
 80014cc:	d504      	bpl.n	80014d8 <GPIO_Init+0x11c>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 80014d2:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014d6:	6103      	str	r3, [r0, #16]
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80014d8:	6042      	str	r2, [r0, #4]
  }
}
 80014da:	bc30      	pop	{r4, r5}
 80014dc:	4770      	bx	lr
      if (currentpin == pos)
 80014de:	05d9      	lsls	r1, r3, #23
 80014e0:	d505      	bpl.n	80014ee <GPIO_Init+0x132>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014e2:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 80014e6:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80014ea:	432a      	orrs	r2, r5
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014ec:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80014ee:	059c      	lsls	r4, r3, #22
 80014f0:	d506      	bpl.n	8001500 <GPIO_Init+0x144>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014f2:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 80014f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80014fa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014fe:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001500:	0559      	lsls	r1, r3, #21
 8001502:	d506      	bpl.n	8001512 <GPIO_Init+0x156>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001504:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8001508:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800150c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001510:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001512:	051c      	lsls	r4, r3, #20
 8001514:	d506      	bpl.n	8001524 <GPIO_Init+0x168>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001516:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 800151a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800151e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001522:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001524:	04d9      	lsls	r1, r3, #19
 8001526:	d506      	bpl.n	8001536 <GPIO_Init+0x17a>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 800152c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001530:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001534:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001536:	049c      	lsls	r4, r3, #18
 8001538:	d506      	bpl.n	8001548 <GPIO_Init+0x18c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800153a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 800153e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001542:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001546:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001548:	0459      	lsls	r1, r3, #17
 800154a:	d506      	bpl.n	800155a <GPIO_Init+0x19e>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800154c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001550:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001554:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001558:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 800155a:	041b      	lsls	r3, r3, #16
 800155c:	d5bc      	bpl.n	80014d8 <GPIO_Init+0x11c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800155e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 8001562:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001566:	6143      	str	r3, [r0, #20]
 8001568:	e7b6      	b.n	80014d8 <GPIO_Init+0x11c>
      if (currentpin == pos)
 800156a:	05d9      	lsls	r1, r3, #23
        tmpreg &= ~pinmask;
 800156c:	bf44      	itt	mi
 800156e:	f022 020f 	bicmi.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001572:	432a      	orrmi	r2, r5
      if (currentpin == pos)
 8001574:	059c      	lsls	r4, r3, #22
        tmpreg &= ~pinmask;
 8001576:	bf44      	itt	mi
 8001578:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800157c:	ea42 1205 	orrmi.w	r2, r2, r5, lsl #4
      if (currentpin == pos)
 8001580:	0559      	lsls	r1, r3, #21
        tmpreg &= ~pinmask;
 8001582:	bf44      	itt	mi
 8001584:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001588:	ea42 2205 	orrmi.w	r2, r2, r5, lsl #8
      if (currentpin == pos)
 800158c:	051c      	lsls	r4, r3, #20
        tmpreg &= ~pinmask;
 800158e:	bf44      	itt	mi
 8001590:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001594:	ea42 3205 	orrmi.w	r2, r2, r5, lsl #12
      if (currentpin == pos)
 8001598:	04d9      	lsls	r1, r3, #19
        tmpreg &= ~pinmask;
 800159a:	bf44      	itt	mi
 800159c:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80015a0:	ea42 4205 	orrmi.w	r2, r2, r5, lsl #16
      if (currentpin == pos)
 80015a4:	049c      	lsls	r4, r3, #18
        tmpreg &= ~pinmask;
 80015a6:	bf44      	itt	mi
 80015a8:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80015ac:	ea42 5205 	orrmi.w	r2, r2, r5, lsl #20
      if (currentpin == pos)
 80015b0:	0459      	lsls	r1, r3, #17
        tmpreg &= ~pinmask;
 80015b2:	bf44      	itt	mi
 80015b4:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80015b8:	ea42 6205 	orrmi.w	r2, r2, r5, lsl #24
      if (currentpin == pos)
 80015bc:	041c      	lsls	r4, r3, #16
 80015be:	d58b      	bpl.n	80014d8 <GPIO_Init+0x11c>
        tmpreg |= (currentmode << pos);
 80015c0:	f365 721f 	bfi	r2, r5, #28, #4
 80015c4:	e788      	b.n	80014d8 <GPIO_Init+0x11c>
      if (currentpin == pos)
 80015c6:	07d9      	lsls	r1, r3, #31
 80015c8:	d504      	bpl.n	80015d4 <GPIO_Init+0x218>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015ca:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 80015cc:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80015d0:	432a      	orrs	r2, r5
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015d2:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80015d4:	0799      	lsls	r1, r3, #30
 80015d6:	d505      	bpl.n	80015e4 <GPIO_Init+0x228>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015d8:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 80015da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80015de:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015e2:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80015e4:	0759      	lsls	r1, r3, #29
 80015e6:	d505      	bpl.n	80015f4 <GPIO_Init+0x238>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015e8:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 80015ea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80015ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015f2:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80015f4:	0719      	lsls	r1, r3, #28
 80015f6:	d505      	bpl.n	8001604 <GPIO_Init+0x248>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015f8:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 80015fa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80015fe:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001602:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001604:	06d9      	lsls	r1, r3, #27
 8001606:	d505      	bpl.n	8001614 <GPIO_Init+0x258>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001608:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 800160a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800160e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001612:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001614:	0699      	lsls	r1, r3, #26
 8001616:	d505      	bpl.n	8001624 <GPIO_Init+0x268>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001618:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800161a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800161e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001622:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001624:	0659      	lsls	r1, r3, #25
 8001626:	d505      	bpl.n	8001634 <GPIO_Init+0x278>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001628:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 800162a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 800162e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001632:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001634:	0619      	lsls	r1, r3, #24
 8001636:	f57f af01 	bpl.w	800143c <GPIO_Init+0x80>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800163a:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 800163c:	f365 721f 	bfi	r2, r5, #28, #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001640:	6101      	str	r1, [r0, #16]
 8001642:	e6fb      	b.n	800143c <GPIO_Init+0x80>
        tmpreg |= (currentmode << pos);
 8001644:	f365 721f 	bfi	r2, r5, #28, #4
 8001648:	e6f8      	b.n	800143c <GPIO_Init+0x80>
      if (currentpin == pos)
 800164a:	07d9      	lsls	r1, r3, #31
 800164c:	d504      	bpl.n	8001658 <GPIO_Init+0x29c>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800164e:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 8001650:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001654:	432a      	orrs	r2, r5
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001656:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001658:	0799      	lsls	r1, r3, #30
 800165a:	d505      	bpl.n	8001668 <GPIO_Init+0x2ac>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800165c:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 800165e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001662:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001666:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001668:	0759      	lsls	r1, r3, #29
 800166a:	d505      	bpl.n	8001678 <GPIO_Init+0x2bc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800166c:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 800166e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001672:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001676:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001678:	0719      	lsls	r1, r3, #28
 800167a:	d505      	bpl.n	8001688 <GPIO_Init+0x2cc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800167c:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 800167e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001682:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001686:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001688:	06d9      	lsls	r1, r3, #27
 800168a:	d505      	bpl.n	8001698 <GPIO_Init+0x2dc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800168c:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 800168e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001692:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001696:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001698:	0699      	lsls	r1, r3, #26
 800169a:	d505      	bpl.n	80016a8 <GPIO_Init+0x2ec>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800169c:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800169e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80016a2:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80016a6:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80016a8:	0659      	lsls	r1, r3, #25
 80016aa:	d505      	bpl.n	80016b8 <GPIO_Init+0x2fc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80016ac:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 80016ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80016b2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80016b6:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80016b8:	0619      	lsls	r1, r3, #24
 80016ba:	f57f aebf 	bpl.w	800143c <GPIO_Init+0x80>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80016be:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80016c0:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80016c4:	6141      	str	r1, [r0, #20]
 80016c6:	e6b9      	b.n	800143c <GPIO_Init+0x80>

080016c8 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 80016c8:	6880      	ldr	r0, [r0, #8]
}
 80016ca:	b280      	uxth	r0, r0
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop

080016d0 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 80016d0:	68c0      	ldr	r0, [r0, #12]
}
 80016d2:	b280      	uxth	r0, r0
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80016d8:	6101      	str	r1, [r0, #16]
}
 80016da:	4770      	bx	lr

080016dc <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80016dc:	6141      	str	r1, [r0, #20]
}
 80016de:	4770      	bx	lr

080016e0 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80016e0:	b90a      	cbnz	r2, 80016e6 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80016e2:	6141      	str	r1, [r0, #20]
  }
}
 80016e4:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80016e6:	6101      	str	r1, [r0, #16]
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop

080016ec <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80016ec:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80016f0:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 80016f4:	bfb4      	ite	lt
 80016f6:	69db      	ldrlt	r3, [r3, #28]
    tmpreg = AFIO->MAPR;
 80016f8:	685b      	ldrge	r3, [r3, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80016fa:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
{
 80016fe:	b430      	push	{r4, r5}
  tmp = GPIO_Remap & LSB_MASK;
 8001700:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001702:	d01e      	beq.n	8001742 <GPIO_PinRemapConfig+0x56>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001704:	02c2      	lsls	r2, r0, #11
 8001706:	d513      	bpl.n	8001730 <GPIO_PinRemapConfig+0x44>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8001708:	2203      	movs	r2, #3
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 800170a:	f3c0 4503 	ubfx	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 800170e:	40aa      	lsls	r2, r5
    tmpreg &= ~tmp1;
 8001710:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001714:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 8001718:	b119      	cbz	r1, 8001722 <GPIO_PinRemapConfig+0x36>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800171a:	0d42      	lsrs	r2, r0, #21
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	4094      	lsls	r4, r2
 8001720:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 8001722:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <GPIO_PinRemapConfig+0x68>)
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001724:	2800      	cmp	r0, #0
    AFIO->MAPR2 = tmpreg;
 8001726:	bfb4      	ite	lt
 8001728:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 800172a:	6053      	strge	r3, [r2, #4]
  }  
}
 800172c:	bc30      	pop	{r4, r5}
 800172e:	4770      	bx	lr
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001730:	0d42      	lsrs	r2, r0, #21
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	fa04 f202 	lsl.w	r2, r4, r2
 8001738:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800173c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001740:	e7ea      	b.n	8001718 <GPIO_PinRemapConfig+0x2c>
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001742:	4d04      	ldr	r5, [pc, #16]	; (8001754 <GPIO_PinRemapConfig+0x68>)
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001744:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001748:	686a      	ldr	r2, [r5, #4]
 800174a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800174e:	606a      	str	r2, [r5, #4]
 8001750:	e7e2      	b.n	8001718 <GPIO_PinRemapConfig+0x2c>
 8001752:	bf00      	nop
 8001754:	40010000 	.word	0x40010000

08001758 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001758:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800175a:	240f      	movs	r4, #15
 800175c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8001760:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001764:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001768:	f001 0103 	and.w	r1, r1, #3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800176c:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800176e:	0089      	lsls	r1, r1, #2
 8001770:	408c      	lsls	r4, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001772:	ea22 0204 	bic.w	r2, r2, r4
 8001776:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	fa00 f101 	lsl.w	r1, r0, r1
 800177e:	4311      	orrs	r1, r2
 8001780:	6099      	str	r1, [r3, #8]
}
 8001782:	bc10      	pop	{r4}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop

08001788 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8001788:	4b01      	ldr	r3, [pc, #4]	; (8001790 <RCC_USBCLKConfig+0x8>)
 800178a:	6018      	str	r0, [r3, #0]
}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	424200d8 	.word	0x424200d8

08001794 <RCC_APB2PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <RCC_APB2PeriphClockCmd+0x14>)
 8001796:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 8001798:	b919      	cbnz	r1, 80017a2 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800179a:	ea23 0000 	bic.w	r0, r3, r0
 800179e:	6190      	str	r0, [r2, #24]
  }
}
 80017a0:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 80017a2:	4318      	orrs	r0, r3
 80017a4:	6190      	str	r0, [r2, #24]
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000

080017ac <RCC_APB1PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <RCC_APB1PeriphClockCmd+0x14>)
 80017ae:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 80017b0:	b919      	cbnz	r1, 80017ba <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80017b2:	ea23 0000 	bic.w	r0, r3, r0
 80017b6:	61d0      	str	r0, [r2, #28]
  }
}
 80017b8:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 80017ba:	4318      	orrs	r0, r3
 80017bc:	61d0      	str	r0, [r2, #28]
 80017be:	4770      	bx	lr
 80017c0:	40021000 	.word	0x40021000

080017c4 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80017c4:	4a27      	ldr	r2, [pc, #156]	; (8001864 <TIM_TimeBaseInit+0xa0>)
  tmpcr1 = TIMx->CR1;  
 80017c6:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80017c8:	4290      	cmp	r0, r2
{
 80017ca:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;  
 80017cc:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80017ce:	d012      	beq.n	80017f6 <TIM_TimeBaseInit+0x32>
 80017d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d4:	4290      	cmp	r0, r2
 80017d6:	d00e      	beq.n	80017f6 <TIM_TimeBaseInit+0x32>
 80017d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017dc:	d00b      	beq.n	80017f6 <TIM_TimeBaseInit+0x32>
 80017de:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80017e2:	4290      	cmp	r0, r2
 80017e4:	d007      	beq.n	80017f6 <TIM_TimeBaseInit+0x32>
 80017e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017ea:	4290      	cmp	r0, r2
 80017ec:	d003      	beq.n	80017f6 <TIM_TimeBaseInit+0x32>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80017ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017f2:	4290      	cmp	r0, r2
 80017f4:	d103      	bne.n	80017fe <TIM_TimeBaseInit+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80017f6:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80017f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80017fc:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80017fe:	4d1a      	ldr	r5, [pc, #104]	; (8001868 <TIM_TimeBaseInit+0xa4>)
 8001800:	888c      	ldrh	r4, [r1, #4]
 8001802:	42a8      	cmp	r0, r5
 8001804:	880a      	ldrh	r2, [r1, #0]
 8001806:	d015      	beq.n	8001834 <TIM_TimeBaseInit+0x70>
 8001808:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800180c:	42a8      	cmp	r0, r5
 800180e:	d011      	beq.n	8001834 <TIM_TimeBaseInit+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001810:	88ce      	ldrh	r6, [r1, #6]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001816:	b29b      	uxth	r3, r3
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001818:	f505 358c 	add.w	r5, r5, #71680	; 0x11800
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800181c:	4333      	orrs	r3, r6
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800181e:	42a8      	cmp	r0, r5
  TIMx->CR1 = tmpcr1;
 8001820:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001822:	8584      	strh	r4, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001824:	8502      	strh	r2, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001826:	d10c      	bne.n	8001842 <TIM_TimeBaseInit+0x7e>
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
}
 8001828:	bc70      	pop	{r4, r5, r6}
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800182a:	7a0b      	ldrb	r3, [r1, #8]
 800182c:	8603      	strh	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800182e:	2301      	movs	r3, #1
 8001830:	8283      	strh	r3, [r0, #20]
}
 8001832:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 8001834:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001836:	8584      	strh	r4, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001838:	8502      	strh	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800183a:	2301      	movs	r3, #1
}
 800183c:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800183e:	8283      	strh	r3, [r0, #20]
}
 8001840:	4770      	bx	lr
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <TIM_TimeBaseInit+0xa8>)
 8001844:	4298      	cmp	r0, r3
 8001846:	d0ef      	beq.n	8001828 <TIM_TimeBaseInit+0x64>
 8001848:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800184c:	4298      	cmp	r0, r3
 800184e:	d0eb      	beq.n	8001828 <TIM_TimeBaseInit+0x64>
 8001850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001854:	4298      	cmp	r0, r3
 8001856:	d0e7      	beq.n	8001828 <TIM_TimeBaseInit+0x64>
 8001858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800185c:	4298      	cmp	r0, r3
 800185e:	d0e3      	beq.n	8001828 <TIM_TimeBaseInit+0x64>
 8001860:	e7eb      	b.n	800183a <TIM_TimeBaseInit+0x76>
 8001862:	bf00      	nop
 8001864:	40012c00 	.word	0x40012c00
 8001868:	40001000 	.word	0x40001000
 800186c:	40013400 	.word	0x40013400

08001870 <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001870:	8c03      	ldrh	r3, [r0, #32]
{
 8001872:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800187c:	890d      	ldrh	r5, [r1, #8]
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800187e:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001880:	8c02      	ldrh	r2, [r0, #32]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001882:	884e      	ldrh	r6, [r1, #2]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001884:	f022 0202 	bic.w	r2, r2, #2
  tmpcr2 =  TIMx->CR2;
 8001888:	8884      	ldrh	r4, [r0, #4]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800188a:	0412      	lsls	r2, r2, #16
  tmpccmrx = TIMx->CCMR1;
 800188c:	8b03      	ldrh	r3, [r0, #24]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800188e:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001890:	0c12      	lsrs	r2, r2, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001892:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001896:	432a      	orrs	r2, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001898:	4d16      	ldr	r5, [pc, #88]	; (80018f4 <TIM_OC1Init+0x84>)
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800189a:	041b      	lsls	r3, r3, #16
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800189c:	880e      	ldrh	r6, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800189e:	0c1b      	lsrs	r3, r3, #16
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80018a0:	42a8      	cmp	r0, r5
  tmpcr2 =  TIMx->CR2;
 80018a2:	b2a4      	uxth	r4, r4
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80018a4:	ea43 0306 	orr.w	r3, r3, r6
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80018a8:	d00f      	beq.n	80018ca <TIM_OC1Init+0x5a>
 80018aa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80018ae:	42a8      	cmp	r0, r5
 80018b0:	d00b      	beq.n	80018ca <TIM_OC1Init+0x5a>
 80018b2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80018b6:	42a8      	cmp	r0, r5
 80018b8:	d007      	beq.n	80018ca <TIM_OC1Init+0x5a>
 80018ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018be:	42a8      	cmp	r0, r5
 80018c0:	d003      	beq.n	80018ca <TIM_OC1Init+0x5a>
     (TIMx == TIM16)|| (TIMx == TIM17))
 80018c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018c6:	42a8      	cmp	r0, r5
 80018c8:	d10d      	bne.n	80018e6 <TIM_OC1Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80018ca:	894e      	ldrh	r6, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 80018cc:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80018d0:	898d      	ldrh	r5, [r1, #12]
 80018d2:	89cf      	ldrh	r7, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80018d4:	4332      	orrs	r2, r6
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80018d6:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 80018d8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 80018dc:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80018e0:	433d      	orrs	r5, r7
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80018e2:	4332      	orrs	r2, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80018e4:	432c      	orrs	r4, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80018e6:	88c9      	ldrh	r1, [r1, #6]
  TIMx->CR2 = tmpcr2;
 80018e8:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80018ea:	8303      	strh	r3, [r0, #24]
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80018ec:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80018ee:	8681      	strh	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80018f0:	8402      	strh	r2, [r0, #32]
}
 80018f2:	4770      	bx	lr
 80018f4:	40012c00 	.word	0x40012c00

080018f8 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fe:	6003      	str	r3, [r0, #0]
 8001900:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001902:	7203      	strb	r3, [r0, #8]
}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001908:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 800190a:	b929      	cbnz	r1, 8001918 <TIM_Cmd+0x10>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	041b      	lsls	r3, r3, #16
 8001912:	0c1b      	lsrs	r3, r3, #16
 8001914:	8003      	strh	r3, [r0, #0]
  }
}
 8001916:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	8003      	strh	r3, [r0, #0]
 800191e:	4770      	bx	lr

08001920 <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001920:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 8001924:	b921      	cbnz	r1, 8001930 <TIM_CtrlPWMOutputs+0x10>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001926:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800192a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }  
}
 800192e:	4770      	bx	lr
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001934:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop

0800193c <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800193c:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 800193e:	b91a      	cbnz	r2, 8001948 <TIM_ITConfig+0xc>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001940:	ea23 0101 	bic.w	r1, r3, r1
 8001944:	8181      	strh	r1, [r0, #12]
  }
}
 8001946:	4770      	bx	lr
    TIMx->DIER |= TIM_IT;
 8001948:	4319      	orrs	r1, r3
 800194a:	8181      	strh	r1, [r0, #12]
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop

08001950 <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001950:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001952:	f023 0308 	bic.w	r3, r3, #8
 8001956:	041b      	lsls	r3, r3, #16
 8001958:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800195a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800195c:	8301      	strh	r1, [r0, #24]
}
 800195e:	4770      	bx	lr

08001960 <TIM_ClearITPendingBit>:
 8001960:	43c9      	mvns	r1, r1
 8001962:	b289      	uxth	r1, r1
 8001964:	8201      	strh	r1, [r0, #16]
 8001966:	4770      	bx	lr

08001968 <coolant_init>:

#include "grbl.h"


void coolant_init()
{
 8001968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);

	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 800196c:	2708      	movs	r7, #8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800196e:	2510      	movs	r5, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001970:	f04f 0803 	mov.w	r8, #3
{
 8001974:	b082      	sub	sp, #8
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001976:	4c14      	ldr	r4, [pc, #80]	; (80019c8 <coolant_init+0x60>)
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001978:	ae02      	add	r6, sp, #8
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 800197a:	4638      	mov	r0, r7
 800197c:	2101      	movs	r1, #1
 800197e:	f7ff ff09 	bl	8001794 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001982:	f826 5d04 	strh.w	r5, [r6, #-4]!
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001986:	4631      	mov	r1, r6
 8001988:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800198a:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800198e:	f88d 8006 	strb.w	r8, [sp, #6]
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001992:	f7ff fd13 	bl	80013bc <GPIO_Init>
	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
 8001996:	4638      	mov	r0, r7
 8001998:	2101      	movs	r1, #1
 800199a:	f7ff fefb 	bl	8001794 <RCC_APB2PeriphClockCmd>
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 800199e:	4631      	mov	r1, r6
 80019a0:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80019a2:	f88d 8006 	strb.w	r8, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80019a6:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 80019aa:	f8ad 7004 	strh.w	r7, [sp, #4]
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 80019ae:	f7ff fd05 	bl	80013bc <GPIO_Init>
#endif
  #else
#ifdef AVRTARGET
	COOLANT_FLOOD_PORT &= ~(1 << COOLANT_FLOOD_BIT);
#else
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 80019b2:	4629      	mov	r1, r5
 80019b4:	4620      	mov	r0, r4
 80019b6:	f7ff fe91 	bl	80016dc <GPIO_ResetBits>
#endif
    #else
#ifdef AVRTARGET
	COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
#else
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 80019ba:	4639      	mov	r1, r7
 80019bc:	4620      	mov	r0, r4
 80019be:	f7ff fe8d 	bl	80016dc <GPIO_ResetBits>
}
 80019c2:	b002      	add	sp, #8
 80019c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019c8:	40010c00 	.word	0x40010c00

080019cc <coolant_get_state>:
{
 80019cc:	b510      	push	{r4, lr}
    if (bit_istrue(
 80019ce:	4807      	ldr	r0, [pc, #28]	; (80019ec <coolant_get_state+0x20>)
 80019d0:	f7ff fe7e 	bl	80016d0 <GPIO_ReadOutputData>
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 80019d4:	f3c0 1400 	ubfx	r4, r0, #4, #1
      if (bit_istrue(
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <coolant_get_state+0x20>)
 80019da:	f7ff fe79 	bl	80016d0 <GPIO_ReadOutputData>
 80019de:	0703      	lsls	r3, r0, #28
      cl_state |= COOLANT_STATE_MIST;
 80019e0:	bf48      	it	mi
 80019e2:	f044 0402 	orrmi.w	r4, r4, #2
}
 80019e6:	4620      	mov	r0, r4
 80019e8:	bd10      	pop	{r4, pc}
 80019ea:	bf00      	nop
 80019ec:	40010c00 	.word	0x40010c00

080019f0 <coolant_stop>:
{
 80019f0:	b510      	push	{r4, lr}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 80019f2:	4c05      	ldr	r4, [pc, #20]	; (8001a08 <coolant_stop+0x18>)
 80019f4:	2110      	movs	r1, #16
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff fe70 	bl	80016dc <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 80019fc:	4620      	mov	r0, r4
#endif
    #endif
  #endif
#endif
}
 80019fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001a02:	2108      	movs	r1, #8
 8001a04:	f7ff be6a 	b.w	80016dc <GPIO_ResetBits>
 8001a08:	40010c00 	.word	0x40010c00

08001a0c <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 8001a0c:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.  
 8001a0e:	4d0f      	ldr	r5, [pc, #60]	; (8001a4c <coolant_set_state+0x40>)
 8001a10:	786b      	ldrb	r3, [r5, #1]
 8001a12:	b93b      	cbnz	r3, 8001a24 <coolant_set_state+0x18>
 8001a14:	4604      	mov	r4, r0
  
  if (mode == COOLANT_DISABLE) {
 8001a16:	b130      	cbz	r0, 8001a26 <coolant_set_state+0x1a>
    coolant_stop(); 
  
  } else {
  
#if defined(AVRTARGET) || defined(STM32F103C8)
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001a18:	0642      	lsls	r2, r0, #25
 8001a1a:	d40d      	bmi.n	8001a38 <coolant_set_state+0x2c>
#endif
      #endif
    }
  
    #ifdef ENABLE_M7
      if (mode & COOLANT_MIST_ENABLE) {
 8001a1c:	0623      	lsls	r3, r4, #24
 8001a1e:	d410      	bmi.n	8001a42 <coolant_set_state+0x36>
        #endif
      }
    #endif
#endif  
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001a20:	2300      	movs	r3, #0
 8001a22:	732b      	strb	r3, [r5, #12]
}
 8001a24:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001a26:	2110      	movs	r1, #16
 8001a28:	4809      	ldr	r0, [pc, #36]	; (8001a50 <coolant_set_state+0x44>)
 8001a2a:	f7ff fe57 	bl	80016dc <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001a2e:	2108      	movs	r1, #8
 8001a30:	4807      	ldr	r0, [pc, #28]	; (8001a50 <coolant_set_state+0x44>)
 8001a32:	f7ff fe53 	bl	80016dc <GPIO_ResetBits>
 8001a36:	e7f3      	b.n	8001a20 <coolant_set_state+0x14>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001a38:	2110      	movs	r1, #16
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <coolant_set_state+0x44>)
 8001a3c:	f7ff fe4c 	bl	80016d8 <GPIO_SetBits>
 8001a40:	e7ec      	b.n	8001a1c <coolant_set_state+0x10>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001a42:	2108      	movs	r1, #8
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <coolant_set_state+0x44>)
 8001a46:	f7ff fe47 	bl	80016d8 <GPIO_SetBits>
 8001a4a:	e7e9      	b.n	8001a20 <coolant_set_state+0x14>
 8001a4c:	200013f0 	.word	0x200013f0
 8001a50:	40010c00 	.word	0x40010c00

08001a54 <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 8001a54:	b538      	push	{r3, r4, r5, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 8001a56:	4c12      	ldr	r4, [pc, #72]	; (8001aa0 <coolant_sync+0x4c>)
 8001a58:	7823      	ldrb	r3, [r4, #0]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d004      	beq.n	8001a68 <coolant_sync+0x14>
 8001a5e:	4605      	mov	r5, r0
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 8001a60:	f004 fa2c 	bl	8005ebc <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.  
 8001a64:	7863      	ldrb	r3, [r4, #1]
 8001a66:	b103      	cbz	r3, 8001a6a <coolant_sync+0x16>
  coolant_set_state(mode);
}
 8001a68:	bd38      	pop	{r3, r4, r5, pc}
  if (mode == COOLANT_DISABLE) {
 8001a6a:	b135      	cbz	r5, 8001a7a <coolant_sync+0x26>
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001a6c:	066a      	lsls	r2, r5, #25
 8001a6e:	d40d      	bmi.n	8001a8c <coolant_sync+0x38>
      if (mode & COOLANT_MIST_ENABLE) {
 8001a70:	062b      	lsls	r3, r5, #24
 8001a72:	d410      	bmi.n	8001a96 <coolant_sync+0x42>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001a74:	2300      	movs	r3, #0
 8001a76:	7323      	strb	r3, [r4, #12]
}
 8001a78:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001a7a:	2110      	movs	r1, #16
 8001a7c:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <coolant_sync+0x50>)
 8001a7e:	f7ff fe2d 	bl	80016dc <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001a82:	2108      	movs	r1, #8
 8001a84:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <coolant_sync+0x50>)
 8001a86:	f7ff fe29 	bl	80016dc <GPIO_ResetBits>
 8001a8a:	e7f3      	b.n	8001a74 <coolant_sync+0x20>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <coolant_sync+0x50>)
 8001a90:	f7ff fe22 	bl	80016d8 <GPIO_SetBits>
 8001a94:	e7ec      	b.n	8001a70 <coolant_sync+0x1c>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001a96:	2108      	movs	r1, #8
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <coolant_sync+0x50>)
 8001a9a:	f7ff fe1d 	bl	80016d8 <GPIO_SetBits>
 8001a9e:	e7e9      	b.n	8001a74 <coolant_sync+0x20>
 8001aa0:	200013f0 	.word	0x200013f0
 8001aa4:	40010c00 	.word	0x40010c00

08001aa8 <eeprom_init>:
		nSize -= 4;
		nAddress += 4;
	}
}
void eeprom_init()
{
 8001aa8:	b410      	push	{r4}
	uint16_t VarIdx = 0;
	uint8_t *pTmp = EE_Buffer;
 8001aaa:	4c0d      	ldr	r4, [pc, #52]	; (8001ae0 <eeprom_init+0x38>)
 8001aac:	4623      	mov	r3, r4
 8001aae:	f1c4 6100 	rsb	r1, r4, #134217728	; 0x8000000
 8001ab2:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 8001ab6:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001aba:	185a      	adds	r2, r3, r1

	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
	{
		*pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8001abc:	7812      	ldrb	r2, [r2, #0]
 8001abe:	f803 2b01 	strb.w	r2, [r3], #1
	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8001ac2:	4283      	cmp	r3, r0
 8001ac4:	d1f9      	bne.n	8001aba <eeprom_init+0x12>
	}

	if (EE_Buffer[0] != SETTINGS_VERSION)
 8001ac6:	7823      	ldrb	r3, [r4, #0]
 8001ac8:	2b0a      	cmp	r3, #10
 8001aca:	d006      	beq.n	8001ada <eeprom_init+0x32>
 8001acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad0:	21ff      	movs	r1, #255	; 0xff
 8001ad2:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <eeprom_init+0x38>)
		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
		{
			*pTmp++ = 0xFF;
		}
	}
}
 8001ad4:	bc10      	pop	{r4}
 8001ad6:	f009 b9e2 	b.w	800ae9e <memset>
 8001ada:	bc10      	pop	{r4}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000f54 	.word	0x20000f54

08001ae4 <eeprom_get_char>:
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	return EE_Buffer[addr];
 8001ae4:	4b01      	ldr	r3, [pc, #4]	; (8001aec <eeprom_get_char+0x8>)
#endif
}
 8001ae6:	5c18      	ldrb	r0, [r3, r0]
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000f54 	.word	0x20000f54

08001af0 <eeprom_put_char>:
	}
	
	sei(); // Restore interrupt flag state.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	EE_Buffer[addr] = new_value;
 8001af0:	4b01      	ldr	r3, [pc, #4]	; (8001af8 <eeprom_put_char+0x8>)
 8001af2:	5419      	strb	r1, [r3, r0]
#endif
}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000f54 	.word	0x20000f54

08001afc <memcpy_to_eeprom_with_checksum>:

int cTo=0;
//int cFrom=0;

// Extensions added as part of Grbl 
void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8001afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned char checksum = 0;
  cTo+=1;
 8001b00:	4c22      	ldr	r4, [pc, #136]	; (8001b8c <memcpy_to_eeprom_with_checksum+0x90>)
void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8001b02:	4684      	mov	ip, r0
  cTo+=1;
 8001b04:	6823      	ldr	r3, [r4, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	6023      	str	r3, [r4, #0]
  for(; size > 0; size--) { 
 8001b0a:	2a00      	cmp	r2, #0
 8001b0c:	d03b      	beq.n	8001b86 <memcpy_to_eeprom_with_checksum+0x8a>
  unsigned char checksum = 0;
 8001b0e:	2400      	movs	r4, #0
 8001b10:	4d1f      	ldr	r5, [pc, #124]	; (8001b90 <memcpy_to_eeprom_with_checksum+0x94>)
 8001b12:	1e46      	subs	r6, r0, #1
 8001b14:	442e      	add	r6, r5
 8001b16:	188f      	adds	r7, r1, r2
    checksum = (checksum << 1) | (checksum >> 7);
    checksum += *source;
 8001b18:	f811 0b01 	ldrb.w	r0, [r1], #1
    checksum = (checksum << 1) | (checksum >> 7);
 8001b1c:	09e3      	lsrs	r3, r4, #7
 8001b1e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    checksum += *source;
 8001b22:	4403      	add	r3, r0
  for(; size > 0; size--) { 
 8001b24:	42b9      	cmp	r1, r7
    checksum += *source;
 8001b26:	f003 04ff 	and.w	r4, r3, #255	; 0xff
	EE_Buffer[addr] = new_value;
 8001b2a:	f806 0f01 	strb.w	r0, [r6, #1]!
  for(; size > 0; size--) { 
 8001b2e:	d1f3      	bne.n	8001b18 <memcpy_to_eeprom_with_checksum+0x1c>
 8001b30:	4494      	add	ip, r2
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001b32:	4818      	ldr	r0, [pc, #96]	; (8001b94 <memcpy_to_eeprom_with_checksum+0x98>)
	EE_Buffer[addr] = new_value;
 8001b34:	f805 400c 	strb.w	r4, [r5, ip]
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001b38:	f7ff fb74 	bl	8001224 <FLASH_ErasePage>
	if (FlashStatus != FLASH_COMPLETE)
 8001b3c:	2804      	cmp	r0, #4
 8001b3e:	d001      	beq.n	8001b44 <memcpy_to_eeprom_with_checksum+0x48>
#if defined(WIN32) || defined(STM32F103C8)
#ifndef NOEEPROMSUPPORT
  eeprom_flush();
#endif
#endif
}
 8001b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint16_t *pBuffer = (uint16_t *)EE_Buffer;
 8001b44:	4c12      	ldr	r4, [pc, #72]	; (8001b90 <memcpy_to_eeprom_with_checksum+0x94>)
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001b46:	4f14      	ldr	r7, [pc, #80]	; (8001b98 <memcpy_to_eeprom_with_checksum+0x9c>)
 8001b48:	f1c5 6600 	rsb	r6, r5, #134217728	; 0x8000000
 8001b4c:	f504 6880 	add.w	r8, r4, #1024	; 0x400
 8001b50:	1b7f      	subs	r7, r7, r5
 8001b52:	f506 36fe 	add.w	r6, r6, #130048	; 0x1fc00
		if (*pBuffer != 0xffff)
 8001b56:	4625      	mov	r5, r4
 8001b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b5c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8001b60:	19a0      	adds	r0, r4, r6
 8001b62:	4299      	cmp	r1, r3
 8001b64:	f104 0404 	add.w	r4, r4, #4
 8001b68:	d001      	beq.n	8001b6e <memcpy_to_eeprom_with_checksum+0x72>
			FLASH_ProgramHalfWord(nAddress, *pBuffer++);
 8001b6a:	f7ff fbc3 	bl	80012f4 <FLASH_ProgramHalfWord>
		if (*pBuffer != 0xffff)
 8001b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b72:	8829      	ldrh	r1, [r5, #0]
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001b74:	19e0      	adds	r0, r4, r7
		if (*pBuffer != 0xffff)
 8001b76:	4299      	cmp	r1, r3
 8001b78:	d001      	beq.n	8001b7e <memcpy_to_eeprom_with_checksum+0x82>
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001b7a:	f7ff fbbb 	bl	80012f4 <FLASH_ProgramHalfWord>
	while (nSize > 0)
 8001b7e:	4544      	cmp	r4, r8
 8001b80:	d1e9      	bne.n	8001b56 <memcpy_to_eeprom_with_checksum+0x5a>
}
 8001b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  unsigned char checksum = 0;
 8001b86:	4614      	mov	r4, r2
 8001b88:	4d01      	ldr	r5, [pc, #4]	; (8001b90 <memcpy_to_eeprom_with_checksum+0x94>)
 8001b8a:	e7d2      	b.n	8001b32 <memcpy_to_eeprom_with_checksum+0x36>
 8001b8c:	2000053c 	.word	0x2000053c
 8001b90:	20000f54 	.word	0x20000f54
 8001b94:	0801fc00 	.word	0x0801fc00
 8001b98:	0801fbfe 	.word	0x0801fbfe

08001b9c <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8001b9c:	b4f0      	push	{r4, r5, r6, r7}
  unsigned char data, checksum = 0;
//  cFrom+=1;
  for(; size > 0; size--) { 
 8001b9e:	b1d2      	cbz	r2, 8001bd6 <memcpy_from_eeprom_with_checksum+0x3a>
  unsigned char data, checksum = 0;
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001be0 <memcpy_from_eeprom_with_checksum+0x44>
 8001ba6:	1e4e      	subs	r6, r1, #1
 8001ba8:	4466      	add	r6, ip
 8001baa:	1887      	adds	r7, r0, r2
	return EE_Buffer[addr];
 8001bac:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) | (checksum >> 7);
 8001bb0:	09e3      	lsrs	r3, r4, #7
 8001bb2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    checksum += data;    
    *(destination++) = data; 
 8001bb6:	f800 5b01 	strb.w	r5, [r0], #1
    checksum += data;    
 8001bba:	442b      	add	r3, r5
  for(; size > 0; size--) { 
 8001bbc:	42b8      	cmp	r0, r7
    checksum += data;    
 8001bbe:	f003 04ff 	and.w	r4, r3, #255	; 0xff
  for(; size > 0; size--) { 
 8001bc2:	d1f3      	bne.n	8001bac <memcpy_from_eeprom_with_checksum+0x10>
 8001bc4:	4411      	add	r1, r2
  }
  return(checksum == eeprom_get_char(source));
 8001bc6:	f81c 0001 	ldrb.w	r0, [ip, r1]
}
 8001bca:	1b00      	subs	r0, r0, r4
 8001bcc:	fab0 f080 	clz	r0, r0
 8001bd0:	bcf0      	pop	{r4, r5, r6, r7}
 8001bd2:	0940      	lsrs	r0, r0, #5
 8001bd4:	4770      	bx	lr
  unsigned char data, checksum = 0;
 8001bd6:	4614      	mov	r4, r2
 8001bd8:	f8df c004 	ldr.w	ip, [pc, #4]	; 8001be0 <memcpy_from_eeprom_with_checksum+0x44>
 8001bdc:	e7f3      	b.n	8001bc6 <memcpy_from_eeprom_with_checksum+0x2a>
 8001bde:	bf00      	nop
 8001be0:	20000f54 	.word	0x20000f54

08001be4 <gc_init>:

#define FAIL(status) return(status);


void gc_init()
{
 8001be4:	b508      	push	{r3, lr}
  memset(&gc_state, 0, sizeof(parser_state_t));
 8001be6:	2100      	movs	r1, #0
 8001be8:	2250      	movs	r2, #80	; 0x50
 8001bea:	4807      	ldr	r0, [pc, #28]	; (8001c08 <gc_init+0x24>)
 8001bec:	f009 f957 	bl	800ae9e <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 8001bf0:	4906      	ldr	r1, [pc, #24]	; (8001c0c <gc_init+0x28>)
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f005 fdde 	bl	80077b4 <settings_read_coord_data>
 8001bf8:	b100      	cbz	r0, 8001bfc <gc_init+0x18>
    report_status_message(STATUS_SETTING_READ_FAIL);
  }
}
 8001bfa:	bd08      	pop	{r3, pc}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001bfc:	2007      	movs	r0, #7
}
 8001bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001c02:	f004 bc3b 	b.w	800647c <report_status_message>
 8001c06:	bf00      	nop
 8001c08:	20001354 	.word	0x20001354
 8001c0c:	20001380 	.word	0x20001380

08001c10 <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8001c10:	4901      	ldr	r1, [pc, #4]	; (8001c18 <gc_sync_position+0x8>)
 8001c12:	4802      	ldr	r0, [pc, #8]	; (8001c1c <gc_sync_position+0xc>)
 8001c14:	f007 be0a 	b.w	800982c <system_convert_array_steps_to_mpos>
 8001c18:	20001418 	.word	0x20001418
 8001c1c:	20001370 	.word	0x20001370

08001c20 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8001c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c24:	4607      	mov	r7, r0
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001c26:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8001e2c <gc_execute_line+0x20c>
 8001c2a:	2248      	movs	r2, #72	; 0x48
 8001c2c:	2100      	movs	r1, #0
{
 8001c2e:	b09d      	sub	sp, #116	; 0x74
  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001c30:	4648      	mov	r0, r9
 8001c32:	f009 f934 	bl	800ae9e <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 8001c36:	4b7a      	ldr	r3, [pc, #488]	; (8001e20 <gc_execute_line+0x200>)
 8001c38:	cb03      	ldmia	r3!, {r0, r1}
 8001c3a:	881c      	ldrh	r4, [r3, #0]
 8001c3c:	789a      	ldrb	r2, [r3, #2]
 8001c3e:	f8c9 0001 	str.w	r0, [r9, #1]
 8001c42:	f8c9 1005 	str.w	r1, [r9, #5]
 8001c46:	f8a9 4009 	strh.w	r4, [r9, #9]
 8001c4a:	f889 200b 	strb.w	r2, [r9, #11]
  uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
  uint16_t value_words = 0; // Tracks value words.
  uint8_t gc_parser_flags = GC_PARSER_NONE;

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8001c4e:	783b      	ldrb	r3, [r7, #0]
 8001c50:	2b24      	cmp	r3, #36	; 0x24
 8001c52:	f000 822c 	beq.w	80020ae <gc_execute_line+0x48e>
  char letter;
  float value;
  uint8_t int_value = 0;
  uint16_t mantissa = 0;
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
  else { char_counter = 0; }
 8001c56:	2200      	movs	r2, #0
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 8001c58:	9209      	str	r2, [sp, #36]	; 0x24
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8001c5a:	f04f 0800 	mov.w	r8, #0

  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001c5e:	5cbd      	ldrb	r5, [r7, r2]
 8001c60:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8001c64:	4644      	mov	r4, r8
 8001c66:	f8cd 8020 	str.w	r8, [sp, #32]
 8001c6a:	e9cd 8806 	strd	r8, r8, [sp, #24]
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001c6e:	2d00      	cmp	r5, #0
 8001c70:	f000 80f5 	beq.w	8001e5e <gc_execute_line+0x23e>

    // Import the next g-code word, expecting a letter followed by a value. Otherwise, error out.
    letter = line[char_counter];
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8001c74:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 8001c78:	b2f3      	uxtb	r3, r6
 8001c7a:	2b19      	cmp	r3, #25
 8001c7c:	f200 836b 	bhi.w	8002356 <gc_execute_line+0x736>
    char_counter++;
 8001c80:	1c53      	adds	r3, r2, #1
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001c82:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
 8001c86:	aa14      	add	r2, sp, #80	; 0x50
 8001c88:	4638      	mov	r0, r7
    char_counter++;
 8001c8a:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001c8e:	f002 f891 	bl	8003db4 <read_float>
 8001c92:	2800      	cmp	r0, #0
 8001c94:	f000 8364 	beq.w	8002360 <gc_execute_line+0x740>
    // accurate than the NIST gcode requirement of x10 when used for commands, but not quite
    // accurate enough for value words that require integers to within 0.0001. This should be
    // a good enough comprimise and catch most all non-integer errors. To make it compliant,
    // we would simply need to change the mantissa to int16, but this add compiled flash space.
    // Maybe update this later.
    int_value = truncf(value);
 8001c98:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8001c9c:	4658      	mov	r0, fp
 8001c9e:	f7ff fa0d 	bl	80010bc <__aeabi_f2uiz>
 8001ca2:	fa5f fa80 	uxtb.w	sl, r0
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001ca6:	4650      	mov	r0, sl
 8001ca8:	f7fe ffb2 	bl	8000c10 <__aeabi_i2f>
 8001cac:	4601      	mov	r1, r0
 8001cae:	4658      	mov	r0, fp
 8001cb0:	f7fe fef8 	bl	8000aa4 <__aeabi_fsub>
 8001cb4:	495b      	ldr	r1, [pc, #364]	; (8001e24 <gc_execute_line+0x204>)
 8001cb6:	f7fe ffff 	bl	8000cb8 <__aeabi_fmul>
 8001cba:	f009 fa29 	bl	800b110 <lroundf>
    // NOTE: Rounding must be used to catch small floating point errors.

    // Check if the g-code word is supported or errors due to modal group violations or has
    // been repeated in the g-code block. If ok, update the command or record its value.
    switch(letter) {
 8001cbe:	2d47      	cmp	r5, #71	; 0x47
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001cc0:	b282      	uxth	r2, r0
    switch(letter) {
 8001cc2:	d028      	beq.n	8001d16 <gc_execute_line+0xf6>
 8001cc4:	2d4d      	cmp	r5, #77	; 0x4d
 8001cc6:	f040 808b 	bne.w	8001de0 <gc_execute_line+0x1c0>
		if(system_control_get_state() & CONTROL_PIN_INDEX_RESET) { // if reset button is pressed
			mc_reset();
		}
#endif
        // Determine 'M' command and its modal group
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 8001cca:	2a00      	cmp	r2, #0
 8001ccc:	f040 835b 	bne.w	8002386 <gc_execute_line+0x766>
 8001cd0:	f1ba 0f1e 	cmp.w	sl, #30
 8001cd4:	f200 81df 	bhi.w	8002096 <gc_execute_line+0x476>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	4a53      	ldr	r2, [pc, #332]	; (8001e28 <gc_execute_line+0x208>)
 8001cdc:	fa03 f30a 	lsl.w	r3, r3, sl
 8001ce0:	4213      	tst	r3, r2
 8001ce2:	f040 80a5 	bne.w	8001e30 <gc_execute_line+0x210>
 8001ce6:	f413 7f60 	tst.w	r3, #896	; 0x380
 8001cea:	f040 81a3 	bne.w	8002034 <gc_execute_line+0x414>
 8001cee:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001cf2:	f000 81d0 	beq.w	8002096 <gc_execute_line+0x476>
              default: gc_block.modal.program_flow = int_value; // Program end and reset
            }
            break;
					case 3: case 4: case 5:
            word_bit = MODAL_GROUP_M7;
            switch(int_value) {
 8001cf6:	f1ba 0f04 	cmp.w	sl, #4
 8001cfa:	f000 8317 	beq.w	800232c <gc_execute_line+0x70c>
 8001cfe:	f1ba 0f05 	cmp.w	sl, #5
 8001d02:	f000 8339 	beq.w	8002378 <gc_execute_line+0x758>
 8001d06:	f1ba 0f03 	cmp.w	sl, #3
 8001d0a:	f000 831d 	beq.w	8002348 <gc_execute_line+0x728>
 8001d0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d12:	230c      	movs	r3, #12
 8001d14:	e097      	b.n	8001e46 <gc_execute_line+0x226>
        switch(int_value) {
 8001d16:	f1ba 0f5e 	cmp.w	sl, #94	; 0x5e
 8001d1a:	f200 81bc 	bhi.w	8002096 <gc_execute_line+0x476>
 8001d1e:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8001d22:	01f5      	.short	0x01f5
 8001d24:	01f501f5 	.word	0x01f501f5
 8001d28:	026901f5 	.word	0x026901f5
 8001d2c:	01ba01ba 	.word	0x01ba01ba
 8001d30:	01ba01ba 	.word	0x01ba01ba
 8001d34:	021401ba 	.word	0x021401ba
 8001d38:	01ba01ba 	.word	0x01ba01ba
 8001d3c:	01ba01ba 	.word	0x01ba01ba
 8001d40:	01ba01ba 	.word	0x01ba01ba
 8001d44:	02450245 	.word	0x02450245
 8001d48:	02510245 	.word	0x02510245
 8001d4c:	01ba0251 	.word	0x01ba0251
 8001d50:	01ba01ba 	.word	0x01ba01ba
 8001d54:	01ba01ba 	.word	0x01ba01ba
 8001d58:	021401ba 	.word	0x021401ba
 8001d5c:	021401ba 	.word	0x021401ba
 8001d60:	01ba01ba 	.word	0x01ba01ba
 8001d64:	01ba01ba 	.word	0x01ba01ba
 8001d68:	01ba01ba 	.word	0x01ba01ba
 8001d6c:	01f501ba 	.word	0x01f501ba
 8001d70:	01cf01ba 	.word	0x01cf01ba
 8001d74:	01ba01ba 	.word	0x01ba01ba
 8001d78:	01ba0257 	.word	0x01ba0257
 8001d7c:	01ba01ba 	.word	0x01ba01ba
 8001d80:	01ba01ba 	.word	0x01ba01ba
 8001d84:	01ba0257 	.word	0x01ba0257
 8001d88:	01ba01ba 	.word	0x01ba01ba
 8001d8c:	024b0269 	.word	0x024b0269
 8001d90:	024b024b 	.word	0x024b024b
 8001d94:	024b024b 	.word	0x024b024b
 8001d98:	01ba024b 	.word	0x01ba024b
 8001d9c:	01ba01dd 	.word	0x01ba01dd
 8001da0:	01ba01ba 	.word	0x01ba01ba
 8001da4:	01ba01ba 	.word	0x01ba01ba
 8001da8:	01ba01ba 	.word	0x01ba01ba
 8001dac:	01ba01ba 	.word	0x01ba01ba
 8001db0:	01ba01ba 	.word	0x01ba01ba
 8001db4:	01ba01ba 	.word	0x01ba01ba
 8001db8:	01ba01ba 	.word	0x01ba01ba
 8001dbc:	01ba01ba 	.word	0x01ba01ba
 8001dc0:	01e101ba 	.word	0x01e101ba
 8001dc4:	01ba01ba 	.word	0x01ba01ba
 8001dc8:	01ba01ba 	.word	0x01ba01ba
 8001dcc:	01ba01ba 	.word	0x01ba01ba
 8001dd0:	01ba01ba 	.word	0x01ba01ba
 8001dd4:	01e601ba 	.word	0x01e601ba
 8001dd8:	021401e6 	.word	0x021401e6
 8001ddc:	01ef01ef 	.word	0x01ef01ef
      default:

        /* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
           legal g-code words and stores their value. Error-checking is performed later since some
           words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */
        switch(letter){
 8001de0:	2e19      	cmp	r6, #25
 8001de2:	f200 8158 	bhi.w	8002096 <gc_execute_line+0x476>
 8001de6:	e8df f016 	tbh	[pc, r6, lsl #1]
 8001dea:	0249      	.short	0x0249
 8001dec:	01560156 	.word	0x01560156
 8001df0:	01560156 	.word	0x01560156
 8001df4:	01560230 	.word	0x01560230
 8001df8:	02400156 	.word	0x02400156
 8001dfc:	0253020f 	.word	0x0253020f
 8001e00:	0156025c 	.word	0x0156025c
 8001e04:	01560261 	.word	0x01560261
 8001e08:	01560269 	.word	0x01560269
 8001e0c:	0273026e 	.word	0x0273026e
 8001e10:	01560279 	.word	0x01560279
 8001e14:	01560156 	.word	0x01560156
 8001e18:	02900286 	.word	0x02900286
 8001e1c:	021e      	.short	0x021e
 8001e1e:	bf00      	nop
 8001e20:	20001354 	.word	0x20001354
 8001e24:	42c80000 	.word	0x42c80000
 8001e28:	40000007 	.word	0x40000007
 8001e2c:	200013a4 	.word	0x200013a4
            switch(int_value) {
 8001e30:	f1ba 0f00 	cmp.w	sl, #0
 8001e34:	f000 8134 	beq.w	80020a0 <gc_execute_line+0x480>
 8001e38:	f1ba 0f01 	cmp.w	sl, #1
 8001e3c:	f040 810a 	bne.w	8002054 <gc_execute_line+0x434>
 8001e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e44:	230b      	movs	r3, #11
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001e46:	fa44 f303 	asr.w	r3, r4, r3
 8001e4a:	07db      	lsls	r3, r3, #31
 8001e4c:	f100 82b1 	bmi.w	80023b2 <gc_execute_line+0x792>
        command_words |= bit(word_bit);
 8001e50:	4314      	orrs	r4, r2
 8001e52:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001e56:	5cbd      	ldrb	r5, [r7, r2]
 8001e58:	2d00      	cmp	r5, #0
 8001e5a:	f47f af0b 	bne.w	8001c74 <gc_execute_line+0x54>

  // [0. Non-specific/common error-checks and miscellaneous setup]:

  // Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
  // command has been sent. If so, set axis command to current motion mode.
  if (axis_words) {
 8001e5e:	9b06      	ldr	r3, [sp, #24]
 8001e60:	b123      	cbz	r3, 8001e6c <gc_execute_line+0x24c>
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 8001e62:	9b07      	ldr	r3, [sp, #28]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf08      	it	eq
 8001e68:	2302      	moveq	r3, #2
 8001e6a:	9307      	str	r3, [sp, #28]
  }

  // Check for valid line number N value.
  if (bit_istrue(value_words,bit(WORD_N))) {
 8001e6c:	f018 0f20 	tst.w	r8, #32
 8001e70:	d005      	beq.n	8001e7e <gc_execute_line+0x25e>
    // Line number value cannot be less than zero (done) or greater than max line number.
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 8001e72:	4bc5      	ldr	r3, [pc, #788]	; (8002188 <gc_execute_line+0x568>)
 8001e74:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f300 82b7 	bgt.w	80023ec <gc_execute_line+0x7cc>
  // [1. Comments ]: MSG's NOT SUPPORTED. Comment handling performed by protocol.

  // [2. Set feed rate mode ]: G93 F word missing with G1,G2/3 active, implicitly or explicitly. Feed rate
  //   is not defined after switching to G94 from G93.
  // NOTE: For jogging, ignore prior feed rate mode. Enforce G94 and check for required F word.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8001e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 8298 	beq.w	80023b6 <gc_execute_line+0x796>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 8001e86:	f018 0f01 	tst.w	r8, #1
 8001e8a:	f000 82c1 	beq.w	8002410 <gc_execute_line+0x7f0>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 8001e8e:	f899 3003 	ldrb.w	r3, [r9, #3]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	f000 838f 	beq.w	80025b6 <gc_execute_line+0x996>
    }
  }
  // bit_false(value_words,bit(WORD_F)); // NOTE: Single-meaning value word. Set at end of error-checking.

  // [4. Set spindle speed ]: S is negative (done.)
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 8001e98:	f418 7f80 	tst.w	r8, #256	; 0x100
 8001e9c:	d103      	bne.n	8001ea6 <gc_execute_line+0x286>
 8001e9e:	4bbb      	ldr	r3, [pc, #748]	; (800218c <gc_execute_line+0x56c>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
		}
	}
#endif
	
  // [10. Dwell ]: P value missing. P is negative (done.) NOTE: See below.
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 8001ea6:	f899 5000 	ldrb.w	r5, [r9]
 8001eaa:	2d04      	cmp	r5, #4
 8001eac:	f000 82b5 	beq.w	800241a <gc_execute_line+0x7fa>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
    bit_false(value_words,bit(WORD_P));
  }

  // [11. Set active plane ]: N/A
  switch (gc_block.modal.plane_select) {
 8001eb0:	f899 3005 	ldrb.w	r3, [r9, #5]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 82ee 	beq.w	8002496 <gc_execute_line+0x876>
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	f040 82f4 	bne.w	80024a8 <gc_execute_line+0x888>
 8001ec0:	2600      	movs	r6, #0
 8001ec2:	2702      	movs	r7, #2
      axis_1 = Y_AXIS;
      axis_linear = Z_AXIS;
      break;
    case PLANE_SELECT_ZX:
      axis_0 = Z_AXIS;
      axis_1 = X_AXIS;
 8001ec4:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  switch (gc_block.modal.plane_select) {
 8001ec8:	2305      	movs	r3, #5
      axis_0 = Z_AXIS;
 8001eca:	970b      	str	r7, [sp, #44]	; 0x2c
  switch (gc_block.modal.plane_select) {
 8001ecc:	930a      	str	r3, [sp, #40]	; 0x28
  }

  // [12. Set length units ]: N/A
  // Pre-convert XYZ coordinate values to millimeters, if applicable.
  uint8_t idx;
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8001ece:	f899 3003 	ldrb.w	r3, [r9, #3]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	f000 82aa 	beq.w	800242c <gc_execute_line+0x80c>
  // [14. Cutter length compensation ]: G43 NOT SUPPORTED, but G43.1 and G49 are.
  // [G43.1 Errors]: Motion command in same line.
  //   NOTE: Although not explicitly stated so, G43.1 should be applied to only one valid
  //   axis that is configured (in config.h). There should be an error if the configured axis
  //   is absent or if any of the other axis words are present.
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 8001ed8:	9b07      	ldr	r3, [sp, #28]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	f000 82d0 	beq.w	8002480 <gc_execute_line+0x860>
  // TODO: An EEPROM read of the coordinate data may require a buffer sync when the cycle
  // is active. The read pauses the processor temporarily and may cause a rare crash. For
  // future versions on processors with enough memory, all coordinate data should be stored
  // in memory and written to EEPROM only when there is not a cycle active.
  float block_coord_system[N_AXIS];
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 8001ee0:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 80021a8 <gc_execute_line+0x588>
 8001ee4:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 8001ee8:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8001eec:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 8001ef0:	05a0      	lsls	r0, r4, #22
 8001ef2:	d510      	bpl.n	8001f16 <gc_execute_line+0x2f6>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8001ef4:	f899 0007 	ldrb.w	r0, [r9, #7]
 8001ef8:	2806      	cmp	r0, #6
 8001efa:	f200 8364 	bhi.w	80025c6 <gc_execute_line+0x9a6>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8001efe:	4ba3      	ldr	r3, [pc, #652]	; (800218c <gc_execute_line+0x56c>)
 8001f00:	799b      	ldrb	r3, [r3, #6]
 8001f02:	4283      	cmp	r3, r0
 8001f04:	d007      	beq.n	8001f16 <gc_execute_line+0x2f6>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8001f06:	4651      	mov	r1, sl
 8001f08:	f005 fc54 	bl	80077b4 <settings_read_coord_data>
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	f000 8374 	beq.w	80025fa <gc_execute_line+0x9da>
 8001f12:	f899 5000 	ldrb.w	r5, [r9]
  // [19. Remaining non-modal actions ]: Check go to predefined position, set G10, or set axis offsets.
  // NOTE: We need to separate the non-modal commands that are axis word-using (G10/G28/G30/G92), as these
  // commands all treat axis words differently. G10 as absolute offsets or computes current position as
  // the axis value, G92 similarly to G10 L20, and G28/30 as an intermediate target position that observes
  // all the current coordinate system and G92 offsets.
  switch (gc_block.non_modal_command) {
 8001f16:	2d0a      	cmp	r5, #10
 8001f18:	f000 80a2 	beq.w	8002060 <gc_execute_line+0x440>
 8001f1c:	2d5c      	cmp	r5, #92	; 0x5c
 8001f1e:	f040 82cc 	bne.w	80024ba <gc_execute_line+0x89a>
        } // Else, keep current stored value.
      }
      break;
    case NON_MODAL_SET_COORDINATE_OFFSET:
      // [G92 Errors]: No axis words.
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8001f22:	9b06      	ldr	r3, [sp, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8354 	beq.w	80025d2 <gc_execute_line+0x9b2>
      // active coordinate system is selected, but is still active unless G92.1 disables it.
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
        if (bit_istrue(axis_words,bit(idx)) ) {
          // WPos = MPos - WCS - G92 - TLO  ->  G92 = MPos - WCS - TLO - WPos
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8001f2a:	4a98      	ldr	r2, [pc, #608]	; (800218c <gc_execute_line+0x56c>)
        if (bit_istrue(axis_words,bit(idx)) ) {
 8001f2c:	07d9      	lsls	r1, r3, #31
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8001f2e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
        if (bit_istrue(axis_words,bit(idx)) ) {
 8001f30:	f140 8472 	bpl.w	8002818 <gc_execute_line+0xbf8>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8001f34:	4b95      	ldr	r3, [pc, #596]	; (800218c <gc_execute_line+0x56c>)
 8001f36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8001f38:	69d8      	ldr	r0, [r3, #28]
 8001f3a:	f7fe fdb3 	bl	8000aa4 <__aeabi_fsub>
 8001f3e:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8001f42:	f7fe fdaf 	bl	8000aa4 <__aeabi_fsub>
 8001f46:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
        if (bit_istrue(axis_words,bit(idx)) ) {
 8001f4a:	9b06      	ldr	r3, [sp, #24]
 8001f4c:	079a      	lsls	r2, r3, #30
 8001f4e:	f140 849a 	bpl.w	8002886 <gc_execute_line+0xc66>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8001f52:	4b8e      	ldr	r3, [pc, #568]	; (800218c <gc_execute_line+0x56c>)
 8001f54:	9919      	ldr	r1, [sp, #100]	; 0x64
 8001f56:	6a18      	ldr	r0, [r3, #32]
 8001f58:	f7fe fda4 	bl	8000aa4 <__aeabi_fsub>
 8001f5c:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8001f60:	f7fe fda0 	bl	8000aa4 <__aeabi_fsub>
 8001f64:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
        if (bit_istrue(axis_words,bit(idx)) ) {
 8001f68:	9b06      	ldr	r3, [sp, #24]
 8001f6a:	075b      	lsls	r3, r3, #29
 8001f6c:	f140 8347 	bpl.w	80025fe <gc_execute_line+0x9de>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8001f70:	4b86      	ldr	r3, [pc, #536]	; (800218c <gc_execute_line+0x56c>)
 8001f72:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001f74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001f76:	f7fe fd95 	bl	8000aa4 <__aeabi_fsub>
 8001f7a:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8001f7e:	f7fe fd91 	bl	8000aa4 <__aeabi_fsub>
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe fd8e 	bl	8000aa4 <__aeabi_fsub>
 8001f88:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
        if (bit_istrue(axis_words,bit(idx)) ) {
 8001f8c:	9b06      	ldr	r3, [sp, #24]
 8001f8e:	071d      	lsls	r5, r3, #28
 8001f90:	f140 84be 	bpl.w	8002910 <gc_execute_line+0xcf0>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8001f94:	4b7d      	ldr	r3, [pc, #500]	; (800218c <gc_execute_line+0x56c>)
 8001f96:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001f98:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f9a:	f7fe fd83 	bl	8000aa4 <__aeabi_fsub>
 8001f9e:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8001fa2:	f7fe fd7f 	bl	8000aa4 <__aeabi_fsub>
 8001fa6:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8001faa:	2300      	movs	r3, #0
 8001fac:	930e      	str	r3, [sp, #56]	; 0x38
          break;
      }
  }

  // [20. Motion modes ]:
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 8001fae:	f899 5001 	ldrb.w	r5, [r9, #1]
 8001fb2:	2d50      	cmp	r5, #80	; 0x50
 8001fb4:	f000 84a9 	beq.w	800290a <gc_execute_line+0xcea>
    // NOTE: Even non-modal commands or TLO that use axis words will throw this strict error.
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]

  // Check remaining motion modes, if axis word are implicit (exist and not used by G10/28/30/92), or
  // was explicitly commanded in the g-code block.
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 8001fb8:	9b07      	ldr	r3, [sp, #28]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	f000 840d 	beq.w	80027da <gc_execute_line+0xbba>

  // [21. Program flow ]: No error checks required.

  // [0. Non-specific error-checks]: Complete unused value words check, i.e. IJK used when in arc
  // radius mode, or axis words that aren't used in the block.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8001fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  } else {
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
  }
// --- YSV 22-06-2018
  #ifdef AA_AXIS
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A))); } // Remove axis words.
 8001fc2:	9907      	ldr	r1, [sp, #28]
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8001fc4:	f013 0201 	ands.w	r2, r3, #1
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 8001fc8:	bf0d      	iteet	eq
 8001fca:	4b71      	ldreq	r3, [pc, #452]	; (8002190 <gc_execute_line+0x570>)
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F)));
 8001fcc:	f028 0821 	bicne.w	r8, r8, #33	; 0x21
 8001fd0:	fa1f f388 	uxthne.w	r3, r8
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 8001fd4:	ea08 0303 	andeq.w	r3, r8, r3
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A))); } // Remove axis words.
 8001fd8:	b119      	cbz	r1, 8001fe2 <gc_execute_line+0x3c2>
 8001fda:	f423 5870 	bic.w	r8, r3, #15360	; 0x3c00
 8001fde:	fa1f f388 	uxth.w	r3, r8
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A)|bit(WORD_B)|bit(WORD_C))); } // Remove axis words.
  #else
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z))); } // Remove axis words.
  #endif
// ---
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 82f3 	bne.w	80025ce <gc_execute_line+0x9ae>
  */

  // Initialize planner data struct for motion blocks.
  plan_line_data_t plan_data;
  plan_line_data_t *pl_data = &plan_data;
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 8001fe8:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8001fec:	9317      	str	r3, [sp, #92]	; 0x5c

                                              // Intercept jog commands and complete error checking for valid jog commands and execute.
                                              // NOTE: G-code parser state is not updated, except the position to ensure sequential jog
                                              // targets are computed correctly. The final parser position after a jog is updated in
                                              // protocol_execute_realtime() when jogging completes or is canceled.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8001fee:	2a00      	cmp	r2, #0
 8001ff0:	f000 830a 	beq.w	8002608 <gc_execute_line+0x9e8>
      // Only distance and unit modal commands and G53 absolute override command are allowed.
      // NOTE: Feed rate word and axis word checks have already been performed in STEP 3.
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 8001ff4:	f024 0449 	bic.w	r4, r4, #73	; 0x49
 8001ff8:	2c00      	cmp	r4, #0
 8001ffa:	f040 8480 	bne.w	80028fe <gc_execute_line+0xcde>
      if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 8001ffe:	f899 3000 	ldrb.w	r3, [r9]
 8002002:	2b35      	cmp	r3, #53	; 0x35
 8002004:	d002      	beq.n	800200c <gc_execute_line+0x3ec>
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 8479 	bne.w	80028fe <gc_execute_line+0xcde>

      // Initialize planner data to current spindle and coolant modal state.
      pl_data->spindle_speed = gc_state.spindle_speed;
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 800200c:	4a5f      	ldr	r2, [pc, #380]	; (800218c <gc_execute_line+0x56c>)

      uint8_t status = jog_execute(&plan_data, &gc_block);
 800200e:	a815      	add	r0, sp, #84	; 0x54
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002010:	7a11      	ldrb	r1, [r2, #8]
 8002012:	7a53      	ldrb	r3, [r2, #9]
      pl_data->spindle_speed = gc_state.spindle_speed;
 8002014:	68d2      	ldr	r2, [r2, #12]
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002016:	430b      	orrs	r3, r1
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8002018:	495e      	ldr	r1, [pc, #376]	; (8002194 <gc_execute_line+0x574>)
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 800201a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
      pl_data->spindle_speed = gc_state.spindle_speed;
 800201e:	9216      	str	r2, [sp, #88]	; 0x58
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8002020:	f000 ff6c 	bl	8002efc <jog_execute>
      if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 8002024:	4604      	mov	r4, r0
 8002026:	bbb8      	cbnz	r0, 8002098 <gc_execute_line+0x478>
 8002028:	4b5b      	ldr	r3, [pc, #364]	; (8002198 <gc_execute_line+0x578>)
 800202a:	4d5c      	ldr	r5, [pc, #368]	; (800219c <gc_execute_line+0x57c>)
 800202c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800202e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002032:	e031      	b.n	8002098 <gc_execute_line+0x478>
            switch(int_value) {
 8002034:	f1ba 0f08 	cmp.w	sl, #8
 8002038:	f000 8171 	beq.w	800231e <gc_execute_line+0x6fe>
 800203c:	f1ba 0f09 	cmp.w	sl, #9
 8002040:	f000 8193 	beq.w	800236a <gc_execute_line+0x74a>
 8002044:	f1ba 0f07 	cmp.w	sl, #7
 8002048:	f000 8177 	beq.w	800233a <gc_execute_line+0x71a>
 800204c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002050:	230d      	movs	r3, #13
 8002052:	e6f8      	b.n	8001e46 <gc_execute_line+0x226>
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 8002054:	f889 a008 	strb.w	sl, [r9, #8]
 8002058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800205c:	230b      	movs	r3, #11
 800205e:	e6f2      	b.n	8001e46 <gc_execute_line+0x226>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8002060:	9b06      	ldr	r3, [sp, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 82b5 	beq.w	80025d2 <gc_execute_line+0x9b2>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 8002068:	f018 0f50 	tst.w	r8, #80	; 0x50
 800206c:	f000 82ad 	beq.w	80025ca <gc_execute_line+0x9aa>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
 8002070:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002074:	f7ff f822 	bl	80010bc <__aeabi_f2uiz>
 8002078:	b2c0      	uxtb	r0, r0
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 800207a:	2806      	cmp	r0, #6
 800207c:	f200 82a3 	bhi.w	80025c6 <gc_execute_line+0x9a6>
      if (gc_block.values.l != 20) {
 8002080:	f899 3020 	ldrb.w	r3, [r9, #32]
 8002084:	2b14      	cmp	r3, #20
 8002086:	f000 8262 	beq.w	800254e <gc_execute_line+0x92e>
        if (gc_block.values.l == 2) {
 800208a:	2b02      	cmp	r3, #2
 800208c:	d103      	bne.n	8002096 <gc_execute_line+0x476>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 800208e:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002092:	f000 825c 	beq.w	800254e <gc_execute_line+0x92e>
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 8002096:	2414      	movs	r4, #20
  }

  // TODO: % to denote start of program.

  return(STATUS_OK);
}
 8002098:	4620      	mov	r0, r4
 800209a:	b01d      	add	sp, #116	; 0x74
 800209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 80020a0:	2303      	movs	r3, #3
 80020a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a6:	f889 3008 	strb.w	r3, [r9, #8]
 80020aa:	230b      	movs	r3, #11
 80020ac:	e6cb      	b.n	8001e46 <gc_execute_line+0x226>
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 80020ae:	2301      	movs	r3, #1
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 80020b0:	2200      	movs	r2, #0
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 80020b2:	f889 3001 	strb.w	r3, [r9, #1]
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 80020b6:	f889 2002 	strb.w	r2, [r9, #2]
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 80020ba:	9309      	str	r3, [sp, #36]	; 0x24
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 80020bc:	2203      	movs	r2, #3
 80020be:	e5cc      	b.n	8001c5a <gc_execute_line+0x3a>
        switch(int_value) {
 80020c0:	2107      	movs	r1, #7
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	f040 815f 	bne.w	8002386 <gc_execute_line+0x766>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 80020c8:	fa44 f301 	asr.w	r3, r4, r1
 80020cc:	07da      	lsls	r2, r3, #31
 80020ce:	f100 8170 	bmi.w	80023b2 <gc_execute_line+0x792>
        command_words |= bit(word_bit);
 80020d2:	2301      	movs	r3, #1
 80020d4:	408b      	lsls	r3, r1
 80020d6:	431c      	orrs	r4, r3
 80020d8:	b2a4      	uxth	r4, r4
        break;
 80020da:	e6ba      	b.n	8001e52 <gc_execute_line+0x232>
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 80020dc:	2a00      	cmp	r2, #0
 80020de:	d1da      	bne.n	8002096 <gc_execute_line+0x476>
 80020e0:	210a      	movs	r1, #10
 80020e2:	e7f1      	b.n	80020c8 <gc_execute_line+0x4a8>
            gc_block.modal.motion = int_value;
 80020e4:	2350      	movs	r3, #80	; 0x50
 80020e6:	2101      	movs	r1, #1
 80020e8:	f889 3001 	strb.w	r3, [r9, #1]
 80020ec:	e7e9      	b.n	80020c2 <gc_execute_line+0x4a2>
            if (mantissa == 0) {
 80020ee:	2a00      	cmp	r2, #0
 80020f0:	f040 814b 	bne.w	800238a <gc_execute_line+0x76a>
              gc_block.modal.distance = int_value - 90;
 80020f4:	f1aa 0a5a 	sub.w	sl, sl, #90	; 0x5a
 80020f8:	f889 a004 	strb.w	sl, [r9, #4]
 80020fc:	2103      	movs	r1, #3
 80020fe:	e7e3      	b.n	80020c8 <gc_execute_line+0x4a8>
            gc_block.modal.feed_rate = 94 - int_value;
 8002100:	f1ca 0a5e 	rsb	sl, sl, #94	; 0x5e
 8002104:	f889 a002 	strb.w	sl, [r9, #2]
            break;
 8002108:	2105      	movs	r1, #5
 800210a:	e7da      	b.n	80020c2 <gc_execute_line+0x4a2>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 800210c:	9b07      	ldr	r3, [sp, #28]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 8261 	bne.w	80025d6 <gc_execute_line+0x9b6>
            if (int_value == 38){
 8002114:	f1ba 0f26 	cmp.w	sl, #38	; 0x26
            gc_block.modal.motion = int_value;
 8002118:	f889 a001 	strb.w	sl, [r9, #1]
            if (int_value == 38){
 800211c:	f040 8162 	bne.w	80023e4 <gc_execute_line+0x7c4>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8002120:	f1a2 0314 	sub.w	r3, r2, #20
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b1e      	cmp	r3, #30
 8002128:	d8b5      	bhi.n	8002096 <gc_execute_line+0x476>
 800212a:	491d      	ldr	r1, [pc, #116]	; (80021a0 <gc_execute_line+0x580>)
 800212c:	fa21 f303 	lsr.w	r3, r1, r3
 8002130:	07d9      	lsls	r1, r3, #31
 8002132:	d5b0      	bpl.n	8002096 <gc_execute_line+0x476>
              gc_block.modal.motion += (mantissa/10)+100;
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <gc_execute_line+0x584>)
 8002136:	2101      	movs	r1, #1
 8002138:	fba3 2302 	umull	r2, r3, r3, r2
 800213c:	08db      	lsrs	r3, r3, #3
 800213e:	3b76      	subs	r3, #118	; 0x76
 8002140:	f889 3001 	strb.w	r3, [r9, #1]
            axis_command = AXIS_COMMAND_MOTION_MODE;
 8002144:	2302      	movs	r3, #2
 8002146:	9307      	str	r3, [sp, #28]
 8002148:	e7be      	b.n	80020c8 <gc_execute_line+0x4a8>
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 800214a:	2a00      	cmp	r2, #0
 800214c:	f040 8126 	bne.w	800239c <gc_execute_line+0x77c>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8002150:	9b07      	ldr	r3, [sp, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 823f 	bne.w	80025d6 <gc_execute_line+0x9b6>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002158:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 800215c:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002160:	f000 8158 	beq.w	8002414 <gc_execute_line+0x7f4>
 8002164:	f1ba 0f1e 	cmp.w	sl, #30
 8002168:	f000 8154 	beq.w	8002414 <gc_execute_line+0x7f4>
              axis_command = AXIS_COMMAND_NON_MODAL;
 800216c:	2301      	movs	r3, #1
 800216e:	9307      	str	r3, [sp, #28]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002170:	f1ba 0f5c 	cmp.w	sl, #92	; 0x5c
 8002174:	d146      	bne.n	8002204 <gc_execute_line+0x5e4>
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 8002176:	b10a      	cbz	r2, 800217c <gc_execute_line+0x55c>
 8002178:	2a0a      	cmp	r2, #10
 800217a:	d18c      	bne.n	8002096 <gc_execute_line+0x476>
              gc_block.non_modal_command += mantissa;
 800217c:	4450      	add	r0, sl
 800217e:	f889 0000 	strb.w	r0, [r9]
 8002182:	2100      	movs	r1, #0
 8002184:	e7a0      	b.n	80020c8 <gc_execute_line+0x4a8>
 8002186:	bf00      	nop
 8002188:	00989680 	.word	0x00989680
 800218c:	20001354 	.word	0x20001354
 8002190:	fffffcde 	.word	0xfffffcde
 8002194:	200013a4 	.word	0x200013a4
 8002198:	200013dc 	.word	0x200013dc
 800219c:	20001370 	.word	0x20001370
 80021a0:	40100401 	.word	0x40100401
 80021a4:	cccccccd 	.word	0xcccccccd
 80021a8:	20001380 	.word	0x20001380
            gc_block.modal.plane_select = int_value - 17;
 80021ac:	f1aa 0a11 	sub.w	sl, sl, #17
 80021b0:	f889 a005 	strb.w	sl, [r9, #5]
            break;
 80021b4:	2102      	movs	r1, #2
 80021b6:	e784      	b.n	80020c2 <gc_execute_line+0x4a2>
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 80021b8:	f1aa 0a36 	sub.w	sl, sl, #54	; 0x36
 80021bc:	f889 a007 	strb.w	sl, [r9, #7]
            break;
 80021c0:	2109      	movs	r1, #9
 80021c2:	e77e      	b.n	80020c2 <gc_execute_line+0x4a2>
            gc_block.modal.units = 21 - int_value;
 80021c4:	f1ca 0a15 	rsb	sl, sl, #21
 80021c8:	f889 a003 	strb.w	sl, [r9, #3]
            break;
 80021cc:	2106      	movs	r1, #6
 80021ce:	e778      	b.n	80020c2 <gc_execute_line+0x4a2>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 80021d0:	9b07      	ldr	r3, [sp, #28]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 81ff 	bne.w	80025d6 <gc_execute_line+0x9b6>
            if (int_value == 49) { // G49
 80021d8:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 80021dc:	f000 80fc 	beq.w	80023d8 <gc_execute_line+0x7b8>
            } else if (mantissa == 10) { // G43.1
 80021e0:	2a0a      	cmp	r2, #10
 80021e2:	f47f af58 	bne.w	8002096 <gc_execute_line+0x476>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f889 3006 	strb.w	r3, [r9, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80021ec:	2303      	movs	r3, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 80021ee:	2108      	movs	r1, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80021f0:	9307      	str	r3, [sp, #28]
 80021f2:	e769      	b.n	80020c8 <gc_execute_line+0x4a8>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80021f4:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 80021f8:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80021fc:	d0bb      	beq.n	8002176 <gc_execute_line+0x556>
 80021fe:	f1ba 0f1e 	cmp.w	sl, #30
 8002202:	d0b8      	beq.n	8002176 <gc_execute_line+0x556>
 8002204:	2100      	movs	r1, #0
 8002206:	e75c      	b.n	80020c2 <gc_execute_line+0x4a2>
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 8002208:	9b08      	ldr	r3, [sp, #32]
 800220a:	2504      	movs	r5, #4
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	9308      	str	r3, [sp, #32]
 8002212:	2302      	movs	r3, #2
 8002214:	f8c9 b014 	str.w	fp, [r9, #20]
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002218:	fa48 f303 	asr.w	r3, r8, r3
 800221c:	07d8      	lsls	r0, r3, #31
 800221e:	d40f      	bmi.n	8002240 <gc_execute_line+0x620>
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8002220:	ea45 0808 	orr.w	r8, r5, r8
 8002224:	e615      	b.n	8001e52 <gc_execute_line+0x232>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 8002226:	9b06      	ldr	r3, [sp, #24]
 8002228:	f8c9 b040 	str.w	fp, [r9, #64]	; 0x40
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	9306      	str	r3, [sp, #24]
 8002232:	230c      	movs	r3, #12
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002234:	fa48 f303 	asr.w	r3, r8, r3
 8002238:	07d8      	lsls	r0, r3, #31
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 800223a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 800223e:	d5ef      	bpl.n	8002220 <gc_execute_line+0x600>
 8002240:	2419      	movs	r4, #25
}
 8002242:	4620      	mov	r0, r4
 8002244:	b01d      	add	sp, #116	; 0x74
 8002246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 800224a:	2501      	movs	r5, #1
 800224c:	2300      	movs	r3, #0
 800224e:	f8c9 b00c 	str.w	fp, [r9, #12]
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002252:	fa48 f303 	asr.w	r3, r8, r3
 8002256:	07de      	lsls	r6, r3, #31
 8002258:	d4f2      	bmi.n	8002240 <gc_execute_line+0x620>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 800225a:	4658      	mov	r0, fp
 800225c:	2100      	movs	r1, #0
 800225e:	f7fe fec9 	bl	8000ff4 <__aeabi_fcmplt>
 8002262:	2800      	cmp	r0, #0
 8002264:	d0dc      	beq.n	8002220 <gc_execute_line+0x600>
 8002266:	2404      	movs	r4, #4
 8002268:	e716      	b.n	8002098 <gc_execute_line+0x478>
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 800226a:	9b08      	ldr	r3, [sp, #32]
 800226c:	f8c9 b010 	str.w	fp, [r9, #16]
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	9308      	str	r3, [sp, #32]
 8002276:	2502      	movs	r5, #2
 8002278:	2301      	movs	r3, #1
 800227a:	e7cd      	b.n	8002218 <gc_execute_line+0x5f8>
		  case 'A': word_bit = WORD_A; gc_block.values.xyz[A_AXIS] = value; axis_words |= (1<<A_AXIS); break;
 800227c:	9b06      	ldr	r3, [sp, #24]
 800227e:	f8c9 b044 	str.w	fp, [r9, #68]	; 0x44
 8002282:	f043 0308 	orr.w	r3, r3, #8
 8002286:	9306      	str	r3, [sp, #24]
 8002288:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 800228c:	230d      	movs	r3, #13
 800228e:	e7c3      	b.n	8002218 <gc_execute_line+0x5f8>
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 8002290:	9b08      	ldr	r3, [sp, #32]
 8002292:	f8c9 b018 	str.w	fp, [r9, #24]
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	9308      	str	r3, [sp, #32]
 800229c:	2508      	movs	r5, #8
 800229e:	2303      	movs	r3, #3
 80022a0:	e7ba      	b.n	8002218 <gc_execute_line+0x5f8>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 80022a2:	f889 a020 	strb.w	sl, [r9, #32]
 80022a6:	2510      	movs	r5, #16
 80022a8:	2304      	movs	r3, #4
 80022aa:	e7b5      	b.n	8002218 <gc_execute_line+0x5f8>
          case 'N': word_bit = WORD_N; gc_block.values.n = truncf(value); break;
 80022ac:	4658      	mov	r0, fp
 80022ae:	f7fe fedf 	bl	8001070 <__aeabi_f2iz>
 80022b2:	2520      	movs	r5, #32
 80022b4:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 80022b8:	2305      	movs	r3, #5
 80022ba:	e7ca      	b.n	8002252 <gc_execute_line+0x632>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 80022bc:	f8c9 b028 	str.w	fp, [r9, #40]	; 0x28
 80022c0:	2540      	movs	r5, #64	; 0x40
 80022c2:	2306      	movs	r3, #6
 80022c4:	e7c5      	b.n	8002252 <gc_execute_line+0x632>
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 80022c6:	f8c9 b02c 	str.w	fp, [r9, #44]	; 0x2c
 80022ca:	2580      	movs	r5, #128	; 0x80
 80022cc:	2307      	movs	r3, #7
 80022ce:	e7a3      	b.n	8002218 <gc_execute_line+0x5f8>
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 80022d0:	f8c9 b030 	str.w	fp, [r9, #48]	; 0x30
 80022d4:	f44f 7580 	mov.w	r5, #256	; 0x100
 80022d8:	2308      	movs	r3, #8
 80022da:	e7ba      	b.n	8002252 <gc_execute_line+0x632>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 80022dc:	49bf      	ldr	r1, [pc, #764]	; (80025dc <gc_execute_line+0x9bc>)
 80022de:	4658      	mov	r0, fp
 80022e0:	f7fe fea6 	bl	8001030 <__aeabi_fcmpgt>
 80022e4:	2800      	cmp	r0, #0
 80022e6:	f040 8351 	bne.w	800298c <gc_execute_line+0xd6c>
					gc_block.values.t = int_value;
 80022ea:	f889 a034 	strb.w	sl, [r9, #52]	; 0x34
				break;
 80022ee:	f44f 7500 	mov.w	r5, #512	; 0x200
 80022f2:	2309      	movs	r3, #9
 80022f4:	e7ad      	b.n	8002252 <gc_execute_line+0x632>
		  case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 80022f6:	9b06      	ldr	r3, [sp, #24]
 80022f8:	f8c9 b038 	str.w	fp, [r9, #56]	; 0x38
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	9306      	str	r3, [sp, #24]
 8002302:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002306:	230a      	movs	r3, #10
 8002308:	e786      	b.n	8002218 <gc_execute_line+0x5f8>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 800230a:	9b06      	ldr	r3, [sp, #24]
 800230c:	f8c9 b03c 	str.w	fp, [r9, #60]	; 0x3c
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	9306      	str	r3, [sp, #24]
 8002316:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800231a:	230b      	movs	r3, #11
 800231c:	e77c      	b.n	8002218 <gc_execute_line+0x5f8>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 800231e:	2340      	movs	r3, #64	; 0x40
 8002320:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002324:	f889 3009 	strb.w	r3, [r9, #9]
 8002328:	230d      	movs	r3, #13
 800232a:	e58c      	b.n	8001e46 <gc_execute_line+0x226>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 800232c:	2320      	movs	r3, #32
 800232e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002332:	f889 300a 	strb.w	r3, [r9, #10]
 8002336:	230c      	movs	r3, #12
 8002338:	e585      	b.n	8001e46 <gc_execute_line+0x226>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002340:	f889 3009 	strb.w	r3, [r9, #9]
 8002344:	230d      	movs	r3, #13
 8002346:	e57e      	b.n	8001e46 <gc_execute_line+0x226>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 8002348:	2310      	movs	r3, #16
 800234a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800234e:	f889 300a 	strb.w	r3, [r9, #10]
 8002352:	230c      	movs	r3, #12
 8002354:	e577      	b.n	8001e46 <gc_execute_line+0x226>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8002356:	2401      	movs	r4, #1
}
 8002358:	4620      	mov	r0, r4
 800235a:	b01d      	add	sp, #116	; 0x74
 800235c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8002360:	2402      	movs	r4, #2
}
 8002362:	4620      	mov	r0, r4
 8002364:	b01d      	add	sp, #116	; 0x74
 8002366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 800236a:	2300      	movs	r3, #0
 800236c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002370:	f889 3009 	strb.w	r3, [r9, #9]
 8002374:	230d      	movs	r3, #13
 8002376:	e566      	b.n	8001e46 <gc_execute_line+0x226>
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 8002378:	2300      	movs	r3, #0
 800237a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800237e:	f889 300a 	strb.w	r3, [r9, #10]
 8002382:	230c      	movs	r3, #12
 8002384:	e55f      	b.n	8001e46 <gc_execute_line+0x226>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8002386:	2417      	movs	r4, #23
 8002388:	e686      	b.n	8002098 <gc_execute_line+0x478>
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 800238a:	2a0a      	cmp	r2, #10
 800238c:	f47f ae83 	bne.w	8002096 <gc_execute_line+0x476>
 8002390:	f1ba 0f5a 	cmp.w	sl, #90	; 0x5a
 8002394:	f43f ae7f 	beq.w	8002096 <gc_execute_line+0x476>
 8002398:	2104      	movs	r1, #4
 800239a:	e695      	b.n	80020c8 <gc_execute_line+0x4a8>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800239c:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 80023a0:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80023a4:	f43f aee8 	beq.w	8002178 <gc_execute_line+0x558>
 80023a8:	f1ba 0f1e 	cmp.w	sl, #30
 80023ac:	f47f aee0 	bne.w	8002170 <gc_execute_line+0x550>
 80023b0:	e6e2      	b.n	8002178 <gc_execute_line+0x558>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 80023b2:	2415      	movs	r4, #21
 80023b4:	e670      	b.n	8002098 <gc_execute_line+0x478>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 80023b6:	f899 3002 	ldrb.w	r3, [r9, #2]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d018      	beq.n	80023f0 <gc_execute_line+0x7d0>
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 80023be:	4a88      	ldr	r2, [pc, #544]	; (80025e0 <gc_execute_line+0x9c0>)
 80023c0:	7853      	ldrb	r3, [r2, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f47f ad68 	bne.w	8001e98 <gc_execute_line+0x278>
        if (bit_istrue(value_words,bit(WORD_F))) {
 80023c8:	f018 0f01 	tst.w	r8, #1
 80023cc:	f47f ad5f 	bne.w	8001e8e <gc_execute_line+0x26e>
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 80023d0:	6913      	ldr	r3, [r2, #16]
 80023d2:	f8c9 300c 	str.w	r3, [r9, #12]
 80023d6:	e55f      	b.n	8001e98 <gc_execute_line+0x278>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 80023d8:	f889 3006 	strb.w	r3, [r9, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80023dc:	2303      	movs	r3, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 80023de:	2108      	movs	r1, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80023e0:	9307      	str	r3, [sp, #28]
 80023e2:	e671      	b.n	80020c8 <gc_execute_line+0x4a8>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 80023e4:	2302      	movs	r3, #2
 80023e6:	2101      	movs	r1, #1
 80023e8:	9307      	str	r3, [sp, #28]
 80023ea:	e66a      	b.n	80020c2 <gc_execute_line+0x4a2>
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 80023ec:	241b      	movs	r4, #27
 80023ee:	e653      	b.n	8002098 <gc_execute_line+0x478>
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 80023f0:	9b07      	ldr	r3, [sp, #28]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	f47f ad50 	bne.w	8001e98 <gc_execute_line+0x278>
		if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 80023f8:	f899 3001 	ldrb.w	r3, [r9, #1]
 80023fc:	2b50      	cmp	r3, #80	; 0x50
 80023fe:	f43f ad4b 	beq.w	8001e98 <gc_execute_line+0x278>
 8002402:	2b00      	cmp	r3, #0
 8002404:	f43f ad48 	beq.w	8001e98 <gc_execute_line+0x278>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 8002408:	f018 0f01 	tst.w	r8, #1
 800240c:	f47f ad44 	bne.w	8001e98 <gc_execute_line+0x278>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 8002410:	2416      	movs	r4, #22
 8002412:	e641      	b.n	8002098 <gc_execute_line+0x478>
              axis_command = AXIS_COMMAND_NON_MODAL;
 8002414:	2301      	movs	r3, #1
 8002416:	9307      	str	r3, [sp, #28]
 8002418:	e6b0      	b.n	800217c <gc_execute_line+0x55c>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 800241a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800241e:	f000 80d4 	beq.w	80025ca <gc_execute_line+0x9aa>
    bit_false(value_words,bit(WORD_P));
 8002422:	f028 0840 	bic.w	r8, r8, #64	; 0x40
 8002426:	fa1f f888 	uxth.w	r8, r8
 800242a:	e541      	b.n	8001eb0 <gc_execute_line+0x290>
      if (bit_istrue(axis_words,bit(idx)) ) {
 800242c:	9b06      	ldr	r3, [sp, #24]
 800242e:	07d8      	lsls	r0, r3, #31
 8002430:	d507      	bpl.n	8002442 <gc_execute_line+0x822>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002432:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 8002436:	496b      	ldr	r1, [pc, #428]	; (80025e4 <gc_execute_line+0x9c4>)
 8002438:	f7fe fc3e 	bl	8000cb8 <__aeabi_fmul>
 800243c:	9b06      	ldr	r3, [sp, #24]
 800243e:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002442:	0799      	lsls	r1, r3, #30
 8002444:	d507      	bpl.n	8002456 <gc_execute_line+0x836>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002446:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 800244a:	4966      	ldr	r1, [pc, #408]	; (80025e4 <gc_execute_line+0x9c4>)
 800244c:	f7fe fc34 	bl	8000cb8 <__aeabi_fmul>
 8002450:	9b06      	ldr	r3, [sp, #24]
 8002452:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002456:	075a      	lsls	r2, r3, #29
 8002458:	d507      	bpl.n	800246a <gc_execute_line+0x84a>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 800245a:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 800245e:	4961      	ldr	r1, [pc, #388]	; (80025e4 <gc_execute_line+0x9c4>)
 8002460:	f7fe fc2a 	bl	8000cb8 <__aeabi_fmul>
 8002464:	9b06      	ldr	r3, [sp, #24]
 8002466:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
      if (bit_istrue(axis_words,bit(idx)) ) {
 800246a:	071b      	lsls	r3, r3, #28
 800246c:	f57f ad34 	bpl.w	8001ed8 <gc_execute_line+0x2b8>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002470:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 8002474:	495b      	ldr	r1, [pc, #364]	; (80025e4 <gc_execute_line+0x9c4>)
 8002476:	f7fe fc1f 	bl	8000cb8 <__aeabi_fmul>
 800247a:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
 800247e:	e52b      	b.n	8001ed8 <gc_execute_line+0x2b8>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 8002480:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002484:	2b01      	cmp	r3, #1
 8002486:	f47f ad2b 	bne.w	8001ee0 <gc_execute_line+0x2c0>
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 800248a:	9b06      	ldr	r3, [sp, #24]
 800248c:	2b04      	cmp	r3, #4
 800248e:	f43f ad27 	beq.w	8001ee0 <gc_execute_line+0x2c0>
 8002492:	2425      	movs	r4, #37	; 0x25
 8002494:	e600      	b.n	8002098 <gc_execute_line+0x478>
  switch (gc_block.modal.plane_select) {
 8002496:	2601      	movs	r6, #1
 8002498:	461f      	mov	r7, r3
      axis_1 = Y_AXIS;
 800249a:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  switch (gc_block.modal.plane_select) {
 800249e:	2303      	movs	r3, #3
 80024a0:	930a      	str	r3, [sp, #40]	; 0x28
      axis_linear = Z_AXIS;
 80024a2:	2302      	movs	r3, #2
 80024a4:	930d      	str	r3, [sp, #52]	; 0x34
 80024a6:	e512      	b.n	8001ece <gc_execute_line+0x2ae>
    default: // case PLANE_SELECT_YZ:
 80024a8:	2306      	movs	r3, #6
      axis_0 = Y_AXIS;
 80024aa:	2701      	movs	r7, #1
 80024ac:	2602      	movs	r6, #2
    default: // case PLANE_SELECT_YZ:
 80024ae:	930a      	str	r3, [sp, #40]	; 0x28
      axis_linear = X_AXIS;
 80024b0:	2300      	movs	r3, #0
      axis_0 = Y_AXIS;
 80024b2:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
      axis_linear = X_AXIS;
 80024b6:	930d      	str	r3, [sp, #52]	; 0x34
 80024b8:	e509      	b.n	8001ece <gc_execute_line+0x2ae>
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 80024ba:	9b07      	ldr	r3, [sp, #28]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d033      	beq.n	8002528 <gc_execute_line+0x908>
        if (axis_words) {
 80024c0:	9a06      	ldr	r2, [sp, #24]
 80024c2:	2a00      	cmp	r2, #0
 80024c4:	d030      	beq.n	8002528 <gc_execute_line+0x908>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80024c6:	4946      	ldr	r1, [pc, #280]	; (80025e0 <gc_execute_line+0x9c0>)
 80024c8:	f899 3004 	ldrb.w	r3, [r9, #4]
 80024cc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80024ce:	910e      	str	r1, [sp, #56]	; 0x38
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f040 81e9 	bne.w	80028a8 <gc_execute_line+0xc88>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80024d6:	07d0      	lsls	r0, r2, #31
 80024d8:	f100 82a8 	bmi.w	8002a2c <gc_execute_line+0xe0c>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80024dc:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <gc_execute_line+0x9c0>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80024e4:	9b06      	ldr	r3, [sp, #24]
 80024e6:	0799      	lsls	r1, r3, #30
 80024e8:	f100 82ec 	bmi.w	8002ac4 <gc_execute_line+0xea4>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80024ec:	4b3c      	ldr	r3, [pc, #240]	; (80025e0 <gc_execute_line+0x9c0>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80024f4:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80024f6:	075a      	lsls	r2, r3, #29
 80024f8:	f100 8210 	bmi.w	800291c <gc_execute_line+0xcfc>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80024fc:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <gc_execute_line+0x9c0>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8002504:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002506:	071b      	lsls	r3, r3, #28
 8002508:	f140 821d 	bpl.w	8002946 <gc_execute_line+0xd26>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 800250c:	2d35      	cmp	r5, #53	; 0x35
 800250e:	f000 81a4 	beq.w	800285a <gc_execute_line+0xc3a>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002512:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8002516:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002518:	f7fe fac6 	bl	8000aa8 <__addsf3>
 800251c:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <gc_execute_line+0x9c0>)
 800251e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002520:	f7fe fac2 	bl	8000aa8 <__addsf3>
 8002524:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
      switch (gc_block.non_modal_command) {
 8002528:	2d1e      	cmp	r5, #30
 800252a:	f000 819e 	beq.w	800286a <gc_execute_line+0xc4a>
 800252e:	2d35      	cmp	r5, #53	; 0x35
 8002530:	f000 8193 	beq.w	800285a <gc_execute_line+0xc3a>
 8002534:	2d1c      	cmp	r5, #28
 8002536:	d059      	beq.n	80025ec <gc_execute_line+0x9cc>
 8002538:	f899 5001 	ldrb.w	r5, [r9, #1]
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 800253c:	2d50      	cmp	r5, #80	; 0x50
 800253e:	f040 8190 	bne.w	8002862 <gc_execute_line+0xc42>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002542:	9b06      	ldr	r3, [sp, #24]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f040 81e0 	bne.w	800290a <gc_execute_line+0xcea>
 800254a:	930e      	str	r3, [sp, #56]	; 0x38
 800254c:	e538      	b.n	8001fc0 <gc_execute_line+0x3a0>
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 800254e:	2800      	cmp	r0, #0
 8002550:	f000 8267 	beq.w	8002a22 <gc_execute_line+0xe02>
 8002554:	3801      	subs	r0, #1
 8002556:	b2c3      	uxtb	r3, r0
 8002558:	4618      	mov	r0, r3
 800255a:	930e      	str	r3, [sp, #56]	; 0x38
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 800255c:	4922      	ldr	r1, [pc, #136]	; (80025e8 <gc_execute_line+0x9c8>)
 800255e:	f005 f929 	bl	80077b4 <settings_read_coord_data>
 8002562:	2800      	cmp	r0, #0
 8002564:	d049      	beq.n	80025fa <gc_execute_line+0x9da>
 8002566:	f899 3020 	ldrb.w	r3, [r9, #32]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 800256a:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <gc_execute_line+0x9c0>)
 800256c:	2b14      	cmp	r3, #20
 800256e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002570:	9b06      	ldr	r3, [sp, #24]
 8002572:	f000 83d6 	beq.w	8002d22 <gc_execute_line+0x1102>
 8002576:	07d9      	lsls	r1, r3, #31
 8002578:	d504      	bpl.n	8002584 <gc_execute_line+0x964>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 800257a:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 800257e:	f8c9 3010 	str.w	r3, [r9, #16]
 8002582:	9b06      	ldr	r3, [sp, #24]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002584:	079a      	lsls	r2, r3, #30
 8002586:	d504      	bpl.n	8002592 <gc_execute_line+0x972>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002588:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800258c:	f8c9 3014 	str.w	r3, [r9, #20]
 8002590:	9b06      	ldr	r3, [sp, #24]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002592:	075d      	lsls	r5, r3, #29
 8002594:	d504      	bpl.n	80025a0 <gc_execute_line+0x980>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002596:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800259a:	f8c9 3018 	str.w	r3, [r9, #24]
 800259e:	9b06      	ldr	r3, [sp, #24]
        if (bit_istrue(axis_words,bit(idx)) ) {
 80025a0:	0718      	lsls	r0, r3, #28
 80025a2:	d503      	bpl.n	80025ac <gc_execute_line+0x98c>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 80025a4:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 80025a8:	f8c9 301c 	str.w	r3, [r9, #28]
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 80025ac:	f028 0850 	bic.w	r8, r8, #80	; 0x50
 80025b0:	fa1f f888 	uxth.w	r8, r8
 80025b4:	e4fb      	b.n	8001fae <gc_execute_line+0x38e>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 80025b6:	f8d9 000c 	ldr.w	r0, [r9, #12]
 80025ba:	490a      	ldr	r1, [pc, #40]	; (80025e4 <gc_execute_line+0x9c4>)
 80025bc:	f7fe fb7c 	bl	8000cb8 <__aeabi_fmul>
 80025c0:	f8c9 000c 	str.w	r0, [r9, #12]
 80025c4:	e468      	b.n	8001e98 <gc_execute_line+0x278>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 80025c6:	241d      	movs	r4, #29
 80025c8:	e566      	b.n	8002098 <gc_execute_line+0x478>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 80025ca:	241c      	movs	r4, #28
 80025cc:	e564      	b.n	8002098 <gc_execute_line+0x478>
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 80025ce:	2424      	movs	r4, #36	; 0x24
 80025d0:	e562      	b.n	8002098 <gc_execute_line+0x478>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 80025d2:	241a      	movs	r4, #26
 80025d4:	e560      	b.n	8002098 <gc_execute_line+0x478>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 80025d6:	2418      	movs	r4, #24
 80025d8:	e55e      	b.n	8002098 <gc_execute_line+0x478>
 80025da:	bf00      	nop
 80025dc:	437f0000 	.word	0x437f0000
 80025e0:	20001354 	.word	0x20001354
 80025e4:	41cb3333 	.word	0x41cb3333
 80025e8:	200013b4 	.word	0x200013b4
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80025ec:	49a9      	ldr	r1, [pc, #676]	; (8002894 <gc_execute_line+0xc74>)
 80025ee:	2006      	movs	r0, #6
 80025f0:	f005 f8e0 	bl	80077b4 <settings_read_coord_data>
 80025f4:	2800      	cmp	r0, #0
 80025f6:	f040 813f 	bne.w	8002878 <gc_execute_line+0xc58>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80025fa:	2407      	movs	r4, #7
 80025fc:	e54c      	b.n	8002098 <gc_execute_line+0x478>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 80025fe:	4ba6      	ldr	r3, [pc, #664]	; (8002898 <gc_execute_line+0xc78>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8002606:	e4c1      	b.n	8001f8c <gc_execute_line+0x36c>
  if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8002608:	4ba4      	ldr	r3, [pc, #656]	; (800289c <gc_execute_line+0xc7c>)
 800260a:	4aa3      	ldr	r2, [pc, #652]	; (8002898 <gc_execute_line+0xc78>)
 800260c:	f893 5058 	ldrb.w	r5, [r3, #88]	; 0x58
 8002610:	7a54      	ldrb	r4, [r2, #9]
 8002612:	f015 0502 	ands.w	r5, r5, #2
 8002616:	d014      	beq.n	8002642 <gc_execute_line+0xa22>
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 8002618:	f899 3001 	ldrb.w	r3, [r9, #1]
 800261c:	3b01      	subs	r3, #1
 800261e:	2b02      	cmp	r3, #2
 8002620:	d903      	bls.n	800262a <gc_execute_line+0xa0a>
          gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 8002622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002628:	9309      	str	r3, [sp, #36]	; 0x24
      if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) {
 800262a:	9b06      	ldr	r3, [sp, #24]
 800262c:	b11b      	cbz	r3, 8002636 <gc_execute_line+0xa16>
 800262e:	9b07      	ldr	r3, [sp, #28]
 8002630:	2b02      	cmp	r3, #2
 8002632:	f000 8295 	beq.w	8002b60 <gc_execute_line+0xf40>
 8002636:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 8002638:	2c10      	cmp	r4, #16
 800263a:	f003 0540 	and.w	r5, r3, #64	; 0x40
 800263e:	f000 8251 	beq.w	8002ae4 <gc_execute_line+0xec4>
  gc_state.line_number = gc_block.values.n;
 8002642:	4995      	ldr	r1, [pc, #596]	; (8002898 <gc_execute_line+0xc78>)
 8002644:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8002648:	f899 3002 	ldrb.w	r3, [r9, #2]
  gc_state.line_number = gc_block.values.n;
 800264c:	618a      	str	r2, [r1, #24]
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 800264e:	704b      	strb	r3, [r1, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 8002650:	b113      	cbz	r3, 8002658 <gc_execute_line+0xa38>
 8002652:	2308      	movs	r3, #8
 8002654:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8002658:	f8d9 300c 	ldr.w	r3, [r9, #12]
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 800265c:	4a8e      	ldr	r2, [pc, #568]	; (8002898 <gc_execute_line+0xc78>)
 800265e:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
 8002662:	68d0      	ldr	r0, [r2, #12]
 8002664:	4631      	mov	r1, r6
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8002666:	6113      	str	r3, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 8002668:	9315      	str	r3, [sp, #84]	; 0x54
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 800266a:	f7fe fcb9 	bl	8000fe0 <__aeabi_fcmpeq>
 800266e:	2800      	cmp	r0, #0
 8002670:	f000 80a1 	beq.w	80027b6 <gc_execute_line+0xb96>
 8002674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002676:	069b      	lsls	r3, r3, #26
 8002678:	f100 809d 	bmi.w	80027b6 <gc_execute_line+0xb96>
  if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 800267c:	b905      	cbnz	r5, 8002680 <gc_execute_line+0xa60>
      pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use. 
 800267e:	9616      	str	r6, [sp, #88]	; 0x58
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002680:	f899 000a 	ldrb.w	r0, [r9, #10]
  gc_state.tool = gc_block.values.t;
 8002684:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8002688:	4d83      	ldr	r5, [pc, #524]	; (8002898 <gc_execute_line+0xc78>)
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 800268a:	42a0      	cmp	r0, r4
  gc_state.tool = gc_block.values.t;
 800268c:	752b      	strb	r3, [r5, #20]
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 800268e:	d005      	beq.n	800269c <gc_execute_line+0xa7c>
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 8002690:	9916      	ldr	r1, [sp, #88]	; 0x58
 8002692:	f005 fc53 	bl	8007f3c <spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 8002696:	f899 400a 	ldrb.w	r4, [r9, #10]
 800269a:	726c      	strb	r4, [r5, #9]
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 800269c:	4d7e      	ldr	r5, [pc, #504]	; (8002898 <gc_execute_line+0xc78>)
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 800269e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80026a2:	f899 0009 	ldrb.w	r0, [r9, #9]
 80026a6:	7a2b      	ldrb	r3, [r5, #8]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80026a8:	4314      	orrs	r4, r2
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80026aa:	4283      	cmp	r3, r0
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80026ac:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80026b0:	d009      	beq.n	80026c6 <gc_execute_line+0xaa6>
    coolant_sync(gc_block.modal.coolant);
 80026b2:	f7ff f9cf 	bl	8001a54 <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 80026b6:	f899 0009 	ldrb.w	r0, [r9, #9]
 80026ba:	2800      	cmp	r0, #0
 80026bc:	f040 8197 	bne.w	80029ee <gc_execute_line+0xdce>
 80026c0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 80026c4:	7228      	strb	r0, [r5, #8]
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 80026c6:	f899 3000 	ldrb.w	r3, [r9]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 80026ca:	4304      	orrs	r4, r0
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 80026cc:	2b04      	cmp	r3, #4
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 80026ce:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 80026d2:	f000 81d1 	beq.w	8002a78 <gc_execute_line+0xe58>
  gc_state.modal.units = gc_block.modal.units;
 80026d6:	f899 3003 	ldrb.w	r3, [r9, #3]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 80026da:	496f      	ldr	r1, [pc, #444]	; (8002898 <gc_execute_line+0xc78>)
 80026dc:	f899 2005 	ldrb.w	r2, [r9, #5]
  gc_state.modal.units = gc_block.modal.units;
 80026e0:	708b      	strb	r3, [r1, #2]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 80026e2:	9b07      	ldr	r3, [sp, #28]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 80026e4:	710a      	strb	r2, [r1, #4]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	f000 8153 	beq.w	8002992 <gc_execute_line+0xd72>
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 80026ec:	4d6a      	ldr	r5, [pc, #424]	; (8002898 <gc_execute_line+0xc78>)
 80026ee:	f899 4007 	ldrb.w	r4, [r9, #7]
 80026f2:	79ab      	ldrb	r3, [r5, #6]
 80026f4:	42a3      	cmp	r3, r4
 80026f6:	d006      	beq.n	8002706 <gc_execute_line+0xae6>
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 80026f8:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 80026fc:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 8002700:	71ac      	strb	r4, [r5, #6]
    system_flag_wco_change();
 8002702:	f007 f889 	bl	8009818 <system_flag_wco_change>
  switch(gc_block.non_modal_command) {
 8002706:	f899 3000 	ldrb.w	r3, [r9]
  gc_state.modal.distance = gc_block.modal.distance;
 800270a:	f899 2004 	ldrb.w	r2, [r9, #4]
 800270e:	4962      	ldr	r1, [pc, #392]	; (8002898 <gc_execute_line+0xc78>)
  switch(gc_block.non_modal_command) {
 8002710:	2b26      	cmp	r3, #38	; 0x26
  gc_state.modal.distance = gc_block.modal.distance;
 8002712:	70ca      	strb	r2, [r1, #3]
  switch(gc_block.non_modal_command) {
 8002714:	f000 81ff 	beq.w	8002b16 <gc_execute_line+0xef6>
 8002718:	f240 8150 	bls.w	80029bc <gc_execute_line+0xd9c>
 800271c:	2b5c      	cmp	r3, #92	; 0x5c
 800271e:	f000 8204 	beq.w	8002b2a <gc_execute_line+0xf0a>
 8002722:	2b66      	cmp	r3, #102	; 0x66
 8002724:	f000 81ec 	beq.w	8002b00 <gc_execute_line+0xee0>
 8002728:	2b28      	cmp	r3, #40	; 0x28
 800272a:	d103      	bne.n	8002734 <gc_execute_line+0xb14>
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 800272c:	495c      	ldr	r1, [pc, #368]	; (80028a0 <gc_execute_line+0xc80>)
 800272e:	2007      	movs	r0, #7
 8002730:	f004 ff58 	bl	80075e4 <settings_write_coord_data>
  gc_state.modal.motion = gc_block.modal.motion;
 8002734:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002738:	4a57      	ldr	r2, [pc, #348]	; (8002898 <gc_execute_line+0xc78>)
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 800273a:	2b50      	cmp	r3, #80	; 0x50
  gc_state.modal.motion = gc_block.modal.motion;
 800273c:	7013      	strb	r3, [r2, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 800273e:	d003      	beq.n	8002748 <gc_execute_line+0xb28>
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8002740:	9a07      	ldr	r2, [sp, #28]
 8002742:	2a02      	cmp	r2, #2
 8002744:	f000 819d 	beq.w	8002a82 <gc_execute_line+0xe62>
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 8002748:	f899 4008 	ldrb.w	r4, [r9, #8]
 800274c:	4b52      	ldr	r3, [pc, #328]	; (8002898 <gc_execute_line+0xc78>)
 800274e:	71dc      	strb	r4, [r3, #7]
  if (gc_state.modal.program_flow) {
 8002750:	2c00      	cmp	r4, #0
 8002752:	f43f aca1 	beq.w	8002098 <gc_execute_line+0x478>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 8002756:	f003 fbb1 	bl	8005ebc <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 800275a:	4b4f      	ldr	r3, [pc, #316]	; (8002898 <gc_execute_line+0xc78>)
 800275c:	79db      	ldrb	r3, [r3, #7]
 800275e:	2b03      	cmp	r3, #3
 8002760:	f000 81f3 	beq.w	8002b4a <gc_execute_line+0xf2a>
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002764:	2201      	movs	r2, #1
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002766:	2400      	movs	r4, #0
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002768:	f246 4064 	movw	r0, #25700	; 0x6464
        sys.r_override = DEFAULT_RAPID_OVERRIDE;
 800276c:	2164      	movs	r1, #100	; 0x64
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 800276e:	4d4a      	ldr	r5, [pc, #296]	; (8002898 <gc_execute_line+0xc78>)
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002770:	4b4c      	ldr	r3, [pc, #304]	; (80028a4 <gc_execute_line+0xc84>)
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002772:	802a      	strh	r2, [r5, #0]
      if (sys.state != STATE_CHECK_MODE) {
 8002774:	781a      	ldrb	r2, [r3, #0]
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002776:	712c      	strb	r4, [r5, #4]
      if (sys.state != STATE_CHECK_MODE) {
 8002778:	2a02      	cmp	r2, #2
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 800277a:	70ec      	strb	r4, [r5, #3]
      gc_state.modal.coord_select = 0; // G54
 800277c:	71ac      	strb	r4, [r5, #6]
      gc_state.modal.coolant = COOLANT_DISABLE;
 800277e:	812c      	strh	r4, [r5, #8]
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002780:	8118      	strh	r0, [r3, #8]
        sys.r_override = DEFAULT_RAPID_OVERRIDE;
 8002782:	7299      	strb	r1, [r3, #10]
      if (sys.state != STATE_CHECK_MODE) {
 8002784:	d010      	beq.n	80027a8 <gc_execute_line+0xb88>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002786:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 800278a:	4620      	mov	r0, r4
 800278c:	f005 f812 	bl	80077b4 <settings_read_coord_data>
 8002790:	2800      	cmp	r0, #0
 8002792:	f43f af32 	beq.w	80025fa <gc_execute_line+0x9da>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 8002796:	f007 f83f 	bl	8009818 <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0f);
 800279a:	4620      	mov	r0, r4
 800279c:	2100      	movs	r1, #0
 800279e:	f005 fb3f 	bl	8007e20 <spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff f932 	bl	8001a0c <coolant_set_state>
      report_feedback_message(MESSAGE_PROGRAM_END);
 80027a8:	2008      	movs	r0, #8
 80027aa:	f003 fe95 	bl	80064d8 <report_feedback_message>
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 80027ae:	2400      	movs	r4, #0
 80027b0:	4b39      	ldr	r3, [pc, #228]	; (8002898 <gc_execute_line+0xc78>)
 80027b2:	71dc      	strb	r4, [r3, #7]
 80027b4:	e470      	b.n	8002098 <gc_execute_line+0x478>
      if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80027b6:	b16c      	cbz	r4, 80027d4 <gc_execute_line+0xbb4>
        if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION)) {
 80027b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027ba:	061f      	lsls	r7, r3, #24
 80027bc:	d40a      	bmi.n	80027d4 <gc_execute_line+0xbb4>
          if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80027be:	2d00      	cmp	r5, #0
 80027c0:	f000 82a6 	beq.w	8002d10 <gc_execute_line+0x10f0>
            spindle_sync(gc_state.modal.spindle, 0.0);
 80027c4:	4620      	mov	r0, r4
 80027c6:	2100      	movs	r1, #0
 80027c8:	f005 fbb8 	bl	8007f3c <spindle_sync>
 80027cc:	4b32      	ldr	r3, [pc, #200]	; (8002898 <gc_execute_line+0xc78>)
 80027ce:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
 80027d2:	7a5c      	ldrb	r4, [r3, #9]
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 80027d4:	4b30      	ldr	r3, [pc, #192]	; (8002898 <gc_execute_line+0xc78>)
 80027d6:	60de      	str	r6, [r3, #12]
 80027d8:	e750      	b.n	800267c <gc_execute_line+0xa5c>
    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 80027da:	b1ad      	cbz	r5, 8002808 <gc_execute_line+0xbe8>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 80027dc:	2100      	movs	r1, #0
 80027de:	f8d9 000c 	ldr.w	r0, [r9, #12]
 80027e2:	f7fe fbfd 	bl	8000fe0 <__aeabi_fcmpeq>
 80027e6:	2800      	cmp	r0, #0
 80027e8:	f47f ae12 	bne.w	8002410 <gc_execute_line+0x7f0>
      switch (gc_block.modal.motion) {
 80027ec:	2d8c      	cmp	r5, #140	; 0x8c
 80027ee:	f000 827a 	beq.w	8002ce6 <gc_execute_line+0x10c6>
 80027f2:	f200 826e 	bhi.w	8002cd2 <gc_execute_line+0x10b2>
 80027f6:	2d02      	cmp	r5, #2
 80027f8:	f000 81c8 	beq.w	8002b8c <gc_execute_line+0xf6c>
 80027fc:	2d03      	cmp	r5, #3
 80027fe:	f000 81c9 	beq.w	8002b94 <gc_execute_line+0xf74>
 8002802:	2d01      	cmp	r5, #1
 8002804:	f47f abdc 	bne.w	8001fc0 <gc_execute_line+0x3a0>
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 8002808:	9b06      	ldr	r3, [sp, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	9b07      	ldr	r3, [sp, #28]
 800280e:	bf08      	it	eq
 8002810:	2300      	moveq	r3, #0
 8002812:	9307      	str	r3, [sp, #28]
 8002814:	f7ff bbd4 	b.w	8001fc0 <gc_execute_line+0x3a0>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002818:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <gc_execute_line+0xc78>)
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 8002820:	f7ff bb93 	b.w	8001f4a <gc_execute_line+0x32a>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002824:	2d35      	cmp	r5, #53	; 0x35
 8002826:	f000 80e9 	beq.w	80029fc <gc_execute_line+0xddc>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <gc_execute_line+0xc78>)
 800282c:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8002830:	69d8      	ldr	r0, [r3, #28]
 8002832:	f7fe f939 	bl	8000aa8 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002836:	9b06      	ldr	r3, [sp, #24]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002838:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800283c:	079b      	lsls	r3, r3, #30
 800283e:	d43e      	bmi.n	80028be <gc_execute_line+0xc9e>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <gc_execute_line+0xc78>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002848:	9b06      	ldr	r3, [sp, #24]
 800284a:	0758      	lsls	r0, r3, #29
 800284c:	f140 80de 	bpl.w	8002a0c <gc_execute_line+0xdec>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002850:	2d35      	cmp	r5, #53	; 0x35
 8002852:	d140      	bne.n	80028d6 <gc_execute_line+0xcb6>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002854:	9b06      	ldr	r3, [sp, #24]
 8002856:	071a      	lsls	r2, r3, #28
 8002858:	d575      	bpl.n	8002946 <gc_execute_line+0xd26>
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 800285a:	f899 5001 	ldrb.w	r5, [r9, #1]
 800285e:	2d01      	cmp	r5, #1
 8002860:	d850      	bhi.n	8002904 <gc_execute_line+0xce4>
 8002862:	2300      	movs	r3, #0
 8002864:	930e      	str	r3, [sp, #56]	; 0x38
 8002866:	f7ff bba7 	b.w	8001fb8 <gc_execute_line+0x398>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 800286a:	490a      	ldr	r1, [pc, #40]	; (8002894 <gc_execute_line+0xc74>)
 800286c:	2007      	movs	r0, #7
 800286e:	f004 ffa1 	bl	80077b4 <settings_read_coord_data>
 8002872:	2800      	cmp	r0, #0
 8002874:	f43f aec1 	beq.w	80025fa <gc_execute_line+0x9da>
          if (axis_words) {
 8002878:	9b06      	ldr	r3, [sp, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d168      	bne.n	8002950 <gc_execute_line+0xd30>
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 800287e:	930e      	str	r3, [sp, #56]	; 0x38
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 8002880:	9307      	str	r3, [sp, #28]
 8002882:	f7ff bb9d 	b.w	8001fc0 <gc_execute_line+0x3a0>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <gc_execute_line+0xc78>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 800288e:	f7ff bb6b 	b.w	8001f68 <gc_execute_line+0x348>
 8002892:	bf00      	nop
 8002894:	200013b4 	.word	0x200013b4
 8002898:	20001354 	.word	0x20001354
 800289c:	200015ac 	.word	0x200015ac
 80028a0:	20001370 	.word	0x20001370
 80028a4:	200013f0 	.word	0x200013f0
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028a8:	07d1      	lsls	r1, r2, #31
 80028aa:	d4bb      	bmi.n	8002824 <gc_execute_line+0xc04>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80028ac:	4bb0      	ldr	r3, [pc, #704]	; (8002b70 <gc_execute_line+0xf50>)
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028ae:	0792      	lsls	r2, r2, #30
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028b6:	d5c3      	bpl.n	8002840 <gc_execute_line+0xc20>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 80028b8:	2d35      	cmp	r5, #53	; 0x35
 80028ba:	f000 80a3 	beq.w	8002a04 <gc_execute_line+0xde4>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80028be:	4bac      	ldr	r3, [pc, #688]	; (8002b70 <gc_execute_line+0xf50>)
 80028c0:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 80028c4:	6a18      	ldr	r0, [r3, #32]
 80028c6:	f7fe f8ef 	bl	8000aa8 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028ca:	9b06      	ldr	r3, [sp, #24]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80028cc:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028d0:	0759      	lsls	r1, r3, #29
 80028d2:	f140 809b 	bpl.w	8002a0c <gc_execute_line+0xdec>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80028d6:	4ba6      	ldr	r3, [pc, #664]	; (8002b70 <gc_execute_line+0xf50>)
 80028d8:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 80028dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80028de:	f7fe f8e3 	bl	8000aa8 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028e2:	9b06      	ldr	r3, [sp, #24]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80028e4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028e8:	071b      	lsls	r3, r3, #28
 80028ea:	d52c      	bpl.n	8002946 <gc_execute_line+0xd26>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80028ec:	4ba0      	ldr	r3, [pc, #640]	; (8002b70 <gc_execute_line+0xf50>)
 80028ee:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 80028f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80028f4:	f7fe f8d8 	bl	8000aa8 <__addsf3>
 80028f8:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
 80028fc:	e614      	b.n	8002528 <gc_execute_line+0x908>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 80028fe:	2410      	movs	r4, #16
 8002900:	f7ff bbca 	b.w	8002098 <gc_execute_line+0x478>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 8002904:	241e      	movs	r4, #30
 8002906:	f7ff bbc7 	b.w	8002098 <gc_execute_line+0x478>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 800290a:	241f      	movs	r4, #31
 800290c:	f7ff bbc4 	b.w	8002098 <gc_execute_line+0x478>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002910:	4b97      	ldr	r3, [pc, #604]	; (8002b70 <gc_execute_line+0xf50>)
 8002912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002914:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
 8002918:	f7ff bb47 	b.w	8001faa <gc_execute_line+0x38a>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 800291c:	2d35      	cmp	r5, #53	; 0x35
 800291e:	f43f adf2 	beq.w	8002506 <gc_execute_line+0x8e6>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002922:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8002926:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002928:	f7fe f8be 	bl	8000aa8 <__addsf3>
 800292c:	4b90      	ldr	r3, [pc, #576]	; (8002b70 <gc_execute_line+0xf50>)
 800292e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002930:	f7fe f8ba 	bl	8000aa8 <__addsf3>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 8002934:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002936:	f7fe f8b7 	bl	8000aa8 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800293a:	9b06      	ldr	r3, [sp, #24]
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 800293c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002940:	0718      	lsls	r0, r3, #28
 8002942:	f53f ade6 	bmi.w	8002512 <gc_execute_line+0x8f2>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002946:	4b8a      	ldr	r3, [pc, #552]	; (8002b70 <gc_execute_line+0xf50>)
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
 800294e:	e5eb      	b.n	8002528 <gc_execute_line+0x908>
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 8002950:	07dd      	lsls	r5, r3, #31
 8002952:	d404      	bmi.n	800295e <gc_execute_line+0xd3e>
 8002954:	4b86      	ldr	r3, [pc, #536]	; (8002b70 <gc_execute_line+0xf50>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f8c9 3010 	str.w	r3, [r9, #16]
 800295c:	9b06      	ldr	r3, [sp, #24]
 800295e:	0798      	lsls	r0, r3, #30
 8002960:	d404      	bmi.n	800296c <gc_execute_line+0xd4c>
 8002962:	4b83      	ldr	r3, [pc, #524]	; (8002b70 <gc_execute_line+0xf50>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	f8c9 3014 	str.w	r3, [r9, #20]
 800296a:	9b06      	ldr	r3, [sp, #24]
 800296c:	0759      	lsls	r1, r3, #29
 800296e:	d404      	bmi.n	800297a <gc_execute_line+0xd5a>
 8002970:	4b7f      	ldr	r3, [pc, #508]	; (8002b70 <gc_execute_line+0xf50>)
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	f8c9 3018 	str.w	r3, [r9, #24]
 8002978:	9b06      	ldr	r3, [sp, #24]
 800297a:	071a      	lsls	r2, r3, #28
 800297c:	f53f ab15 	bmi.w	8001faa <gc_execute_line+0x38a>
 8002980:	4b7b      	ldr	r3, [pc, #492]	; (8002b70 <gc_execute_line+0xf50>)
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	f8c9 301c 	str.w	r3, [r9, #28]
 8002988:	f7ff bb0f 	b.w	8001faa <gc_execute_line+0x38a>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 800298c:	2426      	movs	r4, #38	; 0x26
 800298e:	f7ff bb83 	b.w	8002098 <gc_execute_line+0x478>
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 8002992:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002996:	714b      	strb	r3, [r1, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80c1 	beq.w	8002b20 <gc_execute_line+0xf00>
 800299e:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 80029a2:	4b73      	ldr	r3, [pc, #460]	; (8002b70 <gc_execute_line+0xf50>)
 80029a4:	4621      	mov	r1, r4
 80029a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029a8:	f7fe fb1a 	bl	8000fe0 <__aeabi_fcmpeq>
 80029ac:	2800      	cmp	r0, #0
 80029ae:	f47f ae9d 	bne.w	80026ec <gc_execute_line+0xacc>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 80029b2:	4b6f      	ldr	r3, [pc, #444]	; (8002b70 <gc_execute_line+0xf50>)
 80029b4:	64dc      	str	r4, [r3, #76]	; 0x4c
      system_flag_wco_change();
 80029b6:	f006 ff2f 	bl	8009818 <system_flag_wco_change>
 80029ba:	e697      	b.n	80026ec <gc_execute_line+0xacc>
  switch(gc_block.non_modal_command) {
 80029bc:	2b1c      	cmp	r3, #28
 80029be:	d044      	beq.n	8002a4a <gc_execute_line+0xe2a>
 80029c0:	2b1e      	cmp	r3, #30
 80029c2:	d042      	beq.n	8002a4a <gc_execute_line+0xe2a>
 80029c4:	2b0a      	cmp	r3, #10
 80029c6:	f47f aeb5 	bne.w	8002734 <gc_execute_line+0xb14>
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 80029ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80029cc:	4c69      	ldr	r4, [pc, #420]	; (8002b74 <gc_execute_line+0xf54>)
 80029ce:	4628      	mov	r0, r5
 80029d0:	4621      	mov	r1, r4
 80029d2:	f004 fe07 	bl	80075e4 <settings_write_coord_data>
      if (gc_state.modal.coord_select == coord_select) {
 80029d6:	4b66      	ldr	r3, [pc, #408]	; (8002b70 <gc_execute_line+0xf50>)
 80029d8:	799b      	ldrb	r3, [r3, #6]
 80029da:	42ab      	cmp	r3, r5
 80029dc:	f47f aeaa 	bne.w	8002734 <gc_execute_line+0xb14>
        memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 80029e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029e4:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
        system_flag_wco_change();
 80029e8:	f006 ff16 	bl	8009818 <system_flag_wco_change>
 80029ec:	e6a2      	b.n	8002734 <gc_execute_line+0xb14>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 80029ee:	4a60      	ldr	r2, [pc, #384]	; (8002b70 <gc_execute_line+0xf50>)
 80029f0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 80029f4:	7a13      	ldrb	r3, [r2, #8]
 80029f6:	4318      	orrs	r0, r3
 80029f8:	7210      	strb	r0, [r2, #8]
 80029fa:	e664      	b.n	80026c6 <gc_execute_line+0xaa6>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80029fc:	9b06      	ldr	r3, [sp, #24]
 80029fe:	0799      	lsls	r1, r3, #30
 8002a00:	f57f af1e 	bpl.w	8002840 <gc_execute_line+0xc20>
 8002a04:	9b06      	ldr	r3, [sp, #24]
 8002a06:	075b      	lsls	r3, r3, #29
 8002a08:	f53f af24 	bmi.w	8002854 <gc_execute_line+0xc34>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002a0c:	4b58      	ldr	r3, [pc, #352]	; (8002b70 <gc_execute_line+0xf50>)
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002a14:	9b06      	ldr	r3, [sp, #24]
 8002a16:	071a      	lsls	r2, r3, #28
 8002a18:	d595      	bpl.n	8002946 <gc_execute_line+0xd26>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002a1a:	2d35      	cmp	r5, #53	; 0x35
 8002a1c:	f47f af66 	bne.w	80028ec <gc_execute_line+0xccc>
 8002a20:	e71b      	b.n	800285a <gc_execute_line+0xc3a>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8002a22:	f899 3007 	ldrb.w	r3, [r9, #7]
 8002a26:	930e      	str	r3, [sp, #56]	; 0x38
 8002a28:	4618      	mov	r0, r3
 8002a2a:	e597      	b.n	800255c <gc_execute_line+0x93c>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002a2c:	2d35      	cmp	r5, #53	; 0x35
 8002a2e:	f43f ad59 	beq.w	80024e4 <gc_execute_line+0x8c4>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002a32:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8002a36:	9818      	ldr	r0, [sp, #96]	; 0x60
 8002a38:	f7fe f836 	bl	8000aa8 <__addsf3>
 8002a3c:	4b4c      	ldr	r3, [pc, #304]	; (8002b70 <gc_execute_line+0xf50>)
 8002a3e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002a40:	f7fe f832 	bl	8000aa8 <__addsf3>
 8002a44:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
 8002a48:	e54c      	b.n	80024e4 <gc_execute_line+0x8c4>
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002a4a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8002a56:	9b07      	ldr	r3, [sp, #28]
 8002a58:	b11b      	cbz	r3, 8002a62 <gc_execute_line+0xe42>
 8002a5a:	a915      	add	r1, sp, #84	; 0x54
 8002a5c:	4846      	ldr	r0, [pc, #280]	; (8002b78 <gc_execute_line+0xf58>)
 8002a5e:	f000 fe77 	bl	8003750 <mc_line>
      mc_line(gc_block.values.ijk, pl_data);
 8002a62:	4d44      	ldr	r5, [pc, #272]	; (8002b74 <gc_execute_line+0xf54>)
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002a64:	4c45      	ldr	r4, [pc, #276]	; (8002b7c <gc_execute_line+0xf5c>)
      mc_line(gc_block.values.ijk, pl_data);
 8002a66:	4628      	mov	r0, r5
 8002a68:	a915      	add	r1, sp, #84	; 0x54
 8002a6a:	f000 fe71 	bl	8003750 <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002a6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 8002a76:	e65d      	b.n	8002734 <gc_execute_line+0xb14>
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002a78:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002a7c:	f001 f89e 	bl	8003bbc <mc_dwell>
 8002a80:	e629      	b.n	80026d6 <gc_execute_line+0xab6>
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	f000 81b2 	beq.w	8002dec <gc_execute_line+0x11cc>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 818b 	beq.w	8002da4 <gc_execute_line+0x1184>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002a8e:	3b02      	subs	r3, #2
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	f240 8194 	bls.w	8002dbe <gc_execute_line+0x119e>
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002a96:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002a9a:	4d37      	ldr	r5, [pc, #220]	; (8002b78 <gc_execute_line+0xf58>)
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002aa2:	a915      	add	r1, sp, #84	; 0x54
 8002aa4:	4628      	mov	r0, r5
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002aa6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002aaa:	f001 f8bf 	bl	8003c2c <mc_probe_cycle>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	f000 8172 	beq.w	8002d98 <gc_execute_line+0x1178>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 8002ab4:	2801      	cmp	r0, #1
 8002ab6:	f47f ae47 	bne.w	8002748 <gc_execute_line+0xb28>
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8002aba:	4931      	ldr	r1, [pc, #196]	; (8002b80 <gc_execute_line+0xf60>)
 8002abc:	482f      	ldr	r0, [pc, #188]	; (8002b7c <gc_execute_line+0xf5c>)
 8002abe:	f006 feb5 	bl	800982c <system_convert_array_steps_to_mpos>
 8002ac2:	e641      	b.n	8002748 <gc_execute_line+0xb28>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002ac4:	2d35      	cmp	r5, #53	; 0x35
 8002ac6:	f43f ad16 	beq.w	80024f6 <gc_execute_line+0x8d6>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002aca:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8002ace:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002ad0:	f7fd ffea 	bl	8000aa8 <__addsf3>
 8002ad4:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <gc_execute_line+0xf50>)
 8002ad6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ad8:	f7fd ffe6 	bl	8000aa8 <__addsf3>
 8002adc:	9b06      	ldr	r3, [sp, #24]
 8002ade:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
 8002ae2:	e508      	b.n	80024f6 <gc_execute_line+0x8d6>
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <gc_execute_line+0xf50>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d825      	bhi.n	8002b3a <gc_execute_line+0xf1a>
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002aee:	2d00      	cmp	r5, #0
 8002af0:	f43f ada7 	beq.w	8002642 <gc_execute_line+0xa22>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC; // Change from G1/2/3 motion mode.
 8002af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002af6:	2540      	movs	r5, #64	; 0x40
 8002af8:	f043 0320 	orr.w	r3, r3, #32
 8002afc:	9309      	str	r3, [sp, #36]	; 0x24
 8002afe:	e5a0      	b.n	8002642 <gc_execute_line+0xa22>
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 8002b00:	2300      	movs	r3, #0
 8002b02:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <gc_execute_line+0xf64>)
 8002b04:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
 8002b08:	63cb      	str	r3, [r1, #60]	; 0x3c
 8002b0a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8002b0e:	60d3      	str	r3, [r2, #12]
      system_flag_wco_change();
 8002b10:	f006 fe82 	bl	8009818 <system_flag_wco_change>
      break;
 8002b14:	e60e      	b.n	8002734 <gc_execute_line+0xb14>
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 8002b16:	4919      	ldr	r1, [pc, #100]	; (8002b7c <gc_execute_line+0xf5c>)
 8002b18:	2006      	movs	r0, #6
 8002b1a:	f004 fd63 	bl	80075e4 <settings_write_coord_data>
      break;
 8002b1e:	e609      	b.n	8002734 <gc_execute_line+0xb14>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0f;
 8002b20:	2300      	movs	r3, #0
 8002b22:	461c      	mov	r4, r3
 8002b24:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8002b28:	e73b      	b.n	80029a2 <gc_execute_line+0xd82>
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 8002b2a:	4c16      	ldr	r4, [pc, #88]	; (8002b84 <gc_execute_line+0xf64>)
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <gc_execute_line+0xf58>)
 8002b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      system_flag_wco_change();
 8002b34:	f006 fe70 	bl	8009818 <system_flag_wco_change>
      break;
 8002b38:	e5fc      	b.n	8002734 <gc_execute_line+0xb14>
            if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002b3a:	2d00      	cmp	r5, #0
 8002b3c:	f47f ad81 	bne.w	8002642 <gc_execute_line+0xa22>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8002b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b42:	f043 0320 	orr.w	r3, r3, #32
 8002b46:	9309      	str	r3, [sp, #36]	; 0x24
 8002b48:	e57b      	b.n	8002642 <gc_execute_line+0xa22>
      if (sys.state != STATE_CHECK_MODE) {
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <gc_execute_line+0xf68>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	f43f ae2d 	beq.w	80027ae <gc_execute_line+0xb8e>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8002b54:	2008      	movs	r0, #8
 8002b56:	f006 fec7 	bl	80098e8 <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8002b5a:	f002 ffc1 	bl	8005ae0 <protocol_execute_realtime>
 8002b5e:	e626      	b.n	80027ae <gc_execute_line+0xb8e>
 8002b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b62:	f003 0540 	and.w	r5, r3, #64	; 0x40
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 8002b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b6c:	e569      	b.n	8002642 <gc_execute_line+0xa22>
 8002b6e:	bf00      	nop
 8002b70:	20001354 	.word	0x20001354
 8002b74:	200013b4 	.word	0x200013b4
 8002b78:	200013dc 	.word	0x200013dc
 8002b7c:	20001370 	.word	0x20001370
 8002b80:	20001418 	.word	0x20001418
 8002b84:	20001390 	.word	0x20001390
 8002b88:	200013f0 	.word	0x200013f0
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 8002b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002b94:	9b06      	ldr	r3, [sp, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f43f ad1b 	beq.w	80025d2 <gc_execute_line+0x9b2>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8002b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b9e:	4213      	tst	r3, r2
 8002ba0:	f000 812e 	beq.w	8002e00 <gc_execute_line+0x11e0>
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002ba4:	4d98      	ldr	r5, [pc, #608]	; (8002e08 <gc_execute_line+0x11e8>)
 8002ba6:	eb09 0287 	add.w	r2, r9, r7, lsl #2
 8002baa:	eb05 0387 	add.w	r3, r5, r7, lsl #2
 8002bae:	69d9      	ldr	r1, [r3, #28]
 8002bb0:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002bb2:	f7fd ff77 	bl	8000aa4 <__aeabi_fsub>
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002bb6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8002bba:	eb09 0286 	add.w	r2, r9, r6, lsl #2
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002bbe:	900f      	str	r0, [sp, #60]	; 0x3c
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002bc0:	69d9      	ldr	r1, [r3, #28]
 8002bc2:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002bc4:	f7fd ff6e 	bl	8000aa4 <__aeabi_fsub>
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002bc8:	f018 0580 	ands.w	r5, r8, #128	; 0x80
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002bcc:	9010      	str	r0, [sp, #64]	; 0x40
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002bce:	f000 8123 	beq.w	8002e18 <gc_execute_line+0x11f8>
            bit_false(value_words,bit(WORD_R));
 8002bd2:	f028 0880 	bic.w	r8, r8, #128	; 0x80
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002bd6:	2210      	movs	r2, #16
 8002bd8:	498c      	ldr	r1, [pc, #560]	; (8002e0c <gc_execute_line+0x11ec>)
 8002bda:	488d      	ldr	r0, [pc, #564]	; (8002e10 <gc_execute_line+0x11f0>)
            bit_false(value_words,bit(WORD_R));
 8002bdc:	fa1f f888 	uxth.w	r8, r8
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002be0:	f008 f94e 	bl	800ae80 <memcmp>
 8002be4:	2800      	cmp	r0, #0
 8002be6:	f000 8090 	beq.w	8002d0a <gc_execute_line+0x10ea>
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 8002bea:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002bee:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d104      	bne.n	8002c00 <gc_execute_line+0xfe0>
 8002bf6:	4987      	ldr	r1, [pc, #540]	; (8002e14 <gc_execute_line+0x11f4>)
 8002bf8:	f7fe f85e 	bl	8000cb8 <__aeabi_fmul>
 8002bfc:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002c00:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8002c04:	4608      	mov	r0, r1
 8002c06:	f7fe f857 	bl	8000cb8 <__aeabi_fmul>
 8002c0a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002c0e:	f7fe f853 	bl	8000cb8 <__aeabi_fmul>
 8002c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c14:	4605      	mov	r5, r0
 8002c16:	4619      	mov	r1, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe f84d 	bl	8000cb8 <__aeabi_fmul>
 8002c1e:	4601      	mov	r1, r0
 8002c20:	4628      	mov	r0, r5
 8002c22:	f7fd ff3f 	bl	8000aa4 <__aeabi_fsub>
 8002c26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c28:	4605      	mov	r5, r0
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe f843 	bl	8000cb8 <__aeabi_fmul>
 8002c32:	4601      	mov	r1, r0
 8002c34:	4628      	mov	r0, r5
 8002c36:	f7fd ff35 	bl	8000aa4 <__aeabi_fsub>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002c3a:	2100      	movs	r1, #0
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002c3c:	4605      	mov	r5, r0
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002c3e:	f7fe f9d9 	bl	8000ff4 <__aeabi_fcmplt>
 8002c42:	2800      	cmp	r0, #0
 8002c44:	f040 80d9 	bne.w	8002dfa <gc_execute_line+0x11da>
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002c48:	4628      	mov	r0, r5
 8002c4a:	f008 fac5 	bl	800b1d8 <sqrtf>
 8002c4e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002c50:	4605      	mov	r5, r0
 8002c52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002c54:	f001 f97a 	bl	8003f4c <hypot_f>
 8002c58:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002c5c:	4601      	mov	r1, r0
 8002c5e:	4628      	mov	r0, r5
 8002c60:	f7fe f8de 	bl	8000e20 <__aeabi_fdiv>
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002c64:	f899 3001 	ldrb.w	r3, [r9, #1]
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002c68:	4605      	mov	r5, r0
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002c6a:	2b03      	cmp	r3, #3
            if (gc_block.values.r < 0) {
 8002c6c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002c70:	bf08      	it	eq
 8002c72:	f100 4500 	addeq.w	r5, r0, #2147483648	; 0x80000000
            if (gc_block.values.r < 0) {
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	9308      	str	r3, [sp, #32]
 8002c7c:	f7fe f9ba 	bl	8000ff4 <__aeabi_fcmplt>
 8002c80:	9b08      	ldr	r3, [sp, #32]
 8002c82:	b128      	cbz	r0, 8002c90 <gc_execute_line+0x1070>
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002c84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
                h_x2_div_d = -h_x2_div_d;
 8002c88:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002c8c:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 8002c90:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002c92:	4628      	mov	r0, r5
 8002c94:	f7fe f810 	bl	8000cb8 <__aeabi_fmul>
 8002c98:	4601      	mov	r1, r0
 8002c9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002c9c:	f7fd ff02 	bl	8000aa4 <__aeabi_fsub>
 8002ca0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002ca4:	f7fe f808 	bl	8000cb8 <__aeabi_fmul>
 8002ca8:	3702      	adds	r7, #2
 8002caa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8002cae:	60b8      	str	r0, [r7, #8]
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 8002cb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	f7fe f800 	bl	8000cb8 <__aeabi_fmul>
 8002cb8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002cba:	f7fd fef5 	bl	8000aa8 <__addsf3>
 8002cbe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002cc2:	f7fd fff9 	bl	8000cb8 <__aeabi_fmul>
 8002cc6:	3602      	adds	r6, #2
 8002cc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8002ccc:	60b0      	str	r0, [r6, #8]
 8002cce:	f7ff b977 	b.w	8001fc0 <gc_execute_line+0x3a0>
      switch (gc_block.modal.motion) {
 8002cd2:	2d8e      	cmp	r5, #142	; 0x8e
 8002cd4:	d007      	beq.n	8002ce6 <gc_execute_line+0x10c6>
 8002cd6:	d302      	bcc.n	8002cde <gc_execute_line+0x10be>
 8002cd8:	2d8f      	cmp	r5, #143	; 0x8f
 8002cda:	f47f a971 	bne.w	8001fc0 <gc_execute_line+0x3a0>
            gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 8002cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ce0:	f043 0310 	orr.w	r3, r3, #16
 8002ce4:	9309      	str	r3, [sp, #36]	; 0x24
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 8002ce6:	f105 0372 	add.w	r3, r5, #114	; 0x72
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f240 80d9 	bls.w	8002ea4 <gc_execute_line+0x1284>
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002cf2:	9b06      	ldr	r3, [sp, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f43f ac6c 	beq.w	80025d2 <gc_execute_line+0x9b2>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002cfa:	2210      	movs	r2, #16
 8002cfc:	4943      	ldr	r1, [pc, #268]	; (8002e0c <gc_execute_line+0x11ec>)
 8002cfe:	4844      	ldr	r0, [pc, #272]	; (8002e10 <gc_execute_line+0x11f0>)
 8002d00:	f008 f8be 	bl	800ae80 <memcmp>
 8002d04:	2800      	cmp	r0, #0
 8002d06:	f47f a95b 	bne.w	8001fc0 <gc_execute_line+0x3a0>
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002d0a:	2421      	movs	r4, #33	; 0x21
 8002d0c:	f7ff b9c4 	b.w	8002098 <gc_execute_line+0x478>
          else { spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 8002d10:	4631      	mov	r1, r6
 8002d12:	4620      	mov	r0, r4
 8002d14:	f005 f912 	bl	8007f3c <spindle_sync>
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <gc_execute_line+0x11e8>)
 8002d1a:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
 8002d1e:	7a5c      	ldrb	r4, [r3, #9]
 8002d20:	e558      	b.n	80027d4 <gc_execute_line+0xbb4>
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002d22:	07d9      	lsls	r1, r3, #31
 8002d24:	d509      	bpl.n	8002d3a <gc_execute_line+0x111a>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002d26:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d28:	69d0      	ldr	r0, [r2, #28]
 8002d2a:	f7fd febb 	bl	8000aa4 <__aeabi_fsub>
 8002d2e:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8002d32:	f7fd feb7 	bl	8000aa4 <__aeabi_fsub>
 8002d36:	f8c9 0010 	str.w	r0, [r9, #16]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002d3a:	9b06      	ldr	r3, [sp, #24]
 8002d3c:	079a      	lsls	r2, r3, #30
 8002d3e:	d50a      	bpl.n	8002d56 <gc_execute_line+0x1136>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002d40:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <gc_execute_line+0x11e8>)
 8002d42:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d44:	6a18      	ldr	r0, [r3, #32]
 8002d46:	f7fd fead 	bl	8000aa4 <__aeabi_fsub>
 8002d4a:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8002d4e:	f7fd fea9 	bl	8000aa4 <__aeabi_fsub>
 8002d52:	f8c9 0014 	str.w	r0, [r9, #20]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002d56:	9b06      	ldr	r3, [sp, #24]
 8002d58:	075b      	lsls	r3, r3, #29
 8002d5a:	d50d      	bpl.n	8002d78 <gc_execute_line+0x1158>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <gc_execute_line+0x11e8>)
 8002d5e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d60:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002d62:	f7fd fe9f 	bl	8000aa4 <__aeabi_fsub>
 8002d66:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8002d6a:	f7fd fe9b 	bl	8000aa4 <__aeabi_fsub>
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002d6e:	4629      	mov	r1, r5
 8002d70:	f7fd fe98 	bl	8000aa4 <__aeabi_fsub>
 8002d74:	f8c9 0018 	str.w	r0, [r9, #24]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002d78:	9b06      	ldr	r3, [sp, #24]
 8002d7a:	0718      	lsls	r0, r3, #28
 8002d7c:	f57f ac16 	bpl.w	80025ac <gc_execute_line+0x98c>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <gc_execute_line+0x11e8>)
 8002d82:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002d84:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002d86:	f7fd fe8d 	bl	8000aa4 <__aeabi_fsub>
 8002d8a:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8002d8e:	f7fd fe89 	bl	8000aa4 <__aeabi_fsub>
 8002d92:	f8c9 001c 	str.w	r0, [r9, #28]
 8002d96:	e409      	b.n	80025ac <gc_execute_line+0x98c>
 8002d98:	4c1d      	ldr	r4, [pc, #116]	; (8002e10 <gc_execute_line+0x11f0>)
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 8002d9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002da2:	e4d1      	b.n	8002748 <gc_execute_line+0xb28>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002da4:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
        mc_line(gc_block.values.xyz, pl_data);
 8002da8:	4d18      	ldr	r5, [pc, #96]	; (8002e0c <gc_execute_line+0x11ec>)
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002daa:	f043 0301 	orr.w	r3, r3, #1
        mc_line(gc_block.values.xyz, pl_data);
 8002dae:	a915      	add	r1, sp, #84	; 0x54
 8002db0:	4628      	mov	r0, r5
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002db2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8002db6:	4c16      	ldr	r4, [pc, #88]	; (8002e10 <gc_execute_line+0x11f0>)
        mc_line(gc_block.values.xyz, pl_data);
 8002db8:	f000 fcca 	bl	8003750 <mc_line>
 8002dbc:	e7ed      	b.n	8002d9a <gc_execute_line+0x117a>
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8002dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dc0:	4d12      	ldr	r5, [pc, #72]	; (8002e0c <gc_execute_line+0x11ec>)
 8002dc2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002dc6:	9304      	str	r3, [sp, #16]
 8002dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dca:	4c11      	ldr	r4, [pc, #68]	; (8002e10 <gc_execute_line+0x11f0>)
 8002dcc:	9303      	str	r3, [sp, #12]
 8002dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002dd0:	f8d9 602c 	ldr.w	r6, [r9, #44]	; 0x2c
 8002dd4:	9302      	str	r3, [sp, #8]
 8002dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002dd8:	a915      	add	r1, sp, #84	; 0x54
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	4622      	mov	r2, r4
 8002dde:	f1a5 0328 	sub.w	r3, r5, #40	; 0x28
 8002de2:	4628      	mov	r0, r5
 8002de4:	9600      	str	r6, [sp, #0]
 8002de6:	f000 fce7 	bl	80037b8 <mc_arc>
 8002dea:	e7d6      	b.n	8002d9a <gc_execute_line+0x117a>
        mc_line(gc_block.values.xyz, pl_data);
 8002dec:	4d07      	ldr	r5, [pc, #28]	; (8002e0c <gc_execute_line+0x11ec>)
 8002dee:	a915      	add	r1, sp, #84	; 0x54
 8002df0:	4628      	mov	r0, r5
 8002df2:	f000 fcad 	bl	8003750 <mc_line>
 8002df6:	4c06      	ldr	r4, [pc, #24]	; (8002e10 <gc_execute_line+0x11f0>)
 8002df8:	e7cf      	b.n	8002d9a <gc_execute_line+0x117a>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002dfa:	2422      	movs	r4, #34	; 0x22
 8002dfc:	f7ff b94c 	b.w	8002098 <gc_execute_line+0x478>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8002e00:	2420      	movs	r4, #32
 8002e02:	f7ff b949 	b.w	8002098 <gc_execute_line+0x478>
 8002e06:	bf00      	nop
 8002e08:	20001354 	.word	0x20001354
 8002e0c:	200013dc 	.word	0x200013dc
 8002e10:	20001370 	.word	0x20001370
 8002e14:	41cb3333 	.word	0x41cb3333
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002e18:	9b08      	ldr	r3, [sp, #32]
 8002e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e1c:	4213      	tst	r3, r2
 8002e1e:	d061      	beq.n	8002ee4 <gc_execute_line+0x12c4>
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002e20:	f899 3003 	ldrb.w	r3, [r9, #3]
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002e24:	f028 080e 	bic.w	r8, r8, #14
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002e28:	2b01      	cmp	r3, #1
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002e2a:	fa1f f888 	uxth.w	r8, r8
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002e2e:	d03e      	beq.n	8002eae <gc_execute_line+0x128e>
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8002e30:	1cb5      	adds	r5, r6, #2
 8002e32:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8002e36:	68a9      	ldr	r1, [r5, #8]
 8002e38:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002e3a:	f7fd fe33 	bl	8000aa4 <__aeabi_fsub>
 8002e3e:	4606      	mov	r6, r0
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8002e40:	3702      	adds	r7, #2
 8002e42:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002e4a:	f7fd fe2b 	bl	8000aa4 <__aeabi_fsub>
            float target_r = hypot_f(x,y);
 8002e4e:	4631      	mov	r1, r6
 8002e50:	f001 f87c 	bl	8003f4c <hypot_f>
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002e54:	68a9      	ldr	r1, [r5, #8]
            float target_r = hypot_f(x,y);
 8002e56:	4606      	mov	r6, r0
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002e58:	68b8      	ldr	r0, [r7, #8]
 8002e5a:	f001 f877 	bl	8003f4c <hypot_f>
 8002e5e:	4607      	mov	r7, r0
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002e60:	4630      	mov	r0, r6
 8002e62:	4639      	mov	r1, r7
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002e64:	f8c9 702c 	str.w	r7, [r9, #44]	; 0x2c
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002e68:	f7fd fe1c 	bl	8000aa4 <__aeabi_fsub>
 8002e6c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
            if (delta_r > 0.005f) {
 8002e70:	4628      	mov	r0, r5
 8002e72:	491e      	ldr	r1, [pc, #120]	; (8002eec <gc_execute_line+0x12cc>)
 8002e74:	f7fe f8dc 	bl	8001030 <__aeabi_fcmpgt>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	f43f a8a1 	beq.w	8001fc0 <gc_execute_line+0x3a0>
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8002e7e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002e82:	4628      	mov	r0, r5
 8002e84:	f7fe f8d4 	bl	8001030 <__aeabi_fcmpgt>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	f47f af3e 	bne.w	8002d0a <gc_execute_line+0x10ea>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8002e8e:	4918      	ldr	r1, [pc, #96]	; (8002ef0 <gc_execute_line+0x12d0>)
 8002e90:	4638      	mov	r0, r7
 8002e92:	f7fd ff11 	bl	8000cb8 <__aeabi_fmul>
 8002e96:	4629      	mov	r1, r5
 8002e98:	f7fe f8ac 	bl	8000ff4 <__aeabi_fcmplt>
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	f43f a88f 	beq.w	8001fc0 <gc_execute_line+0x3a0>
 8002ea2:	e732      	b.n	8002d0a <gc_execute_line+0x10ea>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 8002ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ea6:	f043 0308 	orr.w	r3, r3, #8
 8002eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8002eac:	e721      	b.n	8002cf2 <gc_execute_line+0x10d2>
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <gc_execute_line+0x12d4>)
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 8002eb0:	960a      	str	r6, [sp, #40]	; 0x28
 8002eb2:	4626      	mov	r6, r4
 8002eb4:	461c      	mov	r4, r3
 8002eb6:	4a10      	ldr	r2, [pc, #64]	; (8002ef8 <gc_execute_line+0x12d8>)
 8002eb8:	9b08      	ldr	r3, [sp, #32]
 8002eba:	fa43 f105 	asr.w	r1, r3, r5
 8002ebe:	f011 0f01 	tst.w	r1, #1
 8002ec2:	f105 0501 	add.w	r5, r5, #1
 8002ec6:	d006      	beq.n	8002ed6 <gc_execute_line+0x12b6>
 8002ec8:	4611      	mov	r1, r2
 8002eca:	6820      	ldr	r0, [r4, #0]
 8002ecc:	9211      	str	r2, [sp, #68]	; 0x44
 8002ece:	f7fd fef3 	bl	8000cb8 <__aeabi_fmul>
 8002ed2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002ed4:	6020      	str	r0, [r4, #0]
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8002ed6:	2d04      	cmp	r5, #4
 8002ed8:	f104 0404 	add.w	r4, r4, #4
 8002edc:	d1ec      	bne.n	8002eb8 <gc_execute_line+0x1298>
 8002ede:	4634      	mov	r4, r6
 8002ee0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002ee2:	e7a5      	b.n	8002e30 <gc_execute_line+0x1210>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002ee4:	2423      	movs	r4, #35	; 0x23
 8002ee6:	f7ff b8d7 	b.w	8002098 <gc_execute_line+0x478>
 8002eea:	bf00      	nop
 8002eec:	3ba3d70a 	.word	0x3ba3d70a
 8002ef0:	3a83126f 	.word	0x3a83126f
 8002ef4:	200013b4 	.word	0x200013b4
 8002ef8:	41cb3333 	.word	0x41cb3333

08002efc <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	4605      	mov	r5, r0
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002f00:	7a03      	ldrb	r3, [r0, #8]
  pl_data->feed_rate = gc_block->values.f;
 8002f02:	68c8      	ldr	r0, [r1, #12]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002f04:	f043 0304 	orr.w	r3, r3, #4
#ifdef USE_LINE_NUMBERS
  pl_data->line_number = gc_block->values.n;
#endif

  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002f08:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <jog_execute+0x58>)
  pl_data->feed_rate = gc_block->values.f;
 8002f0a:	6028      	str	r0, [r5, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002f0c:	722b      	strb	r3, [r5, #8]
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002f0e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8002f12:	f101 0438 	add.w	r4, r1, #56	; 0x38
 8002f16:	069b      	lsls	r3, r3, #26
 8002f18:	d503      	bpl.n	8002f22 <jog_execute+0x26>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f006 fcaa 	bl	8009874 <system_check_travel_limits>
 8002f20:	b9a8      	cbnz	r0, 8002f4e <jog_execute+0x52>
  }

  // Valid jog command. Plan, set state, and execute.
  mc_line(gc_block->values.xyz, pl_data);
  if (sys.state == STATE_IDLE) {
 8002f22:	4e0d      	ldr	r6, [pc, #52]	; (8002f58 <jog_execute+0x5c>)
  mc_line(gc_block->values.xyz, pl_data);
 8002f24:	4620      	mov	r0, r4
 8002f26:	4629      	mov	r1, r5
 8002f28:	f000 fc12 	bl	8003750 <mc_line>
  if (sys.state == STATE_IDLE) {
 8002f2c:	7834      	ldrb	r4, [r6, #0]
 8002f2e:	b114      	cbz	r4, 8002f36 <jog_execute+0x3a>
      st_prep_buffer();
      st_wake_up();  // NOTE: Manual start. No state machine required.
    }
  }

  return(STATUS_OK);
 8002f30:	2400      	movs	r4, #0
}
 8002f32:	4620      	mov	r0, r4
 8002f34:	bd70      	pop	{r4, r5, r6, pc}
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8002f36:	f001 fa17 	bl	8004368 <plan_get_current_block>
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	d0f8      	beq.n	8002f30 <jog_execute+0x34>
      sys.state = STATE_JOG;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	7033      	strb	r3, [r6, #0]
      st_prep_buffer();
 8002f42:	f005 fc37 	bl	80087b4 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8002f46:	f005 f8b3 	bl	80080b0 <st_wake_up>
}
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	bd70      	pop	{r4, r5, r6, pc}
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002f4e:	240f      	movs	r4, #15
}
 8002f50:	4620      	mov	r0, r4
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
 8002f54:	200015ac 	.word	0x200015ac
 8002f58:	200013f0 	.word	0x200013f0

08002f5c <limits_init>:
#ifndef HOMING_AXIS_LOCATE_SCALAR
  #define HOMING_AXIS_LOCATE_SCALAR  5.0f // Must be > 1 to ensure limit switch is cleared.
#endif

void limits_init()
{
 8002f5c:	b530      	push	{r4, r5, lr}
    WDTCSR = (1<<WDP0); // Set time-out at ~32msec.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002f5e:	2101      	movs	r1, #1
{
 8002f60:	b085      	sub	sp, #20
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002f62:	2009      	movs	r0, #9
#ifdef DISABLE_LIMIT_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002f64:	f44f 441c 	mov.w	r4, #39936	; 0x9c00
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002f68:	f7fe fc14 	bl	8001794 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8002f6c:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f6e:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002f70:	a904      	add	r1, sp, #16
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);

	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002f72:	4d21      	ldr	r5, [pc, #132]	; (8002ff8 <limits_init+0x9c>)
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002f74:	f821 4d10 	strh.w	r4, [r1, #-16]!
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002f78:	4820      	ldr	r0, [pc, #128]	; (8002ffc <limits_init+0xa0>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8002f7a:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f7e:	f88d 2002 	strb.w	r2, [sp, #2]
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002f82:	f7fe fa1b 	bl	80013bc <GPIO_Init>
	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002f86:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8002f8a:	071b      	lsls	r3, r3, #28
 8002f8c:	d406      	bmi.n	8002f9c <limits_init+0x40>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8002f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f92:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <limits_init+0xa4>)
 8002f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	else
	{
		limits_disable();
	}
#endif
}
 8002f98:	b005      	add	sp, #20
 8002f9a:	bd30      	pop	{r4, r5, pc}
		delay_ms(100); // added by MS for debug (issue#14)
 8002f9c:	2064      	movs	r0, #100	; 0x64
 8002f9e:	f000 ffc5 	bl	8003f2c <delay_ms>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, X_LIMIT_BIT);
 8002fa2:	210a      	movs	r1, #10
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7fe fbd7 	bl	8001758 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Y_LIMIT_BIT);
 8002faa:	210b      	movs	r1, #11
 8002fac:	2001      	movs	r0, #1
 8002fae:	f7fe fbd3 	bl	8001758 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Z_LIMIT_BIT);
 8002fb2:	210c      	movs	r1, #12
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f7fe fbcf 	bl	8001758 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, A_LIMIT_BIT);
 8002fba:	210f      	movs	r1, #15
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	f7fe fbcb 	bl	8001758 <GPIO_EXTILineConfig>
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8002fc2:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8002fc6:	2200      	movs	r2, #0
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8002fc8:	f013 0f40 	tst.w	r3, #64	; 0x40
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8002fcc:	bf14      	ite	ne
 8002fce:	2108      	movne	r1, #8
 8002fd0:	210c      	moveq	r1, #12
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002fd2:	2301      	movs	r3, #1
		EXTI_Init(&EXTI_InitStructure);
 8002fd4:	a802      	add	r0, sp, #8
 8002fd6:	f88d 100d 	strb.w	r1, [sp, #13]
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8002fda:	f88d 200c 	strb.w	r2, [sp, #12]
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002fde:	f88d 300e 	strb.w	r3, [sp, #14]
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 8002fe2:	9402      	str	r4, [sp, #8]
		EXTI_Init(&EXTI_InitStructure);
 8002fe4:	f7fe f8c0 	bl	8001168 <EXTI_Init>
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <limits_init+0xa8>)
 8002fea:	a804      	add	r0, sp, #16
 8002fec:	f840 3d0c 	str.w	r3, [r0, #-12]!
		NVIC_Init(&NVIC_InitStructure);
 8002ff0:	f7fe f88e 	bl	8001110 <NVIC_Init>
}
 8002ff4:	b005      	add	sp, #20
 8002ff6:	bd30      	pop	{r4, r5, pc}
 8002ff8:	200015ac 	.word	0x200015ac
 8002ffc:	40010c00 	.word	0x40010c00
 8003000:	e000e100 	.word	0xe000e100
 8003004:	01020228 	.word	0x01020228

08003008 <limits_disable>:
 8003008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800300c:	4b01      	ldr	r3, [pc, #4]	; (8003014 <limits_disable+0xc>)
 800300e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PCICR &= ~(1 << LIMIT_INT);  // Disable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  NVIC_DisableIRQ(EXTI15_10_IRQn);
#endif
}
 8003012:	4770      	bx	lr
 8003014:	e000e100 	.word	0xe000e100

08003018 <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 8003018:	b508      	push	{r3, lr}
#if defined(AVRTARGET) || defined(STM32F103C8)
#if defined(AVRTARGET)
  uint8_t pin = (LIMIT_PIN & LIMIT_MASK);
#endif
#if defined(STM32F103C8)
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 800301a:	4812      	ldr	r0, [pc, #72]	; (8003064 <limits_get_state+0x4c>)
 800301c:	f7fe fb54 	bl	80016c8 <GPIO_ReadInputData>
 8003020:	4603      	mov	r3, r0
#endif
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003022:	4a11      	ldr	r2, [pc, #68]	; (8003068 <limits_get_state+0x50>)
 8003024:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 8003028:	0652      	lsls	r2, r2, #25
 800302a:	bf5c      	itt	pl
 800302c:	f480 431c 	eorpl.w	r3, r0, #39936	; 0x9c00
 8003030:	b29b      	uxthpl	r3, r3
  if (pin) {
 8003032:	b1ab      	cbz	r3, 8003060 <limits_get_state+0x48>
    uint8_t idx;
    for (idx=0; idx<N_AXIS; idx++) {
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003034:	4a0d      	ldr	r2, [pc, #52]	; (800306c <limits_get_state+0x54>)
 8003036:	8810      	ldrh	r0, [r2, #0]
 8003038:	8851      	ldrh	r1, [r2, #2]
 800303a:	4203      	tst	r3, r0
  uint8_t limit_state = 0;
 800303c:	bf14      	ite	ne
 800303e:	2001      	movne	r0, #1
 8003040:	2000      	moveq	r0, #0
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003042:	420b      	tst	r3, r1
 8003044:	8891      	ldrh	r1, [r2, #4]
 8003046:	88d2      	ldrh	r2, [r2, #6]
 8003048:	bf18      	it	ne
 800304a:	f040 0002 	orrne.w	r0, r0, #2
 800304e:	420b      	tst	r3, r1
 8003050:	bf18      	it	ne
 8003052:	f040 0004 	orrne.w	r0, r0, #4
 8003056:	4213      	tst	r3, r2
 8003058:	d001      	beq.n	800305e <limits_get_state+0x46>
 800305a:	f040 0008 	orr.w	r0, r0, #8
    }
  }
#endif
  return(limit_state);
}
 800305e:	bd08      	pop	{r3, pc}
  uint8_t limit_state = 0;
 8003060:	4618      	mov	r0, r3
}
 8003062:	bd08      	pop	{r3, pc}
 8003064:	40010c00 	.word	0x40010c00
 8003068:	200015ac 	.word	0x200015ac
 800306c:	0800c318 	.word	0x0800c318

08003070 <EXTI15_10_IRQHandler>:
#if defined(AVRTARGET) 
ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process.
#else
void EXTI15_10_IRQHandler(void)
#endif
{
 8003070:	b508      	push	{r3, lr}
#if defined (STM32F103C8)
	if (EXTI_GetITStatus(1 << X_LIMIT_BIT) != RESET)
 8003072:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003076:	f7fe f8b5 	bl	80011e4 <EXTI_GetITStatus>
 800307a:	bb88      	cbnz	r0, 80030e0 <EXTI15_10_IRQHandler+0x70>
	{
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Y_LIMIT_BIT) != RESET)
 800307c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003080:	f7fe f8b0 	bl	80011e4 <EXTI_GetITStatus>
 8003084:	bb38      	cbnz	r0, 80030d6 <EXTI15_10_IRQHandler+0x66>
	{
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Z_LIMIT_BIT) != RESET)
 8003086:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800308a:	f7fe f8ab 	bl	80011e4 <EXTI_GetITStatus>
 800308e:	b9e8      	cbnz	r0, 80030cc <EXTI15_10_IRQHandler+0x5c>
	{
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
	}
// --- YSV 22-06-2018
	#if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
	if (EXTI_GetITStatus(1 << A_LIMIT_BIT) != RESET)
 8003090:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003094:	f7fe f8a6 	bl	80011e4 <EXTI_GetITStatus>
 8003098:	b998      	cbnz	r0, 80030c2 <EXTI15_10_IRQHandler+0x52>

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800309a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800309e:	4a13      	ldr	r2, [pc, #76]	; (80030ec <EXTI15_10_IRQHandler+0x7c>)
  // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  // When in the alarm state, Grbl should have been reset or will force a reset, so any pending
  // moves in the planner and serial buffers are all cleared and newly sent blocks will be
  // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  // limit setting if their limits are constantly triggering after a reset and move their axes.
  if (sys.state != STATE_ALARM) {
 80030a0:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <EXTI15_10_IRQHandler+0x80>)
 80030a2:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d002      	beq.n	80030b2 <EXTI15_10_IRQHandler+0x42>
    if (!(sys_rt_exec_alarm)) {
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <EXTI15_10_IRQHandler+0x84>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b103      	cbz	r3, 80030b4 <EXTI15_10_IRQHandler+0x44>
      mc_reset(); // Initiate system kill.
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif
    }
  }
}
 80030b2:	bd08      	pop	{r3, pc}
      mc_reset(); // Initiate system kill.
 80030b4:	f000 fe4c 	bl	8003d50 <mc_reset>
}
 80030b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 80030bc:	2001      	movs	r0, #1
 80030be:	f006 bc27 	b.w	8009910 <system_set_exec_alarm>
		EXTI_ClearITPendingBit(1 << A_LIMIT_BIT);
 80030c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80030c6:	f7fe f89b 	bl	8001200 <EXTI_ClearITPendingBit>
 80030ca:	e7e6      	b.n	800309a <EXTI15_10_IRQHandler+0x2a>
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
 80030cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030d0:	f7fe f896 	bl	8001200 <EXTI_ClearITPendingBit>
 80030d4:	e7dc      	b.n	8003090 <EXTI15_10_IRQHandler+0x20>
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
 80030d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80030da:	f7fe f891 	bl	8001200 <EXTI_ClearITPendingBit>
 80030de:	e7d2      	b.n	8003086 <EXTI15_10_IRQHandler+0x16>
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
 80030e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030e4:	f7fe f88c 	bl	8001200 <EXTI_ClearITPendingBit>
 80030e8:	e7c8      	b.n	800307c <EXTI15_10_IRQHandler+0xc>
 80030ea:	bf00      	nop
 80030ec:	e000e100 	.word	0xe000e100
 80030f0:	200013f0 	.word	0x200013f0
 80030f4:	20001428 	.word	0x20001428

080030f8 <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 80030f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.abort) { return; } // Block if system reset has been issued.
 80030fc:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 80033b8 <limits_go_home+0x2c0>
{
 8003100:	b095      	sub	sp, #84	; 0x54
  if (sys.abort) { return; } // Block if system reset has been issued.
 8003102:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003106:	b113      	cbz	r3, 800310e <limits_go_home+0x16>
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
}
 8003108:	b015      	add	sp, #84	; 0x54
 800310a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800310e:	4604      	mov	r4, r0
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8003110:	2506      	movs	r5, #6
 8003112:	49a3      	ldr	r1, [pc, #652]	; (80033a0 <limits_go_home+0x2a8>)
 8003114:	9007      	str	r0, [sp, #28]
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003116:	f004 0401 	and.w	r4, r4, #1
 800311a:	6808      	ldr	r0, [r1, #0]
 800311c:	6849      	ldr	r1, [r1, #4]
  memset(pl_data,0,sizeof(plan_line_data_t));
 800311e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8003122:	aa0b      	add	r2, sp, #44	; 0x2c
 8003124:	930d      	str	r3, [sp, #52]	; 0x34
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003126:	f004 03ff 	and.w	r3, r4, #255	; 0xff
 800312a:	c203      	stmia	r2!, {r0, r1}
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 800312c:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003130:	9309      	str	r3, [sp, #36]	; 0x24
 8003132:	2c00      	cmp	r4, #0
 8003134:	f040 8125 	bne.w	8003382 <limits_go_home+0x28a>
  float max_travel = 0.0f;
 8003138:	f04f 0b00 	mov.w	fp, #0
 800313c:	4e99      	ldr	r6, [pc, #612]	; (80033a4 <limits_go_home+0x2ac>)
    if (bit_istrue(cycle_mask,bit(idx))) {
 800313e:	9b07      	ldr	r3, [sp, #28]
 8003140:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003144:	9304      	str	r3, [sp, #16]
 8003146:	b153      	cbz	r3, 800315e <limits_go_home+0x66>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003148:	4997      	ldr	r1, [pc, #604]	; (80033a8 <limits_go_home+0x2b0>)
 800314a:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800314c:	f7fd fdb4 	bl	8000cb8 <__aeabi_fmul>
 8003150:	4605      	mov	r5, r0
 8003152:	4601      	mov	r1, r0
 8003154:	4658      	mov	r0, fp
 8003156:	f7fd ff61 	bl	800101c <__aeabi_fcmpge>
 800315a:	b900      	cbnz	r0, 800315e <limits_go_home+0x66>
 800315c:	46ab      	mov	fp, r5
    if (bit_istrue(cycle_mask,bit(idx))) {
 800315e:	9b07      	ldr	r3, [sp, #28]
 8003160:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003164:	9305      	str	r3, [sp, #20]
 8003166:	b153      	cbz	r3, 800317e <limits_go_home+0x86>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003168:	498f      	ldr	r1, [pc, #572]	; (80033a8 <limits_go_home+0x2b0>)
 800316a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 800316c:	f7fd fda4 	bl	8000cb8 <__aeabi_fmul>
 8003170:	4605      	mov	r5, r0
 8003172:	4601      	mov	r1, r0
 8003174:	4658      	mov	r0, fp
 8003176:	f7fd ff51 	bl	800101c <__aeabi_fcmpge>
 800317a:	b900      	cbnz	r0, 800317e <limits_go_home+0x86>
 800317c:	46ab      	mov	fp, r5
    if (bit_istrue(cycle_mask,bit(idx))) {
 800317e:	9b07      	ldr	r3, [sp, #28]
 8003180:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003184:	9306      	str	r3, [sp, #24]
 8003186:	b153      	cbz	r3, 800319e <limits_go_home+0xa6>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003188:	4987      	ldr	r1, [pc, #540]	; (80033a8 <limits_go_home+0x2b0>)
 800318a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800318c:	f7fd fd94 	bl	8000cb8 <__aeabi_fmul>
 8003190:	4605      	mov	r5, r0
 8003192:	4601      	mov	r1, r0
 8003194:	4658      	mov	r0, fp
 8003196:	f7fd ff41 	bl	800101c <__aeabi_fcmpge>
 800319a:	b900      	cbnz	r0, 800319e <limits_go_home+0xa6>
 800319c:	46ab      	mov	fp, r5
  float homing_rate = settings.homing_seek_rate;
 800319e:	2304      	movs	r3, #4
  bool approach = true;
 80031a0:	2501      	movs	r5, #1
  float homing_rate = settings.homing_seek_rate;
 80031a2:	9302      	str	r3, [sp, #8]
 80031a4:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80031a6:	f8df a208 	ldr.w	sl, [pc, #520]	; 80033b0 <limits_go_home+0x2b8>
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	4f7f      	ldr	r7, [pc, #508]	; (80033ac <limits_go_home+0x2b4>)
 80031ae:	b2e3      	uxtb	r3, r4
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80031b0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80033bc <limits_go_home+0x2c4>
 80031b4:	9303      	str	r3, [sp, #12]
    system_convert_array_steps_to_mpos(target,sys_position);
 80031b6:	497e      	ldr	r1, [pc, #504]	; (80033b0 <limits_go_home+0x2b8>)
 80031b8:	a810      	add	r0, sp, #64	; 0x40
 80031ba:	f006 fb37 	bl	800982c <system_convert_array_steps_to_mpos>
      if (bit_istrue(cycle_mask,bit(idx))) {
 80031be:	9b03      	ldr	r3, [sp, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 818a 	beq.w	80034da <limits_go_home+0x3e2>
          sys_position[idx] = 0;
 80031c6:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80031c8:	f8b6 205a 	ldrh.w	r2, [r6, #90]	; 0x5a
          sys_position[idx] = 0;
 80031cc:	f8ca 1000 	str.w	r1, [sl]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80031d0:	07d4      	lsls	r4, r2, #31
 80031d2:	f140 819a 	bpl.w	800350a <limits_go_home+0x412>
          if (approach) { target[idx] = -max_travel; }
 80031d6:	2d00      	cmp	r5, #0
 80031d8:	f040 819a 	bne.w	8003510 <limits_go_home+0x418>
          else { target[idx] = max_travel; }
 80031dc:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
        axislock |= step_pin[idx];
 80031e0:	2202      	movs	r2, #2
        n_active_axis++;
 80031e2:	2001      	movs	r0, #1
        axislock |= step_pin[idx];
 80031e4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
      if (bit_istrue(cycle_mask,bit(idx))) {
 80031e8:	9b04      	ldr	r3, [sp, #16]
 80031ea:	b183      	cbz	r3, 800320e <limits_go_home+0x116>
          sys_position[idx] = 0;
 80031ec:	2000      	movs	r0, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80031ee:	f8b6 105a 	ldrh.w	r1, [r6, #90]	; 0x5a
          sys_position[idx] = 0;
 80031f2:	f8ca 0004 	str.w	r0, [sl, #4]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80031f6:	0788      	lsls	r0, r1, #30
 80031f8:	f140 8180 	bpl.w	80034fc <limits_go_home+0x404>
          if (approach) { target[idx] = -max_travel; }
 80031fc:	2d00      	cmp	r5, #0
 80031fe:	f040 8180 	bne.w	8003502 <limits_go_home+0x40a>
          else { target[idx] = max_travel; }
 8003202:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
        n_active_axis++;
 8003206:	4610      	mov	r0, r2
        axislock |= step_pin[idx];
 8003208:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800320c:	430c      	orrs	r4, r1
      if (bit_istrue(cycle_mask,bit(idx))) {
 800320e:	9b05      	ldr	r3, [sp, #20]
 8003210:	b18b      	cbz	r3, 8003236 <limits_go_home+0x13e>
          sys_position[idx] = 0;
 8003212:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003214:	f8b6 205a 	ldrh.w	r2, [r6, #90]	; 0x5a
        n_active_axis++;
 8003218:	3001      	adds	r0, #1
          sys_position[idx] = 0;
 800321a:	f8ca 1008 	str.w	r1, [sl, #8]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800321e:	0751      	lsls	r1, r2, #29
        n_active_axis++;
 8003220:	b2c0      	uxtb	r0, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003222:	f140 8179 	bpl.w	8003518 <limits_go_home+0x420>
          if (approach) { target[idx] = -max_travel; }
 8003226:	2d00      	cmp	r5, #0
 8003228:	f040 8179 	bne.w	800351e <limits_go_home+0x426>
          else { target[idx] = max_travel; }
 800322c:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
        axislock |= step_pin[idx];
 8003230:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8003234:	4314      	orrs	r4, r2
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003236:	9b06      	ldr	r3, [sp, #24]
 8003238:	b18b      	cbz	r3, 800325e <limits_go_home+0x166>
          sys_position[idx] = 0;
 800323a:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800323c:	f8b6 205a 	ldrh.w	r2, [r6, #90]	; 0x5a
        n_active_axis++;
 8003240:	3001      	adds	r0, #1
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003242:	0712      	lsls	r2, r2, #28
        n_active_axis++;
 8003244:	b2c0      	uxtb	r0, r0
          sys_position[idx] = 0;
 8003246:	f8ca 100c 	str.w	r1, [sl, #12]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800324a:	f140 8150 	bpl.w	80034ee <limits_go_home+0x3f6>
          if (approach) { target[idx] = -max_travel; }
 800324e:	2d00      	cmp	r5, #0
 8003250:	f040 8150 	bne.w	80034f4 <limits_go_home+0x3fc>
          else { target[idx] = max_travel; }
 8003254:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
        axislock |= step_pin[idx];
 8003258:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800325c:	431c      	orrs	r4, r3
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 800325e:	f7fd fcd3 	bl	8000c08 <__aeabi_ui2f>
 8003262:	f007 ffb9 	bl	800b1d8 <sqrtf>
 8003266:	9901      	ldr	r1, [sp, #4]
    sys.homing_axis_lock = axislock;
 8003268:	f8a8 4006 	strh.w	r4, [r8, #6]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 800326c:	f7fd fd24 	bl	8000cb8 <__aeabi_fmul>
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8003270:	a90d      	add	r1, sp, #52	; 0x34
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 8003272:	900d      	str	r0, [sp, #52]	; 0x34
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8003274:	a810      	add	r0, sp, #64	; 0x40
 8003276:	f001 f965 	bl	8004544 <plan_buffer_line>
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 800327a:	2304      	movs	r3, #4
 800327c:	f888 3004 	strb.w	r3, [r8, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 8003280:	f005 fa98 	bl	80087b4 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 8003284:	f004 ff14 	bl	80080b0 <st_wake_up>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003288:	f8df b134 	ldr.w	fp, [pc, #308]	; 80033c0 <limits_go_home+0x2c8>
      if (approach) {
 800328c:	2d00      	cmp	r5, #0
 800328e:	f040 8099 	bne.w	80033c4 <limits_go_home+0x2cc>
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8003292:	f005 fa8f 	bl	80087b4 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8003296:	783b      	ldrb	r3, [r7, #0]
 8003298:	f013 0f34 	tst.w	r3, #52	; 0x34
 800329c:	f040 80db 	bne.w	8003456 <limits_go_home+0x35e>
    } while (STEP_MASK & axislock);
 80032a0:	0723      	lsls	r3, r4, #28
 80032a2:	d1f3      	bne.n	800328c <limits_go_home+0x194>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 80032a4:	f005 f91e 	bl	80084e4 <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 80032a8:	f8b6 0064 	ldrh.w	r0, [r6, #100]	; 0x64
 80032ac:	f000 fe3e 	bl	8003f2c <delay_ms>
 80032b0:	f085 0401 	eor.w	r4, r5, #1
    if (approach) {
 80032b4:	2d00      	cmp	r5, #0
 80032b6:	f040 8114 	bne.w	80034e2 <limits_go_home+0x3ea>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 80032ba:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 80032bc:	493d      	ldr	r1, [pc, #244]	; (80033b4 <limits_go_home+0x2bc>)
 80032be:	4610      	mov	r0, r2
 80032c0:	9208      	str	r2, [sp, #32]
 80032c2:	f7fd fcf9 	bl	8000cb8 <__aeabi_fmul>
 80032c6:	4683      	mov	fp, r0
      homing_rate = settings.homing_feed_rate;
 80032c8:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80032ca:	9a08      	ldr	r2, [sp, #32]
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	9b02      	ldr	r3, [sp, #8]
    approach = !approach;
 80032d0:	4625      	mov	r5, r4
 80032d2:	1e59      	subs	r1, r3, #1
  } while (n_cycle-- > 0);
 80032d4:	f011 03ff 	ands.w	r3, r1, #255	; 0xff
 80032d8:	9302      	str	r3, [sp, #8]
 80032da:	f47f af6c 	bne.w	80031b6 <limits_go_home+0xbe>
    if (cycle_mask & bit(idx)) {
 80032de:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 80032e0:	f8b6 405a 	ldrh.w	r4, [r6, #90]	; 0x5a
    if (cycle_mask & bit(idx)) {
 80032e4:	b183      	cbz	r3, 8003308 <limits_go_home+0x210>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 80032e6:	07e7      	lsls	r7, r4, #31
 80032e8:	6835      	ldr	r5, [r6, #0]
 80032ea:	f140 8124 	bpl.w	8003536 <limits_go_home+0x43e>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 80032ee:	4610      	mov	r0, r2
 80032f0:	6b31      	ldr	r1, [r6, #48]	; 0x30
 80032f2:	9201      	str	r2, [sp, #4]
 80032f4:	f7fd fbd8 	bl	8000aa8 <__addsf3>
 80032f8:	4629      	mov	r1, r5
 80032fa:	f7fd fcdd 	bl	8000cb8 <__aeabi_fmul>
 80032fe:	f007 ff07 	bl	800b110 <lroundf>
 8003302:	9a01      	ldr	r2, [sp, #4]
        sys_position[idx] = set_axis_position;
 8003304:	f8ca 0000 	str.w	r0, [sl]
    if (cycle_mask & bit(idx)) {
 8003308:	9b04      	ldr	r3, [sp, #16]
 800330a:	b183      	cbz	r3, 800332e <limits_go_home+0x236>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 800330c:	07a0      	lsls	r0, r4, #30
 800330e:	6875      	ldr	r5, [r6, #4]
 8003310:	f140 8125 	bpl.w	800355e <limits_go_home+0x466>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 8003314:	4610      	mov	r0, r2
 8003316:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8003318:	9201      	str	r2, [sp, #4]
 800331a:	f7fd fbc5 	bl	8000aa8 <__addsf3>
 800331e:	4629      	mov	r1, r5
 8003320:	f7fd fcca 	bl	8000cb8 <__aeabi_fmul>
 8003324:	f007 fef4 	bl	800b110 <lroundf>
 8003328:	9a01      	ldr	r2, [sp, #4]
        sys_position[idx] = set_axis_position;
 800332a:	f8ca 0004 	str.w	r0, [sl, #4]
    if (cycle_mask & bit(idx)) {
 800332e:	9b05      	ldr	r3, [sp, #20]
 8003330:	b183      	cbz	r3, 8003354 <limits_go_home+0x25c>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003332:	0761      	lsls	r1, r4, #29
 8003334:	68b5      	ldr	r5, [r6, #8]
 8003336:	f140 811d 	bpl.w	8003574 <limits_go_home+0x47c>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 800333a:	4610      	mov	r0, r2
 800333c:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800333e:	9201      	str	r2, [sp, #4]
 8003340:	f7fd fbb2 	bl	8000aa8 <__addsf3>
 8003344:	4629      	mov	r1, r5
 8003346:	f7fd fcb7 	bl	8000cb8 <__aeabi_fmul>
 800334a:	f007 fee1 	bl	800b110 <lroundf>
 800334e:	9a01      	ldr	r2, [sp, #4]
        sys_position[idx] = set_axis_position;
 8003350:	f8ca 0008 	str.w	r0, [sl, #8]
    if (cycle_mask & bit(idx)) {
 8003354:	9b06      	ldr	r3, [sp, #24]
 8003356:	b173      	cbz	r3, 8003376 <limits_go_home+0x27e>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003358:	0723      	lsls	r3, r4, #28
 800335a:	68f5      	ldr	r5, [r6, #12]
 800335c:	f140 80f6 	bpl.w	800354c <limits_go_home+0x454>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 8003360:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8003362:	4610      	mov	r0, r2
 8003364:	f7fd fba0 	bl	8000aa8 <__addsf3>
 8003368:	4629      	mov	r1, r5
 800336a:	f7fd fca5 	bl	8000cb8 <__aeabi_fmul>
 800336e:	f007 fecf 	bl	800b110 <lroundf>
        sys_position[idx] = set_axis_position;
 8003372:	f8ca 000c 	str.w	r0, [sl, #12]
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 8003376:	2300      	movs	r3, #0
 8003378:	f888 3004 	strb.w	r3, [r8, #4]
}
 800337c:	b015      	add	sp, #84	; 0x54
 800337e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003382:	4e08      	ldr	r6, [pc, #32]	; (80033a4 <limits_go_home+0x2ac>)
 8003384:	4908      	ldr	r1, [pc, #32]	; (80033a8 <limits_go_home+0x2b0>)
 8003386:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8003388:	f7fd fc96 	bl	8000cb8 <__aeabi_fmul>
 800338c:	2100      	movs	r1, #0
 800338e:	4683      	mov	fp, r0
 8003390:	f7fd fe44 	bl	800101c <__aeabi_fcmpge>
 8003394:	2800      	cmp	r0, #0
 8003396:	f47f aed2 	bne.w	800313e <limits_go_home+0x46>
 800339a:	f04f 0b00 	mov.w	fp, #0
 800339e:	e6ce      	b.n	800313e <limits_go_home+0x46>
 80033a0:	0800c320 	.word	0x0800c320
 80033a4:	200015ac 	.word	0x200015ac
 80033a8:	bfc00000 	.word	0xbfc00000
 80033ac:	20001405 	.word	0x20001405
 80033b0:	20001418 	.word	0x20001418
 80033b4:	40a00000 	.word	0x40a00000
 80033b8:	200013f0 	.word	0x200013f0
 80033bc:	0800c318 	.word	0x0800c318
 80033c0:	40010c00 	.word	0x40010c00
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 80033c4:	4658      	mov	r0, fp
 80033c6:	f7fe f97f 	bl	80016c8 <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 80033ca:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 80033ce:	065b      	lsls	r3, r3, #25
 80033d0:	bf5c      	itt	pl
 80033d2:	f480 401c 	eorpl.w	r0, r0, #39936	; 0x9c00
 80033d6:	b280      	uxthpl	r0, r0
  if (pin) {
 80033d8:	2800      	cmp	r0, #0
 80033da:	d033      	beq.n	8003444 <limits_go_home+0x34c>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80033dc:	f8b9 3000 	ldrh.w	r3, [r9]
 80033e0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 80033e4:	4218      	tst	r0, r3
 80033e6:	bf14      	ite	ne
 80033e8:	2301      	movne	r3, #1
 80033ea:	2300      	moveq	r3, #0
 80033ec:	4210      	tst	r0, r2
 80033ee:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 80033f2:	bf18      	it	ne
 80033f4:	f043 0302 	orrne.w	r3, r3, #2
 80033f8:	4210      	tst	r0, r2
 80033fa:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 80033fe:	bf18      	it	ne
 8003400:	f043 0304 	orrne.w	r3, r3, #4
 8003404:	4210      	tst	r0, r2
          if (axislock & step_pin[idx]) {
 8003406:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800340a:	bf18      	it	ne
 800340c:	f043 0308 	orrne.w	r3, r3, #8
          if (axislock & step_pin[idx]) {
 8003410:	4214      	tst	r4, r2
 8003412:	d002      	beq.n	800341a <limits_go_home+0x322>
            if (limit_state & (1 << idx)) {
 8003414:	07d9      	lsls	r1, r3, #31
                axislock &= ~(step_pin[idx]);
 8003416:	bf48      	it	mi
 8003418:	4394      	bicmi	r4, r2
          if (axislock & step_pin[idx]) {
 800341a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800341e:	4214      	tst	r4, r2
 8003420:	d002      	beq.n	8003428 <limits_go_home+0x330>
            if (limit_state & (1 << idx)) {
 8003422:	0798      	lsls	r0, r3, #30
                axislock &= ~(step_pin[idx]);
 8003424:	bf48      	it	mi
 8003426:	4394      	bicmi	r4, r2
          if (axislock & step_pin[idx]) {
 8003428:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800342c:	4214      	tst	r4, r2
 800342e:	d002      	beq.n	8003436 <limits_go_home+0x33e>
            if (limit_state & (1 << idx)) {
 8003430:	0759      	lsls	r1, r3, #29
                axislock &= ~(step_pin[idx]);
 8003432:	bf48      	it	mi
 8003434:	4394      	bicmi	r4, r2
          if (axislock & step_pin[idx]) {
 8003436:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800343a:	4214      	tst	r4, r2
 800343c:	d002      	beq.n	8003444 <limits_go_home+0x34c>
            if (limit_state & (1 << idx)) {
 800343e:	08db      	lsrs	r3, r3, #3
                axislock &= ~(step_pin[idx]);
 8003440:	bf18      	it	ne
 8003442:	4394      	bicne	r4, r2
        sys.homing_axis_lock = axislock;
 8003444:	f8a8 4006 	strh.w	r4, [r8, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8003448:	f005 f9b4 	bl	80087b4 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 800344c:	783b      	ldrb	r3, [r7, #0]
 800344e:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003452:	f43f af25 	beq.w	80032a0 <limits_go_home+0x1a8>
        uint8_t rt_exec = sys_rt_exec_state;
 8003456:	783c      	ldrb	r4, [r7, #0]
 8003458:	b2e4      	uxtb	r4, r4
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 800345a:	06e3      	lsls	r3, r4, #27
 800345c:	d463      	bmi.n	8003526 <limits_go_home+0x42e>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 800345e:	06a0      	lsls	r0, r4, #26
 8003460:	d40b      	bmi.n	800347a <limits_go_home+0x382>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8003462:	b17d      	cbz	r5, 8003484 <limits_go_home+0x38c>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8003464:	0762      	lsls	r2, r4, #29
 8003466:	d462      	bmi.n	800352e <limits_go_home+0x436>
        if (sys_rt_exec_alarm) {
 8003468:	4b4a      	ldr	r3, [pc, #296]	; (8003594 <limits_go_home+0x49c>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f040 808c 	bne.w	800358a <limits_go_home+0x492>
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8003472:	2004      	movs	r0, #4
 8003474:	f006 fa42 	bl	80098fc <system_clear_exec_state_flag>
          break;
 8003478:	e714      	b.n	80032a4 <limits_go_home+0x1ac>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 800347a:	2007      	movs	r0, #7
 800347c:	f006 fa48 	bl	8009910 <system_set_exec_alarm>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8003480:	2d00      	cmp	r5, #0
 8003482:	d1ef      	bne.n	8003464 <limits_go_home+0x36c>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003484:	4844      	ldr	r0, [pc, #272]	; (8003598 <limits_go_home+0x4a0>)
 8003486:	f7fe f91f 	bl	80016c8 <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 800348a:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800348e:	0659      	lsls	r1, r3, #25
 8003490:	bf5c      	itt	pl
 8003492:	f480 401c 	eorpl.w	r0, r0, #39936	; 0x9c00
 8003496:	b280      	uxthpl	r0, r0
  if (pin) {
 8003498:	2800      	cmp	r0, #0
 800349a:	d0e5      	beq.n	8003468 <limits_go_home+0x370>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800349c:	f8b9 3000 	ldrh.w	r3, [r9]
 80034a0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 80034a4:	4218      	tst	r0, r3
 80034a6:	bf14      	ite	ne
 80034a8:	2301      	movne	r3, #1
 80034aa:	2300      	moveq	r3, #0
 80034ac:	4210      	tst	r0, r2
 80034ae:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 80034b2:	bf18      	it	ne
 80034b4:	f043 0302 	orrne.w	r3, r3, #2
 80034b8:	4210      	tst	r0, r2
 80034ba:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 80034be:	bf18      	it	ne
 80034c0:	f043 0304 	orrne.w	r3, r3, #4
 80034c4:	4210      	tst	r0, r2
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80034c6:	9a07      	ldr	r2, [sp, #28]
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80034c8:	bf18      	it	ne
 80034ca:	f043 0308 	orrne.w	r3, r3, #8
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80034ce:	421a      	tst	r2, r3
 80034d0:	d0ca      	beq.n	8003468 <limits_go_home+0x370>
 80034d2:	2008      	movs	r0, #8
 80034d4:	f006 fa1c 	bl	8009910 <system_set_exec_alarm>
 80034d8:	e7c6      	b.n	8003468 <limits_go_home+0x370>
 80034da:	461c      	mov	r4, r3
    n_active_axis = 0;
 80034dc:	4618      	mov	r0, r3
      if (bit_istrue(cycle_mask,bit(idx))) {
 80034de:	2201      	movs	r2, #1
 80034e0:	e682      	b.n	80031e8 <limits_go_home+0xf0>
      max_travel = settings.homing_pulloff;
 80034e2:	f8d6 b068 	ldr.w	fp, [r6, #104]	; 0x68
      homing_rate = settings.homing_seek_rate;
 80034e6:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80034e8:	465a      	mov	r2, fp
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	e6ef      	b.n	80032ce <limits_go_home+0x1d6>
          if (approach) { target[idx] = max_travel; }
 80034ee:	2d00      	cmp	r5, #0
 80034f0:	f47f aeb0 	bne.w	8003254 <limits_go_home+0x15c>
          if (approach) { target[idx] = -max_travel; }
 80034f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80034f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80034fa:	e6ad      	b.n	8003258 <limits_go_home+0x160>
          if (approach) { target[idx] = max_travel; }
 80034fc:	2d00      	cmp	r5, #0
 80034fe:	f47f ae80 	bne.w	8003202 <limits_go_home+0x10a>
          if (approach) { target[idx] = -max_travel; }
 8003502:	f10b 4100 	add.w	r1, fp, #2147483648	; 0x80000000
 8003506:	9111      	str	r1, [sp, #68]	; 0x44
 8003508:	e67d      	b.n	8003206 <limits_go_home+0x10e>
          if (approach) { target[idx] = max_travel; }
 800350a:	2d00      	cmp	r5, #0
 800350c:	f47f ae66 	bne.w	80031dc <limits_go_home+0xe4>
          if (approach) { target[idx] = -max_travel; }
 8003510:	f10b 4200 	add.w	r2, fp, #2147483648	; 0x80000000
 8003514:	9210      	str	r2, [sp, #64]	; 0x40
 8003516:	e663      	b.n	80031e0 <limits_go_home+0xe8>
          if (approach) { target[idx] = max_travel; }
 8003518:	2d00      	cmp	r5, #0
 800351a:	f47f ae87 	bne.w	800322c <limits_go_home+0x134>
          if (approach) { target[idx] = -max_travel; }
 800351e:	f10b 4200 	add.w	r2, fp, #2147483648	; 0x80000000
 8003522:	9212      	str	r2, [sp, #72]	; 0x48
 8003524:	e684      	b.n	8003230 <limits_go_home+0x138>
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003526:	2006      	movs	r0, #6
 8003528:	f006 f9f2 	bl	8009910 <system_set_exec_alarm>
 800352c:	e797      	b.n	800345e <limits_go_home+0x366>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 800352e:	2009      	movs	r0, #9
 8003530:	f006 f9ee 	bl	8009910 <system_set_exec_alarm>
 8003534:	e798      	b.n	8003468 <limits_go_home+0x370>
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8003536:	4611      	mov	r1, r2
 8003538:	4628      	mov	r0, r5
 800353a:	9201      	str	r2, [sp, #4]
 800353c:	f7fd fbbc 	bl	8000cb8 <__aeabi_fmul>
 8003540:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003544:	f007 fde4 	bl	800b110 <lroundf>
 8003548:	9a01      	ldr	r2, [sp, #4]
 800354a:	e6db      	b.n	8003304 <limits_go_home+0x20c>
 800354c:	4611      	mov	r1, r2
 800354e:	4628      	mov	r0, r5
 8003550:	f7fd fbb2 	bl	8000cb8 <__aeabi_fmul>
 8003554:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003558:	f007 fdda 	bl	800b110 <lroundf>
 800355c:	e709      	b.n	8003372 <limits_go_home+0x27a>
 800355e:	4610      	mov	r0, r2
 8003560:	4629      	mov	r1, r5
 8003562:	9201      	str	r2, [sp, #4]
 8003564:	f7fd fba8 	bl	8000cb8 <__aeabi_fmul>
 8003568:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800356c:	f007 fdd0 	bl	800b110 <lroundf>
 8003570:	9a01      	ldr	r2, [sp, #4]
 8003572:	e6da      	b.n	800332a <limits_go_home+0x232>
 8003574:	4610      	mov	r0, r2
 8003576:	4629      	mov	r1, r5
 8003578:	9201      	str	r2, [sp, #4]
 800357a:	f7fd fb9d 	bl	8000cb8 <__aeabi_fmul>
 800357e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003582:	f007 fdc5 	bl	800b110 <lroundf>
 8003586:	9a01      	ldr	r2, [sp, #4]
 8003588:	e6e2      	b.n	8003350 <limits_go_home+0x258>
          mc_reset(); // Stop motors, if they are running.
 800358a:	f000 fbe1 	bl	8003d50 <mc_reset>
          protocol_execute_realtime();
 800358e:	f002 faa7 	bl	8005ae0 <protocol_execute_realtime>
          return;
 8003592:	e5b9      	b.n	8003108 <limits_go_home+0x10>
 8003594:	20001428 	.word	0x20001428
 8003598:	40010c00 	.word	0x40010c00

0800359c <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 800359c:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 800359e:	f006 f969 	bl	8009874 <system_check_travel_limits>
 80035a2:	b1c8      	cbz	r0, 80035d8 <limits_soft_check+0x3c>
    sys.soft_limit = true;
 80035a4:	2301      	movs	r3, #1
 80035a6:	4c0d      	ldr	r4, [pc, #52]	; (80035dc <limits_soft_check+0x40>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 80035a8:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 80035aa:	70e3      	strb	r3, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 80035ac:	2808      	cmp	r0, #8
 80035ae:	d008      	beq.n	80035c2 <limits_soft_check+0x26>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 80035b0:	f000 fbce 	bl	8003d50 <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 80035b4:	2002      	movs	r0, #2
 80035b6:	f006 f9ab 	bl	8009910 <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 80035ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 80035be:	f002 ba8f 	b.w	8005ae0 <protocol_execute_realtime>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 80035c2:	f006 f991 	bl	80098e8 <system_set_exec_state_flag>
 80035c6:	e002      	b.n	80035ce <limits_soft_check+0x32>
      } while ( sys.state != STATE_IDLE );
 80035c8:	7823      	ldrb	r3, [r4, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <limits_soft_check+0x14>
        protocol_execute_realtime();
 80035ce:	f002 fa87 	bl	8005ae0 <protocol_execute_realtime>
        if (sys.abort) { return; }
 80035d2:	7863      	ldrb	r3, [r4, #1]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f7      	beq.n	80035c8 <limits_soft_check+0x2c>
}
 80035d8:	bd10      	pop	{r4, pc}
 80035da:	bf00      	nop
 80035dc:	200013f0 	.word	0x200013f0

080035e0 <main>:
#ifdef WIN32
int main(int argc, char *argv[])
#else
int main(void)
#endif
{
 80035e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined (STM32F103C8)
    //GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // ??? Disable JTAG and SWD!?? Bug?
#ifdef LEDBLINK
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80035e4:	2101      	movs	r1, #1
{
 80035e6:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80035e8:	2010      	movs	r0, #16
 80035ea:	f7fe f8d3 	bl	8001794 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80035ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80035f2:	2202      	movs	r2, #2
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80035f4:	2310      	movs	r3, #16
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80035f6:	a902      	add	r1, sp, #8
 80035f8:	f821 0d04 	strh.w	r0, [r1, #-4]!
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80035fc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003600:	f500 4070 	add.w	r0, r0, #61440	; 0xf000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8003604:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003608:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800360c:	f7fd fed6 	bl	80013bc <GPIO_Init>
#endif
	//Set_System();
#ifndef USEUSB
	USART1_Configuration(115200);
#else
	Set_USBClock();
 8003610:	f007 f904 	bl	800a81c <Set_USBClock>
	USB_Interrupts_Config();
 8003614:	f007 f90e 	bl	800a834 <USB_Interrupts_Config>
	USB_Init();
 8003618:	f006 feb4 	bl	800a384 <USB_Init>
#endif

#ifndef NOEEPROMSUPPORT
	FLASH_Unlock();
 800361c:	f7fd fdf6 	bl	800120c <FLASH_Unlock>
	eeprom_init();
 8003620:	f7fe fa42 	bl	8001aa8 <eeprom_init>
#endif
	SysTick->CTRL &= 0xfffffffb;
 8003624:	4a2a      	ldr	r2, [pc, #168]	; (80036d0 <main+0xf0>)

    // Reset system variables.
    uint8_t prior_state = sys.state;
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
    sys.state = prior_state;
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8003626:	f246 4b64 	movw	fp, #25700	; 0x6464
	SysTick->CTRL &= 0xfffffffb;
 800362a:	6813      	ldr	r3, [r2, #0]
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 800362c:	f04f 0a64 	mov.w	sl, #100	; 0x64
	SysTick->CTRL &= 0xfffffffb;
 8003630:	f023 0304 	bic.w	r3, r3, #4
 8003634:	6013      	str	r3, [r2, #0]
  serial_init();   // Setup serial baud rate and interrupts
 8003636:	f003 fe9b 	bl	8007370 <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 800363a:	f004 fa37 	bl	8007aac <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 800363e:	f004 fff1 	bl	8008624 <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 8003642:	f005 fe95 	bl	8009370 <system_init>
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8003646:	2000      	movs	r0, #0
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003648:	4604      	mov	r4, r0
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 800364a:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <main+0xf4>)
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 800364c:	4d22      	ldr	r5, [pc, #136]	; (80036d8 <main+0xf8>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 800364e:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8003652:	e9c5 0000 	strd	r0, r0, [r5]
 8003656:	e9c5 0002 	strd	r0, r0, [r5, #8]
    sys.state = STATE_IDLE;
 800365a:	4f20      	ldr	r7, [pc, #128]	; (80036dc <main+0xfc>)
 800365c:	4e20      	ldr	r6, [pc, #128]	; (80036e0 <main+0x100>)
 800365e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80036f0 <main+0x110>
 8003662:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80036f4 <main+0x114>
 8003666:	4d1f      	ldr	r5, [pc, #124]	; (80036e4 <main+0x104>)
 8003668:	f3c1 1100 	ubfx	r1, r1, #4, #1
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
    sys_probe_state = 0;
    sys_rt_exec_state = 0;
    sys_rt_exec_alarm = 0;
 800366c:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <main+0x108>)
    sys_probe_state = 0;
 800366e:	f889 4000 	strb.w	r4, [r9]
    sys_rt_exec_state = 0;
 8003672:	f888 4000 	strb.w	r4, [r8]
    sys_rt_exec_alarm = 0;
 8003676:	701c      	strb	r4, [r3, #0]
    sys_rt_exec_motion_override = 0;
 8003678:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <main+0x10c>)
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800367a:	60bc      	str	r4, [r7, #8]
 800367c:	603c      	str	r4, [r7, #0]
 800367e:	607c      	str	r4, [r7, #4]
 8003680:	e9c7 4403 	strd	r4, r4, [r7, #12]
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8003684:	f8a7 b008 	strh.w	fp, [r7, #8]
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 8003688:	f887 a00a 	strb.w	sl, [r7, #10]
    sys_rt_exec_motion_override = 0;
 800368c:	701c      	strb	r4, [r3, #0]
    sys.state = prior_state;
 800368e:	7039      	strb	r1, [r7, #0]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8003690:	e9c6 4400 	strd	r4, r4, [r6]
 8003694:	e9c6 4402 	strd	r4, r4, [r6, #8]
    sys_rt_exec_accessory_override = 0;
 8003698:	702c      	strb	r4, [r5, #0]

    // Reset Grbl primary systems.
    serial_reset_read_buffer(); // Clear serial read buffer
 800369a:	f003 ff81 	bl	80075a0 <serial_reset_read_buffer>
    gc_init(); // Set g-code parser to default state
 800369e:	f7fe faa1 	bl	8001be4 <gc_init>
    spindle_init();
 80036a2:	f004 fab3 	bl	8007c0c <spindle_init>
    coolant_init();
 80036a6:	f7fe f95f 	bl	8001968 <coolant_init>
    limits_init();
 80036aa:	f7ff fc57 	bl	8002f5c <limits_init>
    probe_init();
 80036ae:	f001 fca1 	bl	8004ff4 <probe_init>
    plan_reset(); // Clear block buffer and planner variables
 80036b2:	f000 fe15 	bl	80042e0 <plan_reset>
    st_reset(); // Clear stepper subsystem variables.
 80036b6:	f004 ff15 	bl	80084e4 <st_reset>

    // Sync cleared gcode and planner positions to current system position.
    plan_sync_position();
 80036ba:	f001 f997 	bl	80049ec <plan_sync_position>
    gc_sync_position();
 80036be:	f7fe faa7 	bl	8001c10 <gc_sync_position>

    // Print welcome message. Indicates an initialization has occured at power-up or with a reset.
    report_init_message();
 80036c2:	f002 ff67 	bl	8006594 <report_init_message>

    // Start Grbl main loop. Processes program inputs and executes them.
    protocol_main_loop();
 80036c6:	f002 fe1d 	bl	8006304 <protocol_main_loop>
 80036ca:	7839      	ldrb	r1, [r7, #0]
 80036cc:	e7ce      	b.n	800366c <main+0x8c>
 80036ce:	bf00      	nop
 80036d0:	e000e010 	.word	0xe000e010
 80036d4:	200015ac 	.word	0x200015ac
 80036d8:	20001418 	.word	0x20001418
 80036dc:	200013f0 	.word	0x200013f0
 80036e0:	20001408 	.word	0x20001408
 80036e4:	20001404 	.word	0x20001404
 80036e8:	20001428 	.word	0x20001428
 80036ec:	200013ec 	.word	0x200013ec
 80036f0:	20001406 	.word	0x20001406
 80036f4:	20001405 	.word	0x20001405

080036f8 <_delay_ms>:
}
#if defined (STM32F103C8)
void _delay_ms(uint32_t x)
{
	u32 temp;
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 80036f8:	f242 3128 	movw	r1, #9000	; 0x2328
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <_delay_ms+0x2c>)
{
 80036fe:	b430      	push	{r4, r5}
	SysTick->VAL = 0x00;                                            // Empty the counter
 8003700:	2500      	movs	r5, #0
	SysTick->CTRL = 0x01;                                           // Start from bottom
 8003702:	2401      	movs	r4, #1
	do
	{
		temp = SysTick->CTRL;
 8003704:	461a      	mov	r2, r3
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 8003706:	fb01 f000 	mul.w	r0, r1, r0
 800370a:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0x00;                                            // Empty the counter
 800370c:	609d      	str	r5, [r3, #8]
	SysTick->CTRL = 0x01;                                           // Start from bottom
 800370e:	601c      	str	r4, [r3, #0]
		temp = SysTick->CTRL;
 8003710:	6813      	ldr	r3, [r2, #0]
	} while ((temp & 0x01) && !(temp&(1 << 16)));                             // Wait time arrive
 8003712:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8003716:	2b01      	cmp	r3, #1
 8003718:	d0fa      	beq.n	8003710 <_delay_ms+0x18>
	SysTick->CTRL = 0x00;                                            // Close the counter
	SysTick->VAL = 0X00;                                            // Empty the counter
}
 800371a:	bc30      	pop	{r4, r5}
	SysTick->CTRL = 0x00;                                            // Close the counter
 800371c:	2300      	movs	r3, #0
 800371e:	6013      	str	r3, [r2, #0]
	SysTick->VAL = 0X00;                                            // Empty the counter
 8003720:	6093      	str	r3, [r2, #8]
}
 8003722:	4770      	bx	lr
 8003724:	e000e010 	.word	0xe000e010

08003728 <LedBlink>:
void LedBlink(void)
{
 8003728:	b510      	push	{r4, lr}
	static BitAction nOnFlag = Bit_SET;
	GPIO_WriteBit(GPIOC, GPIO_Pin_13, nOnFlag);
 800372a:	4c07      	ldr	r4, [pc, #28]	; (8003748 <LedBlink+0x20>)
 800372c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003730:	7822      	ldrb	r2, [r4, #0]
 8003732:	4806      	ldr	r0, [pc, #24]	; (800374c <LedBlink+0x24>)
 8003734:	f7fd ffd4 	bl	80016e0 <GPIO_WriteBit>
	nOnFlag = (nOnFlag == Bit_SET) ? Bit_RESET : Bit_SET;
 8003738:	7823      	ldrb	r3, [r4, #0]
 800373a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800373e:	bf18      	it	ne
 8003740:	2301      	movne	r3, #1
 8003742:	7023      	strb	r3, [r4, #0]
}
 8003744:	bd10      	pop	{r4, pc}
 8003746:	bf00      	nop
 8003748:	20000000 	.word	0x20000000
 800374c:	40011000 	.word	0x40011000

08003750 <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003752:	4d17      	ldr	r5, [pc, #92]	; (80037b0 <mc_line+0x60>)
 8003754:	4c17      	ldr	r4, [pc, #92]	; (80037b4 <mc_line+0x64>)
 8003756:	f895 2058 	ldrb.w	r2, [r5, #88]	; 0x58
{
 800375a:	460e      	mov	r6, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 800375c:	0691      	lsls	r1, r2, #26
 800375e:	7823      	ldrb	r3, [r4, #0]
{
 8003760:	4607      	mov	r7, r0
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003762:	d504      	bpl.n	800376e <mc_line+0x1e>
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003764:	2b20      	cmp	r3, #32
 8003766:	d00a      	beq.n	800377e <mc_line+0x2e>
 8003768:	f7ff ff18 	bl	800359c <limits_soft_check>
 800376c:	7823      	ldrb	r3, [r4, #0]
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 800376e:	2b02      	cmp	r3, #2
 8003770:	d105      	bne.n	800377e <mc_line+0x2e>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
			}
		}
	}
}
 8003772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003774:	f000 fe26 	bl	80043c4 <plan_check_full_buffer>
 8003778:	b138      	cbz	r0, 800378a <mc_line+0x3a>
 800377a:	f001 fca9 	bl	80050d0 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 800377e:	f002 f9af 	bl	8005ae0 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003782:	7863      	ldrb	r3, [r4, #1]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f5      	beq.n	8003774 <mc_line+0x24>
 8003788:	e7f3      	b.n	8003772 <mc_line+0x22>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 800378a:	4638      	mov	r0, r7
 800378c:	4631      	mov	r1, r6
 800378e:	f000 fed9 	bl	8004544 <plan_buffer_line>
 8003792:	2800      	cmp	r0, #0
 8003794:	d1ed      	bne.n	8003772 <mc_line+0x22>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003796:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 800379a:	079a      	lsls	r2, r3, #30
 800379c:	d5e9      	bpl.n	8003772 <mc_line+0x22>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 800379e:	7a33      	ldrb	r3, [r6, #8]
 80037a0:	06db      	lsls	r3, r3, #27
 80037a2:	d5e6      	bpl.n	8003772 <mc_line+0x22>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 80037a4:	6871      	ldr	r1, [r6, #4]
 80037a6:	2010      	movs	r0, #16
}
 80037a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 80037ac:	f004 bbc6 	b.w	8007f3c <spindle_sync>
 80037b0:	200015ac 	.word	0x200015ac
 80037b4:	200013f0 	.word	0x200013f0

080037b8 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	461f      	mov	r7, r3
 80037be:	b091      	sub	sp, #68	; 0x44
 80037c0:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 80037c4:	4683      	mov	fp, r0
  float center_axis0 = position[axis_0] + offset[axis_0];
 80037c6:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80037ca:	00a3      	lsls	r3, r4, #2
 80037cc:	18d6      	adds	r6, r2, r3
{
 80037ce:	900f      	str	r0, [sp, #60]	; 0x3c
  float center_axis0 = position[axis_0] + offset[axis_0];
 80037d0:	18fb      	adds	r3, r7, r3
{
 80037d2:	910b      	str	r1, [sp, #44]	; 0x2c
  float center_axis0 = position[axis_0] + offset[axis_0];
 80037d4:	4628      	mov	r0, r5
 80037d6:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 80037da:	9206      	str	r2, [sp, #24]
 80037dc:	9602      	str	r6, [sp, #8]
 80037de:	930c      	str	r3, [sp, #48]	; 0x30
 80037e0:	f7fd f962 	bl	8000aa8 <__addsf3>
{
 80037e4:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
  float center_axis1 = position[axis_1] + offset[axis_1];
 80037e8:	9a06      	ldr	r2, [sp, #24]
 80037ea:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
 80037ee:	00b3      	lsls	r3, r6, #2
 80037f0:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
  float center_axis0 = position[axis_0] + offset[axis_0];
 80037f4:	4682      	mov	sl, r0
  float center_axis1 = position[axis_1] + offset[axis_1];
 80037f6:	441f      	add	r7, r3
  float center_axis0 = position[axis_0] + offset[axis_0];
 80037f8:	9004      	str	r0, [sp, #16]
  float center_axis1 = position[axis_1] + offset[axis_1];
 80037fa:	18d3      	adds	r3, r2, r3
 80037fc:	4640      	mov	r0, r8
 80037fe:	9303      	str	r3, [sp, #12]
 8003800:	970d      	str	r7, [sp, #52]	; 0x34
 8003802:	f7fd f951 	bl	8000aa8 <__addsf3>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
 8003806:	4651      	mov	r1, sl
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003808:	4681      	mov	r9, r0
 800380a:	9005      	str	r0, [sp, #20]
  float rt_axis0 = target[axis_0] - center_axis0;
 800380c:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 8003810:	f7fd f948 	bl	8000aa4 <__aeabi_fsub>
  float rt_axis1 = target[axis_1] - center_axis1;
 8003814:	4649      	mov	r1, r9
  float rt_axis0 = target[axis_0] - center_axis0;
 8003816:	4604      	mov	r4, r0
  float rt_axis1 = target[axis_1] - center_axis1;
 8003818:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 800381c:	f7fd f942 	bl	8000aa4 <__aeabi_fsub>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 8003820:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  float rt_axis1 = target[axis_1] - center_axis1;
 8003824:	4606      	mov	r6, r0

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003826:	4621      	mov	r1, r4
 8003828:	4628      	mov	r0, r5
 800382a:	f7fd fa45 	bl	8000cb8 <__aeabi_fmul>
  float r_axis1 = -offset[axis_1];
 800382e:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003832:	4607      	mov	r7, r0
 8003834:	4631      	mov	r1, r6
 8003836:	4640      	mov	r0, r8
 8003838:	f7fd fa3e 	bl	8000cb8 <__aeabi_fmul>
 800383c:	4601      	mov	r1, r0
 800383e:	4638      	mov	r0, r7
 8003840:	f7fd f932 	bl	8000aa8 <__addsf3>
 8003844:	4631      	mov	r1, r6
 8003846:	4607      	mov	r7, r0
 8003848:	4628      	mov	r0, r5
 800384a:	f7fd fa35 	bl	8000cb8 <__aeabi_fmul>
 800384e:	4621      	mov	r1, r4
 8003850:	4606      	mov	r6, r0
 8003852:	4640      	mov	r0, r8
 8003854:	f7fd fa30 	bl	8000cb8 <__aeabi_fmul>
 8003858:	4601      	mov	r1, r0
 800385a:	4630      	mov	r0, r6
 800385c:	f7fd f922 	bl	8000aa4 <__aeabi_fsub>
 8003860:	4639      	mov	r1, r7
 8003862:	f007 fcb7 	bl	800b1d4 <atan2f>
 8003866:	4604      	mov	r4, r0
 8003868:	f7fc fdd6 	bl	8000418 <__aeabi_f2d>
{
 800386c:	f89d b078 	ldrb.w	fp, [sp, #120]	; 0x78
 8003870:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8003874:	4606      	mov	r6, r0
 8003876:	460f      	mov	r7, r1
 8003878:	f89d a074 	ldrb.w	sl, [sp, #116]	; 0x74
  if (is_clockwise_arc) { // Correct atan2 output per direction
 800387c:	f1bb 0f00 	cmp.w	fp, #0
 8003880:	f000 815e 	beq.w	8003b40 <mc_arc+0x388>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003884:	a3a8      	add	r3, pc, #672	; (adr r3, 8003b28 <mc_arc+0x370>)
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f7fd f8a3 	bl	80009d4 <__aeabi_dcmpge>
 800388e:	2800      	cmp	r0, #0
 8003890:	f040 8174 	bne.w	8003b7c <mc_arc+0x3c4>
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003894:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 8003b3c <mc_arc+0x384>
 8003898:	4649      	mov	r1, r9
 800389a:	f8db 604c 	ldr.w	r6, [fp, #76]	; 0x4c
 800389e:	4648      	mov	r0, r9
 80038a0:	f7fd f902 	bl	8000aa8 <__addsf3>
 80038a4:	4631      	mov	r1, r6
 80038a6:	f7fd f8fd 	bl	8000aa4 <__aeabi_fsub>
 80038aa:	4631      	mov	r1, r6
 80038ac:	f7fd fa04 	bl	8000cb8 <__aeabi_fmul>
 80038b0:	f007 fc92 	bl	800b1d8 <sqrtf>
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 80038b4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 80038b8:	4606      	mov	r6, r0
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 80038ba:	4648      	mov	r0, r9
 80038bc:	f7fd f9fc 	bl	8000cb8 <__aeabi_fmul>
 80038c0:	4621      	mov	r1, r4
 80038c2:	f7fd f9f9 	bl	8000cb8 <__aeabi_fmul>
 80038c6:	4631      	mov	r1, r6
 80038c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80038cc:	f7fd faa8 	bl	8000e20 <__aeabi_fdiv>
 80038d0:	f007 fbde 	bl	800b090 <floorf>
 80038d4:	f7fd fbf2 	bl	80010bc <__aeabi_f2uiz>
 80038d8:	b283      	uxth	r3, r0
 80038da:	9301      	str	r3, [sp, #4]

  if (segments) {
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8158 	beq.w	8003b92 <mc_arc+0x3da>
 80038e2:	4618      	mov	r0, r3
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 80038e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038e6:	7a1e      	ldrb	r6, [r3, #8]
 80038e8:	f7fd f992 	bl	8000c10 <__aeabi_i2f>
 80038ec:	0731      	lsls	r1, r6, #28
 80038ee:	4607      	mov	r7, r0
 80038f0:	f100 8139 	bmi.w	8003b66 <mc_arc+0x3ae>
 80038f4:	4639      	mov	r1, r7
 80038f6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80038fa:	f7fd fa91 	bl	8000e20 <__aeabi_fdiv>
 80038fe:	4606      	mov	r6, r0
      pl_data->feed_rate *= segments; 
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
    }
    
    float theta_per_segment = angular_travel/segments;
 8003900:	4601      	mov	r1, r0
 8003902:	4620      	mov	r0, r4
 8003904:	f7fd f9d8 	bl	8000cb8 <__aeabi_fmul>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800390a:	9f06      	ldr	r7, [sp, #24]
    float theta_per_segment = angular_travel/segments;
 800390c:	4681      	mov	r9, r0
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 800390e:	f857 102a 	ldr.w	r1, [r7, sl, lsl #2]
    float theta_per_segment = angular_travel/segments;
 8003912:	900e      	str	r0, [sp, #56]	; 0x38
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003914:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003918:	f7fd f8c4 	bl	8000aa4 <__aeabi_fsub>
 800391c:	4631      	mov	r1, r6
 800391e:	f7fd f9cb 	bl	8000cb8 <__aeabi_fmul>
       without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003922:	4649      	mov	r1, r9
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003924:	9007      	str	r0, [sp, #28]
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003926:	4648      	mov	r0, r9
 8003928:	f7fd f9c6 	bl	8000cb8 <__aeabi_fmul>
 800392c:	4604      	mov	r4, r0
 800392e:	4601      	mov	r1, r0
 8003930:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003934:	f7fd f8b6 	bl	8000aa4 <__aeabi_fsub>
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003938:	4621      	mov	r1, r4
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 800393a:	4606      	mov	r6, r0
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 800393c:	487c      	ldr	r0, [pc, #496]	; (8003b30 <mc_arc+0x378>)
 800393e:	f7fd f8b1 	bl	8000aa4 <__aeabi_fsub>
 8003942:	497c      	ldr	r1, [pc, #496]	; (8003b34 <mc_arc+0x37c>)
 8003944:	4604      	mov	r4, r0
 8003946:	4648      	mov	r0, r9
 8003948:	f7fd f9b6 	bl	8000cb8 <__aeabi_fmul>
 800394c:	4601      	mov	r1, r0
 800394e:	4620      	mov	r0, r4
 8003950:	f7fd f9b2 	bl	8000cb8 <__aeabi_fmul>
    cos_T *= 0.5;
 8003954:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003958:	9008      	str	r0, [sp, #32]
    cos_T *= 0.5;
 800395a:	4630      	mov	r0, r6
 800395c:	f7fd f9ac 	bl	8000cb8 <__aeabi_fmul>
    float cos_Ti;
    float r_axisi;
    uint16_t i;
    uint8_t count = 0;

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003960:	9b01      	ldr	r3, [sp, #4]
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003962:	eb07 078a 	add.w	r7, r7, sl, lsl #2
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003966:	2b01      	cmp	r3, #1
    cos_T *= 0.5;
 8003968:	9009      	str	r0, [sp, #36]	; 0x24
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 800396a:	f000 8112 	beq.w	8003b92 <mc_arc+0x3da>
 800396e:	2601      	movs	r6, #1
    uint8_t count = 0;
 8003970:	f04f 0900 	mov.w	r9, #0
 8003974:	4c70      	ldr	r4, [pc, #448]	; (8003b38 <mc_arc+0x380>)

      if (count < N_ARC_CORRECTION) {
 8003976:	f1b9 0f0b 	cmp.w	r9, #11
 800397a:	f200 809f 	bhi.w	8003abc <mc_arc+0x304>
        // Apply vector rotation matrix. ~40 usec
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 800397e:	4629      	mov	r1, r5
 8003980:	9808      	ldr	r0, [sp, #32]
 8003982:	f7fd f999 	bl	8000cb8 <__aeabi_fmul>
 8003986:	4641      	mov	r1, r8
 8003988:	4682      	mov	sl, r0
 800398a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800398c:	f7fd f994 	bl	8000cb8 <__aeabi_fmul>
 8003990:	4601      	mov	r1, r0
 8003992:	4650      	mov	r0, sl
 8003994:	f7fd f888 	bl	8000aa8 <__addsf3>
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003998:	4629      	mov	r1, r5
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 800399a:	4682      	mov	sl, r0
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 800399c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800399e:	f7fd f98b 	bl	8000cb8 <__aeabi_fmul>
 80039a2:	4641      	mov	r1, r8
 80039a4:	4605      	mov	r5, r0
 80039a6:	9808      	ldr	r0, [sp, #32]
 80039a8:	f7fd f986 	bl	8000cb8 <__aeabi_fmul>
 80039ac:	4601      	mov	r1, r0
 80039ae:	4628      	mov	r0, r5
 80039b0:	f7fd f878 	bl	8000aa4 <__aeabi_fsub>
        r_axis1 = r_axisi;
 80039b4:	46d0      	mov	r8, sl
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 80039b6:	4605      	mov	r5, r0
        count++;
 80039b8:	f109 0901 	add.w	r9, r9, #1
 80039bc:	fa5f f989 	uxtb.w	r9, r9
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
        count = 0;
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 80039c0:	9904      	ldr	r1, [sp, #16]
 80039c2:	4628      	mov	r0, r5
 80039c4:	f7fd f870 	bl	8000aa8 <__addsf3>
 80039c8:	9b02      	ldr	r3, [sp, #8]
      position[axis_1] = center_axis1 + r_axis1;
 80039ca:	9905      	ldr	r1, [sp, #20]
      position[axis_0] = center_axis0 + r_axis0;
 80039cc:	6018      	str	r0, [r3, #0]
      position[axis_1] = center_axis1 + r_axis1;
 80039ce:	4640      	mov	r0, r8
 80039d0:	f7fd f86a 	bl	8000aa8 <__addsf3>
 80039d4:	9b03      	ldr	r3, [sp, #12]
      position[axis_linear] += linear_per_segment;
 80039d6:	9907      	ldr	r1, [sp, #28]
      position[axis_1] = center_axis1 + r_axis1;
 80039d8:	6018      	str	r0, [r3, #0]
      position[axis_linear] += linear_per_segment;
 80039da:	6838      	ldr	r0, [r7, #0]
 80039dc:	f7fd f864 	bl	8000aa8 <__addsf3>
 80039e0:	6038      	str	r0, [r7, #0]
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80039e2:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80039e6:	069a      	lsls	r2, r3, #26
 80039e8:	d505      	bpl.n	80039f6 <mc_arc+0x23e>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 80039ea:	7823      	ldrb	r3, [r4, #0]
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d00b      	beq.n	8003a08 <mc_arc+0x250>
 80039f0:	9806      	ldr	r0, [sp, #24]
 80039f2:	f7ff fdd3 	bl	800359c <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 80039f6:	7823      	ldrb	r3, [r4, #0]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d105      	bne.n	8003a08 <mc_arc+0x250>
 80039fc:	e020      	b.n	8003a40 <mc_arc+0x288>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 80039fe:	f000 fce1 	bl	80043c4 <plan_check_full_buffer>
 8003a02:	b148      	cbz	r0, 8003a18 <mc_arc+0x260>
 8003a04:	f001 fb64 	bl	80050d0 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003a08:	f002 f86a 	bl	8005ae0 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003a0c:	7863      	ldrb	r3, [r4, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f5      	beq.n	80039fe <mc_arc+0x246>
      if (sys.abort) { return; }
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
}
 8003a12:	b011      	add	sp, #68	; 0x44
 8003a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003a18:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003a1c:	9806      	ldr	r0, [sp, #24]
 8003a1e:	4651      	mov	r1, sl
 8003a20:	f000 fd90 	bl	8004544 <plan_buffer_line>
 8003a24:	b960      	cbnz	r0, 8003a40 <mc_arc+0x288>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003a26:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003a2a:	079b      	lsls	r3, r3, #30
 8003a2c:	d508      	bpl.n	8003a40 <mc_arc+0x288>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003a2e:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8003a32:	06d8      	lsls	r0, r3, #27
 8003a34:	d504      	bpl.n	8003a40 <mc_arc+0x288>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a38:	2010      	movs	r0, #16
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	f004 fa7e 	bl	8007f3c <spindle_sync>
      if (sys.abort) { return; }
 8003a40:	7863      	ldrb	r3, [r4, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e5      	bne.n	8003a12 <mc_arc+0x25a>
 8003a46:	3601      	adds	r6, #1
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003a48:	9a01      	ldr	r2, [sp, #4]
 8003a4a:	b2b3      	uxth	r3, r6
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d392      	bcc.n	8003976 <mc_arc+0x1be>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a50:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 8003a54:	7823      	ldrb	r3, [r4, #0]
 8003a56:	0691      	lsls	r1, r2, #26
 8003a58:	d505      	bpl.n	8003a66 <mc_arc+0x2ae>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d00f      	beq.n	8003a7e <mc_arc+0x2c6>
 8003a5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a60:	f7ff fd9c 	bl	800359c <limits_soft_check>
 8003a64:	7823      	ldrb	r3, [r4, #0]
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d0d3      	beq.n	8003a12 <mc_arc+0x25a>
    protocol_execute_realtime(); // Check for any run-time commands
 8003a6a:	f002 f839 	bl	8005ae0 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003a6e:	7863      	ldrb	r3, [r4, #1]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ce      	bne.n	8003a12 <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003a74:	f000 fca6 	bl	80043c4 <plan_check_full_buffer>
 8003a78:	b150      	cbz	r0, 8003a90 <mc_arc+0x2d8>
 8003a7a:	f001 fb29 	bl	80050d0 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003a7e:	f002 f82f 	bl	8005ae0 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003a82:	7863      	ldrb	r3, [r4, #1]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1c4      	bne.n	8003a12 <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003a88:	f000 fc9c 	bl	80043c4 <plan_check_full_buffer>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d1f4      	bne.n	8003a7a <mc_arc+0x2c2>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003a90:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003a92:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a94:	4621      	mov	r1, r4
 8003a96:	f000 fd55 	bl	8004544 <plan_buffer_line>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d1b9      	bne.n	8003a12 <mc_arc+0x25a>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003a9e:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003aa2:	079a      	lsls	r2, r3, #30
 8003aa4:	d5b5      	bpl.n	8003a12 <mc_arc+0x25a>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003aa6:	7a23      	ldrb	r3, [r4, #8]
 8003aa8:	06db      	lsls	r3, r3, #27
 8003aaa:	d5b2      	bpl.n	8003a12 <mc_arc+0x25a>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003aac:	2010      	movs	r0, #16
 8003aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ab0:	6859      	ldr	r1, [r3, #4]
}
 8003ab2:	b011      	add	sp, #68	; 0x44
 8003ab4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003ab8:	f004 ba40 	b.w	8007f3c <spindle_sync>
        cos_Ti = cosf(i*theta_per_segment);
 8003abc:	4630      	mov	r0, r6
 8003abe:	f7fd f8a7 	bl	8000c10 <__aeabi_i2f>
 8003ac2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003ac4:	f7fd f8f8 	bl	8000cb8 <__aeabi_fmul>
 8003ac8:	4605      	mov	r5, r0
 8003aca:	f007 faad 	bl	800b028 <cosf>
 8003ace:	4681      	mov	r9, r0
        sin_Ti = sinf(i*theta_per_segment);
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	f007 fb49 	bl	800b168 <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        sin_Ti = sinf(i*theta_per_segment);
 8003ad8:	4682      	mov	sl, r0
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4649      	mov	r1, r9
 8003ade:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	930a      	str	r3, [sp, #40]	; 0x28
 8003ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ae8:	f8d3 8000 	ldr.w	r8, [r3]
 8003aec:	f7fd f8e4 	bl	8000cb8 <__aeabi_fmul>
 8003af0:	4651      	mov	r1, sl
 8003af2:	4605      	mov	r5, r0
 8003af4:	4640      	mov	r0, r8
 8003af6:	f7fd f8df 	bl	8000cb8 <__aeabi_fmul>
 8003afa:	4601      	mov	r1, r0
 8003afc:	4628      	mov	r0, r5
 8003afe:	f7fc ffd3 	bl	8000aa8 <__addsf3>
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b04:	4651      	mov	r1, sl
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003b06:	4605      	mov	r5, r0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd f8d5 	bl	8000cb8 <__aeabi_fmul>
 8003b0e:	4649      	mov	r1, r9
 8003b10:	4682      	mov	sl, r0
 8003b12:	4640      	mov	r0, r8
 8003b14:	f7fd f8d0 	bl	8000cb8 <__aeabi_fmul>
 8003b18:	4601      	mov	r1, r0
 8003b1a:	4650      	mov	r0, sl
 8003b1c:	f7fc ffc2 	bl	8000aa4 <__aeabi_fsub>
        count = 0;
 8003b20:	f04f 0900 	mov.w	r9, #0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003b24:	4680      	mov	r8, r0
 8003b26:	e74b      	b.n	80039c0 <mc_arc+0x208>
 8003b28:	a0b5ed8d 	.word	0xa0b5ed8d
 8003b2c:	bea0c6f7 	.word	0xbea0c6f7
 8003b30:	40c00000 	.word	0x40c00000
 8003b34:	3e2aaaab 	.word	0x3e2aaaab
 8003b38:	200013f0 	.word	0x200013f0
 8003b3c:	200015ac 	.word	0x200015ac
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8003b40:	a319      	add	r3, pc, #100	; (adr r3, 8003ba8 <mc_arc+0x3f0>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f7fc ff3b 	bl	80009c0 <__aeabi_dcmple>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	f43f aea2 	beq.w	8003894 <mc_arc+0xdc>
 8003b50:	a317      	add	r3, pc, #92	; (adr r3, 8003bb0 <mc_arc+0x3f8>)
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	4630      	mov	r0, r6
 8003b58:	4639      	mov	r1, r7
 8003b5a:	f7fc faff 	bl	800015c <__adddf3>
 8003b5e:	f7fc ff4d 	bl	80009fc <__aeabi_d2f>
 8003b62:	4604      	mov	r4, r0
 8003b64:	e696      	b.n	8003894 <mc_arc+0xdc>
      pl_data->feed_rate *= segments; 
 8003b66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b68:	4601      	mov	r1, r0
 8003b6a:	6810      	ldr	r0, [r2, #0]
 8003b6c:	f7fd f8a4 	bl	8000cb8 <__aeabi_fmul>
 8003b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003b72:	f026 0608 	bic.w	r6, r6, #8
      pl_data->feed_rate *= segments; 
 8003b76:	6018      	str	r0, [r3, #0]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003b78:	721e      	strb	r6, [r3, #8]
 8003b7a:	e6bb      	b.n	80038f4 <mc_arc+0x13c>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003b7c:	a30c      	add	r3, pc, #48	; (adr r3, 8003bb0 <mc_arc+0x3f8>)
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	4630      	mov	r0, r6
 8003b84:	4639      	mov	r1, r7
 8003b86:	f7fc fae7 	bl	8000158 <__aeabi_dsub>
 8003b8a:	f7fc ff37 	bl	80009fc <__aeabi_d2f>
 8003b8e:	4604      	mov	r4, r0
 8003b90:	e680      	b.n	8003894 <mc_arc+0xdc>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003b92:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 8003b96:	4c08      	ldr	r4, [pc, #32]	; (8003bb8 <mc_arc+0x400>)
 8003b98:	0691      	lsls	r1, r2, #26
 8003b9a:	7823      	ldrb	r3, [r4, #0]
 8003b9c:	f57f af63 	bpl.w	8003a66 <mc_arc+0x2ae>
 8003ba0:	e75b      	b.n	8003a5a <mc_arc+0x2a2>
 8003ba2:	bf00      	nop
 8003ba4:	f3af 8000 	nop.w
 8003ba8:	a0b5ed8d 	.word	0xa0b5ed8d
 8003bac:	3ea0c6f7 	.word	0x3ea0c6f7
 8003bb0:	54442d18 	.word	0x54442d18
 8003bb4:	401921fb 	.word	0x401921fb
 8003bb8:	200013f0 	.word	0x200013f0

08003bbc <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <mc_dwell+0x20>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d009      	beq.n	8003bd8 <mc_dwell+0x1c>
{
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	4604      	mov	r4, r0
  protocol_buffer_synchronize();
 8003bc8:	f002 f978 	bl	8005ebc <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003bcc:	4620      	mov	r0, r4
}
 8003bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	f000 b972 	b.w	8003ebc <delay_sec>
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	200013f0 	.word	0x200013f0

08003be0 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 8003be0:	b508      	push	{r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 8003be2:	f7ff fa11 	bl	8003008 <limits_disable>
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
    else
  #endif
  {
    // Search to engage all axes limit switches at faster homing seek rate.
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 8003be6:	2004      	movs	r0, #4
 8003be8:	f7ff fa86 	bl	80030f8 <limits_go_home>
    #ifdef HOMING_CYCLE_1
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8003bec:	2003      	movs	r0, #3
 8003bee:	f7ff fa83 	bl	80030f8 <limits_go_home>
    #endif
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
 8003bf2:	2008      	movs	r0, #8
 8003bf4:	f7ff fa80 	bl	80030f8 <limits_go_home>
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 8003bf8:	f001 ff72 	bl	8005ae0 <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8003bfc:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <mc_homing_cycle+0x44>)
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	b103      	cbz	r3, 8003c04 <mc_homing_cycle+0x24>
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
	NVIC_EnableIRQ(EXTI15_10_IRQn);
#else
	limits_init();
#endif
}
 8003c02:	bd08      	pop	{r3, pc}
  gc_sync_position();
 8003c04:	f7fe f804 	bl	8001c10 <gc_sync_position>
  plan_sync_position();
 8003c08:	f000 fef0 	bl	80049ec <plan_sync_position>
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT));
 8003c0c:	f44f 401c 	mov.w	r0, #39936	; 0x9c00
 8003c10:	f7fd faf6 	bl	8001200 <EXTI_ClearITPendingBit>
 8003c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <mc_homing_cycle+0x48>)
 8003c1a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003c1e:	605a      	str	r2, [r3, #4]
}
 8003c20:	bd08      	pop	{r3, pc}
 8003c22:	bf00      	nop
 8003c24:	200013f0 	.word	0x200013f0
 8003c28:	e000e100 	.word	0xe000e100

08003c2c <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8003c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003c30:	4c42      	ldr	r4, [pc, #264]	; (8003d3c <mc_probe_cycle+0x110>)
 8003c32:	7823      	ldrb	r3, [r4, #0]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d032      	beq.n	8003c9e <mc_probe_cycle+0x72>
 8003c38:	4615      	mov	r5, r2
 8003c3a:	460f      	mov	r7, r1
 8003c3c:	4606      	mov	r6, r0

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8003c3e:	f002 f93d 	bl	8005ebc <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 8003c42:	f894 8001 	ldrb.w	r8, [r4, #1]
 8003c46:	f1b8 0f00 	cmp.w	r8, #0
 8003c4a:	d125      	bne.n	8003c98 <mc_probe_cycle+0x6c>

  // Initialize probing control variables
  uint8_t is_probe_away = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_AWAY);
  uint8_t is_no_error = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_NO_ERROR);
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
  probe_configure_invert_mask(is_probe_away);
 8003c4c:	f3c5 00c0 	ubfx	r0, r5, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 8003c50:	f884 8005 	strb.w	r8, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 8003c54:	f001 f9f4 	bl	8005040 <probe_configure_invert_mask>

  // After syncing, check if probe is already triggered. If so, halt and issue alarm.
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
 8003c58:	f001 fa06 	bl	8005068 <probe_get_state>
 8003c5c:	bb68      	cbnz	r0, 8003cba <mc_probe_cycle+0x8e>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003c5e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8003d4c <mc_probe_cycle+0x120>
 8003c62:	7823      	ldrb	r3, [r4, #0]
 8003c64:	f898 2058 	ldrb.w	r2, [r8, #88]	; 0x58
 8003c68:	0690      	lsls	r0, r2, #26
 8003c6a:	d505      	bpl.n	8003c78 <mc_probe_cycle+0x4c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d01e      	beq.n	8003cae <mc_probe_cycle+0x82>
 8003c70:	4630      	mov	r0, r6
 8003c72:	f7ff fc93 	bl	800359c <limits_soft_check>
 8003c76:	7823      	ldrb	r3, [r4, #0]
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d118      	bne.n	8003cae <mc_probe_cycle+0x82>

  // Setup and queue probing motion. Auto cycle-start should not start the cycle.
  mc_line(target, pl_data);

  // Activate the probing state monitor in the stepper module.
  sys_probe_state = PROBE_ACTIVE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	4e30      	ldr	r6, [pc, #192]	; (8003d40 <mc_probe_cycle+0x114>)

  // Perform probing cycle. Wait here until probe is triggered or motion completes.
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003c80:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 8003c82:	7033      	strb	r3, [r6, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003c84:	f005 fe30 	bl	80098e8 <system_set_exec_state_flag>
 8003c88:	e001      	b.n	8003c8e <mc_probe_cycle+0x62>
  do {
    protocol_execute_realtime();
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
  } while (sys.state != STATE_IDLE);
 8003c8a:	7823      	ldrb	r3, [r4, #0]
 8003c8c:	b1f3      	cbz	r3, 8003ccc <mc_probe_cycle+0xa0>
    protocol_execute_realtime();
 8003c8e:	f001 ff27 	bl	8005ae0 <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8003c92:	7863      	ldrb	r3, [r4, #1]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f8      	beq.n	8003c8a <mc_probe_cycle+0x5e>
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 8003c98:	2002      	movs	r0, #2
    report_probe_parameters();
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 8003c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003c9e:	2000      	movs	r0, #0
}
 8003ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003ca4:	f000 fb8e 	bl	80043c4 <plan_check_full_buffer>
 8003ca8:	b348      	cbz	r0, 8003cfe <mc_probe_cycle+0xd2>
 8003caa:	f001 fa11 	bl	80050d0 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003cae:	f001 ff17 	bl	8005ae0 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003cb2:	7863      	ldrb	r3, [r4, #1]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f5      	beq.n	8003ca4 <mc_probe_cycle+0x78>
 8003cb8:	e7e0      	b.n	8003c7c <mc_probe_cycle+0x50>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 8003cba:	2004      	movs	r0, #4
 8003cbc:	f005 fe28 	bl	8009910 <system_set_exec_alarm>
    protocol_execute_realtime();
 8003cc0:	f001 ff0e 	bl	8005ae0 <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8003cc4:	4640      	mov	r0, r8
 8003cc6:	f001 f9bb 	bl	8005040 <probe_configure_invert_mask>
 8003cca:	e7e5      	b.n	8003c98 <mc_probe_cycle+0x6c>
  if (sys_probe_state == PROBE_ACTIVE) {
 8003ccc:	7833      	ldrb	r3, [r6, #0]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d027      	beq.n	8003d22 <mc_probe_cycle+0xf6>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	7163      	strb	r3, [r4, #5]
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003cd6:	2300      	movs	r3, #0
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003cd8:	4618      	mov	r0, r3
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003cda:	7033      	strb	r3, [r6, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003cdc:	f001 f9b0 	bl	8005040 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 8003ce0:	f001 fefe 	bl	8005ae0 <protocol_execute_realtime>
  st_reset(); // Reset step segment buffer.
 8003ce4:	f004 fbfe 	bl	80084e4 <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8003ce8:	f000 fafa 	bl	80042e0 <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 8003cec:	f000 fe7e 	bl	80049ec <plan_sync_position>
    report_probe_parameters();
 8003cf0:	f002 ff24 	bl	8006b3c <report_probe_parameters>
  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 8003cf4:	7960      	ldrb	r0, [r4, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003cf6:	3000      	adds	r0, #0
 8003cf8:	bf18      	it	ne
 8003cfa:	2001      	movne	r0, #1
 8003cfc:	e7cd      	b.n	8003c9a <mc_probe_cycle+0x6e>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003cfe:	4630      	mov	r0, r6
 8003d00:	4639      	mov	r1, r7
 8003d02:	f000 fc1f 	bl	8004544 <plan_buffer_line>
 8003d06:	2800      	cmp	r0, #0
 8003d08:	d1b8      	bne.n	8003c7c <mc_probe_cycle+0x50>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003d0a:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
 8003d0e:	0799      	lsls	r1, r3, #30
 8003d10:	d5b4      	bpl.n	8003c7c <mc_probe_cycle+0x50>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003d12:	7a3b      	ldrb	r3, [r7, #8]
 8003d14:	06da      	lsls	r2, r3, #27
 8003d16:	d5b1      	bpl.n	8003c7c <mc_probe_cycle+0x50>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	2010      	movs	r0, #16
 8003d1c:	f004 f90e 	bl	8007f3c <spindle_sync>
 8003d20:	e7ac      	b.n	8003c7c <mc_probe_cycle+0x50>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8003d22:	06eb      	lsls	r3, r5, #27
 8003d24:	d505      	bpl.n	8003d32 <mc_probe_cycle+0x106>
 8003d26:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <mc_probe_cycle+0x118>)
 8003d28:	4d07      	ldr	r5, [pc, #28]	; (8003d48 <mc_probe_cycle+0x11c>)
 8003d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d2c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003d30:	e7d1      	b.n	8003cd6 <mc_probe_cycle+0xaa>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8003d32:	2005      	movs	r0, #5
 8003d34:	f005 fdec 	bl	8009910 <system_set_exec_alarm>
 8003d38:	e7cd      	b.n	8003cd6 <mc_probe_cycle+0xaa>
 8003d3a:	bf00      	nop
 8003d3c:	200013f0 	.word	0x200013f0
 8003d40:	20001406 	.word	0x20001406
 8003d44:	20001418 	.word	0x20001418
 8003d48:	20001408 	.word	0x20001408
 8003d4c:	200015ac 	.word	0x200015ac

08003d50 <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 8003d50:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <mc_reset+0x58>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	06db      	lsls	r3, r3, #27
 8003d58:	d500      	bpl.n	8003d5c <mc_reset+0xc>
      }
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 8003d5a:	bd08      	pop	{r3, pc}
    system_set_exec_state_flag(EXEC_RESET);
 8003d5c:	2010      	movs	r0, #16
 8003d5e:	f005 fdc3 	bl	80098e8 <system_set_exec_state_flag>
    spindle_stop();
 8003d62:	f003 fffb 	bl	8007d5c <spindle_stop>
    coolant_stop();
 8003d66:	f7fd fe43 	bl	80019f0 <coolant_stop>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <mc_reset+0x5c>)
 8003d6c:	7813      	ldrb	r3, [r2, #0]
 8003d6e:	f013 0f2c 	tst.w	r3, #44	; 0x2c
 8003d72:	d008      	beq.n	8003d86 <mc_reset+0x36>
      if (sys.state == STATE_HOMING) {
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d10b      	bne.n	8003d90 <mc_reset+0x40>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003d78:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <mc_reset+0x60>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	b17b      	cbz	r3, 8003d9e <mc_reset+0x4e>
}
 8003d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8003d82:	f004 b9d5 	b.w	8008130 <st_go_idle>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8003d86:	7912      	ldrb	r2, [r2, #4]
 8003d88:	f012 0f06 	tst.w	r2, #6
 8003d8c:	d1f2      	bne.n	8003d74 <mc_reset+0x24>
 8003d8e:	e7e4      	b.n	8003d5a <mc_reset+0xa>
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 8003d90:	2003      	movs	r0, #3
 8003d92:	f005 fdbd 	bl	8009910 <system_set_exec_alarm>
}
 8003d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8003d9a:	f004 b9c9 	b.w	8008130 <st_go_idle>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003d9e:	2006      	movs	r0, #6
 8003da0:	f005 fdb6 	bl	8009910 <system_set_exec_alarm>
 8003da4:	e7eb      	b.n	8003d7e <mc_reset+0x2e>
 8003da6:	bf00      	nop
 8003da8:	20001405 	.word	0x20001405
 8003dac:	200013f0 	.word	0x200013f0
 8003db0:	20001428 	.word	0x20001428

08003db4 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 8003db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char *ptr = line + *char_counter;
 8003db8:	780c      	ldrb	r4, [r1, #0]
{
 8003dba:	b083      	sub	sp, #12
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 8003dbc:	5d03      	ldrb	r3, [r0, r4]
  char *ptr = line + *char_counter;
 8003dbe:	4404      	add	r4, r0

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 8003dc0:	2b2d      	cmp	r3, #45	; 0x2d
 8003dc2:	d069      	beq.n	8003e98 <read_float+0xe4>
    isnegative = true;
    c = *ptr++;
  } else if (c == '+') {
 8003dc4:	2b2b      	cmp	r3, #43	; 0x2b
 8003dc6:	d01d      	beq.n	8003e04 <read_float+0x50>
  bool isnegative = false;
 8003dc8:	f04f 0800 	mov.w	r8, #0
  c = *ptr++;
 8003dcc:	1c65      	adds	r5, r4, #1

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 8003dce:	2600      	movs	r6, #0
  uint8_t ndigit = 0;
 8003dd0:	4634      	mov	r4, r6
  int8_t exp = 0;
 8003dd2:	4637      	mov	r7, r6
  uint32_t intval = 0;
 8003dd4:	46b4      	mov	ip, r6
 8003dd6:	e00c      	b.n	8003df2 <read_float+0x3e>
  while(1) {
    c -= '0';
    if (c <= 9) {
      ndigit++;
 8003dd8:	3401      	adds	r4, #1
 8003dda:	b2e4      	uxtb	r4, r4
      if (ndigit <= MAX_INT_DIGITS) {
 8003ddc:	2c08      	cmp	r4, #8
 8003dde:	d816      	bhi.n	8003e0e <read_float+0x5a>
        if (isdecimal) { exp--; }
 8003de0:	b10e      	cbz	r6, 8003de6 <read_float+0x32>
 8003de2:	3f01      	subs	r7, #1
 8003de4:	b27f      	sxtb	r7, r7
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8003de6:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003dea:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 8003dee:	f815 3b01 	ldrb.w	r3, [r5], #1
    c -= '0';
 8003df2:	3b30      	subs	r3, #48	; 0x30
 8003df4:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 8003df6:	2b09      	cmp	r3, #9
 8003df8:	d9ee      	bls.n	8003dd8 <read_float+0x24>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 8003dfa:	2bfe      	cmp	r3, #254	; 0xfe
 8003dfc:	d10c      	bne.n	8003e18 <read_float+0x64>
 8003dfe:	b95e      	cbnz	r6, 8003e18 <read_float+0x64>
      isdecimal = true;
 8003e00:	2601      	movs	r6, #1
 8003e02:	e7f4      	b.n	8003dee <read_float+0x3a>
  bool isnegative = false;
 8003e04:	f04f 0800 	mov.w	r8, #0
    c = *ptr++;
 8003e08:	7863      	ldrb	r3, [r4, #1]
 8003e0a:	1ca5      	adds	r5, r4, #2
 8003e0c:	e7df      	b.n	8003dce <read_float+0x1a>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8003e0e:	2e00      	cmp	r6, #0
 8003e10:	d1ed      	bne.n	8003dee <read_float+0x3a>
 8003e12:	3701      	adds	r7, #1
 8003e14:	b27f      	sxtb	r7, r7
 8003e16:	e7ea      	b.n	8003dee <read_float+0x3a>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 8003e18:	2c00      	cmp	r4, #0
 8003e1a:	d039      	beq.n	8003e90 <read_float+0xdc>
 8003e1c:	4682      	mov	sl, r0

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 8003e1e:	4660      	mov	r0, ip
 8003e20:	9101      	str	r1, [sp, #4]
 8003e22:	4691      	mov	r9, r2
 8003e24:	f7fc fef0 	bl	8000c08 <__aeabi_ui2f>

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 8003e28:	2100      	movs	r1, #0
  fval = (float)intval;
 8003e2a:	4683      	mov	fp, r0
  if (fval != 0) {
 8003e2c:	f7fd f8d8 	bl	8000fe0 <__aeabi_fcmpeq>
 8003e30:	bb08      	cbnz	r0, 8003e76 <read_float+0xc2>
    while (exp <= -2) {
 8003e32:	1c79      	adds	r1, r7, #1
 8003e34:	da12      	bge.n	8003e5c <read_float+0xa8>
 8003e36:	463e      	mov	r6, r7
      fval *= 0.01f;
 8003e38:	4c1d      	ldr	r4, [pc, #116]	; (8003eb0 <read_float+0xfc>)
 8003e3a:	4658      	mov	r0, fp
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	f7fc ff3b 	bl	8000cb8 <__aeabi_fmul>
 8003e42:	1cb3      	adds	r3, r6, #2
 8003e44:	b25e      	sxtb	r6, r3
    while (exp <= -2) {
 8003e46:	1c72      	adds	r2, r6, #1
      fval *= 0.01f;
 8003e48:	4683      	mov	fp, r0
    while (exp <= -2) {
 8003e4a:	dbf6      	blt.n	8003e3a <read_float+0x86>
 8003e4c:	b2ff      	uxtb	r7, r7
 8003e4e:	f1c7 03fe 	rsb	r3, r7, #254	; 0xfe
 8003e52:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e56:	441f      	add	r7, r3
 8003e58:	3702      	adds	r7, #2
 8003e5a:	b27f      	sxtb	r7, r7
      exp += 2;
    }
    if (exp < 0) {
 8003e5c:	1c7b      	adds	r3, r7, #1
 8003e5e:	d020      	beq.n	8003ea2 <read_float+0xee>
      fval *= 0.1f;
    } else if (exp > 0) {
 8003e60:	b14f      	cbz	r7, 8003e76 <read_float+0xc2>
      do {
        fval *= 10.0f;
 8003e62:	4c14      	ldr	r4, [pc, #80]	; (8003eb4 <read_float+0x100>)
 8003e64:	4658      	mov	r0, fp
 8003e66:	4621      	mov	r1, r4
 8003e68:	f7fc ff26 	bl	8000cb8 <__aeabi_fmul>
 8003e6c:	3f01      	subs	r7, #1
 8003e6e:	b27f      	sxtb	r7, r7
 8003e70:	4683      	mov	fp, r0
      } while (--exp > 0);
 8003e72:	2f00      	cmp	r7, #0
 8003e74:	d1f6      	bne.n	8003e64 <read_float+0xb0>
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 8003e76:	f1b8 0f00 	cmp.w	r8, #0
 8003e7a:	d001      	beq.n	8003e80 <read_float+0xcc>
    *float_ptr = -fval;
 8003e7c:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement

  return(true);
 8003e80:	2401      	movs	r4, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 8003e82:	eba5 050a 	sub.w	r5, r5, sl
 8003e86:	9b01      	ldr	r3, [sp, #4]
 8003e88:	3d01      	subs	r5, #1
 8003e8a:	f8c9 b000 	str.w	fp, [r9]
 8003e8e:	701d      	strb	r5, [r3, #0]
}
 8003e90:	4620      	mov	r0, r4
 8003e92:	b003      	add	sp, #12
 8003e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c = *ptr++;
 8003e98:	1ca5      	adds	r5, r4, #2
 8003e9a:	7863      	ldrb	r3, [r4, #1]
    isnegative = true;
 8003e9c:	f04f 0801 	mov.w	r8, #1
 8003ea0:	e795      	b.n	8003dce <read_float+0x1a>
      fval *= 0.1f;
 8003ea2:	4658      	mov	r0, fp
 8003ea4:	4904      	ldr	r1, [pc, #16]	; (8003eb8 <read_float+0x104>)
 8003ea6:	f7fc ff07 	bl	8000cb8 <__aeabi_fmul>
 8003eaa:	4683      	mov	fp, r0
 8003eac:	e7e3      	b.n	8003e76 <read_float+0xc2>
 8003eae:	bf00      	nop
 8003eb0:	3c23d70a 	.word	0x3c23d70a
 8003eb4:	41200000 	.word	0x41200000
 8003eb8:	3dcccccd 	.word	0x3dcccccd

08003ebc <delay_sec>:


// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	460e      	mov	r6, r1
	uint16_t i = (uint16_t)ceilf(1000 / DWELL_TIME_STEP*seconds);
 8003ec0:	4918      	ldr	r1, [pc, #96]	; (8003f24 <delay_sec+0x68>)
 8003ec2:	f7fc fef9 	bl	8000cb8 <__aeabi_fmul>
 8003ec6:	f007 f86f 	bl	800afa8 <ceilf>
 8003eca:	f7fd f8f7 	bl	80010bc <__aeabi_f2uiz>
 8003ece:	b280      	uxth	r0, r0
	while (i-- > 0) {
 8003ed0:	b1b0      	cbz	r0, 8003f00 <delay_sec+0x44>
		if (sys.abort) { return; }
 8003ed2:	4d15      	ldr	r5, [pc, #84]	; (8003f28 <delay_sec+0x6c>)
 8003ed4:	786b      	ldrb	r3, [r5, #1]
 8003ed6:	b99b      	cbnz	r3, 8003f00 <delay_sec+0x44>
 8003ed8:	1e44      	subs	r4, r0, #1
 8003eda:	b2a4      	uxth	r4, r4
 8003edc:	b18e      	cbz	r6, 8003f02 <delay_sec+0x46>
	while (i-- > 0) {
 8003ede:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003ee2:	e008      	b.n	8003ef6 <delay_sec+0x3a>
 8003ee4:	3c01      	subs	r4, #1
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003ee6:	2032      	movs	r0, #50	; 0x32
	while (i-- > 0) {
 8003ee8:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003eea:	f7ff fc05 	bl	80036f8 <_delay_ms>
	while (i-- > 0) {
 8003eee:	42b4      	cmp	r4, r6
 8003ef0:	d006      	beq.n	8003f00 <delay_sec+0x44>
		if (sys.abort) { return; }
 8003ef2:	786b      	ldrb	r3, [r5, #1]
 8003ef4:	b923      	cbnz	r3, 8003f00 <delay_sec+0x44>
		  protocol_exec_rt_system();
 8003ef6:	f001 f8f5 	bl	80050e4 <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 8003efa:	78ab      	ldrb	r3, [r5, #2]
 8003efc:	079b      	lsls	r3, r3, #30
 8003efe:	d5f1      	bpl.n	8003ee4 <delay_sec+0x28>
	}
}
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
	while (i-- > 0) {
 8003f02:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003f06:	e002      	b.n	8003f0e <delay_sec+0x52>
		if (sys.abort) { return; }
 8003f08:	786b      	ldrb	r3, [r5, #1]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f8      	bne.n	8003f00 <delay_sec+0x44>
	while (i-- > 0) {
 8003f0e:	3c01      	subs	r4, #1
			protocol_execute_realtime();
 8003f10:	f001 fde6 	bl	8005ae0 <protocol_execute_realtime>
	while (i-- > 0) {
 8003f14:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003f16:	2032      	movs	r0, #50	; 0x32
 8003f18:	f7ff fbee 	bl	80036f8 <_delay_ms>
	while (i-- > 0) {
 8003f1c:	42b4      	cmp	r4, r6
 8003f1e:	d1f3      	bne.n	8003f08 <delay_sec+0x4c>
}
 8003f20:	bd70      	pop	{r4, r5, r6, pc}
 8003f22:	bf00      	nop
 8003f24:	41a00000 	.word	0x41a00000
 8003f28:	200013f0 	.word	0x200013f0

08003f2c <delay_ms>:

// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
  while ( ms-- ) { _delay_ms(1); }
 8003f2c:	b160      	cbz	r0, 8003f48 <delay_ms+0x1c>
{
 8003f2e:	b538      	push	{r3, r4, r5, lr}
  while ( ms-- ) { _delay_ms(1); }
 8003f30:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003f34:	1e44      	subs	r4, r0, #1
 8003f36:	b2a4      	uxth	r4, r4
 8003f38:	3c01      	subs	r4, #1
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	b2a4      	uxth	r4, r4
 8003f3e:	f7ff fbdb 	bl	80036f8 <_delay_ms>
 8003f42:	42ac      	cmp	r4, r5
 8003f44:	d1f8      	bne.n	8003f38 <delay_ms+0xc>
}
 8003f46:	bd38      	pop	{r3, r4, r5, pc}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop

08003f4c <hypot_f>:


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8003f4c:	b538      	push	{r3, r4, r5, lr}
 8003f4e:	460d      	mov	r5, r1
 8003f50:	4601      	mov	r1, r0
 8003f52:	f7fc feb1 	bl	8000cb8 <__aeabi_fmul>
 8003f56:	4629      	mov	r1, r5
 8003f58:	4604      	mov	r4, r0
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f7fc feac 	bl	8000cb8 <__aeabi_fmul>
 8003f60:	4601      	mov	r1, r0
 8003f62:	4620      	mov	r0, r4
 8003f64:	f7fc fda0 	bl	8000aa8 <__addsf3>
 8003f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f6c:	f007 b934 	b.w	800b1d8 <sqrtf>

08003f70 <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float magnitude = 0.0f;
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0f) {
 8003f72:	6806      	ldr	r6, [r0, #0]
{
 8003f74:	4604      	mov	r4, r0
    if (vector[idx] != 0.0f) {
 8003f76:	2100      	movs	r1, #0
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f7fd f831 	bl	8000fe0 <__aeabi_fcmpeq>
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d150      	bne.n	8004024 <convert_delta_vector_to_unit_vector+0xb4>
      magnitude += vector[idx]*vector[idx];
 8003f82:	4631      	mov	r1, r6
 8003f84:	4630      	mov	r0, r6
 8003f86:	f7fc fe97 	bl	8000cb8 <__aeabi_fmul>
 8003f8a:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8003f8c:	6867      	ldr	r7, [r4, #4]
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4638      	mov	r0, r7
 8003f92:	f7fd f825 	bl	8000fe0 <__aeabi_fcmpeq>
 8003f96:	b940      	cbnz	r0, 8003faa <convert_delta_vector_to_unit_vector+0x3a>
      magnitude += vector[idx]*vector[idx];
 8003f98:	4639      	mov	r1, r7
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	f7fc fe8c 	bl	8000cb8 <__aeabi_fmul>
 8003fa0:	4601      	mov	r1, r0
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	f7fc fd80 	bl	8000aa8 <__addsf3>
 8003fa8:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8003faa:	68a7      	ldr	r7, [r4, #8]
 8003fac:	2100      	movs	r1, #0
 8003fae:	4638      	mov	r0, r7
 8003fb0:	f7fd f816 	bl	8000fe0 <__aeabi_fcmpeq>
 8003fb4:	b940      	cbnz	r0, 8003fc8 <convert_delta_vector_to_unit_vector+0x58>
      magnitude += vector[idx]*vector[idx];
 8003fb6:	4639      	mov	r1, r7
 8003fb8:	4638      	mov	r0, r7
 8003fba:	f7fc fe7d 	bl	8000cb8 <__aeabi_fmul>
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f7fc fd71 	bl	8000aa8 <__addsf3>
 8003fc6:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8003fc8:	68e7      	ldr	r7, [r4, #12]
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4638      	mov	r0, r7
 8003fce:	f7fd f807 	bl	8000fe0 <__aeabi_fcmpeq>
 8003fd2:	b940      	cbnz	r0, 8003fe6 <convert_delta_vector_to_unit_vector+0x76>
      magnitude += vector[idx]*vector[idx];
 8003fd4:	4639      	mov	r1, r7
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	f7fc fe6e 	bl	8000cb8 <__aeabi_fmul>
 8003fdc:	4601      	mov	r1, r0
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f7fc fd62 	bl	8000aa8 <__addsf3>
 8003fe4:	4605      	mov	r5, r0
    }
  }
  magnitude = sqrtf(magnitude);
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f007 f8f6 	bl	800b1d8 <sqrtf>
 8003fec:	4607      	mov	r7, r0
  float inv_magnitude = 1.0f/magnitude;
 8003fee:	4601      	mov	r1, r0
 8003ff0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003ff4:	f7fc ff14 	bl	8000e20 <__aeabi_fdiv>
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8003ff8:	4631      	mov	r1, r6
  float inv_magnitude = 1.0f/magnitude;
 8003ffa:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8003ffc:	f7fc fe5c 	bl	8000cb8 <__aeabi_fmul>
 8004000:	4629      	mov	r1, r5
 8004002:	6020      	str	r0, [r4, #0]
 8004004:	6860      	ldr	r0, [r4, #4]
 8004006:	f7fc fe57 	bl	8000cb8 <__aeabi_fmul>
 800400a:	4629      	mov	r1, r5
 800400c:	6060      	str	r0, [r4, #4]
 800400e:	68a0      	ldr	r0, [r4, #8]
 8004010:	f7fc fe52 	bl	8000cb8 <__aeabi_fmul>
 8004014:	4629      	mov	r1, r5
 8004016:	60a0      	str	r0, [r4, #8]
 8004018:	68e0      	ldr	r0, [r4, #12]
 800401a:	f7fc fe4d 	bl	8000cb8 <__aeabi_fmul>
 800401e:	60e0      	str	r0, [r4, #12]
  return(magnitude);
}
 8004020:	4638      	mov	r0, r7
 8004022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float magnitude = 0.0f;
 8004024:	2500      	movs	r5, #0
 8004026:	e7b1      	b.n	8003f8c <convert_delta_vector_to_unit_vector+0x1c>

08004028 <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 800402a:	680c      	ldr	r4, [r1, #0]
{
 800402c:	460d      	mov	r5, r1
 800402e:	4606      	mov	r6, r0
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004030:	2100      	movs	r1, #0
 8004032:	4620      	mov	r0, r4
 8004034:	f7fc ffd4 	bl	8000fe0 <__aeabi_fcmpeq>
 8004038:	2800      	cmp	r0, #0
 800403a:	d140      	bne.n	80040be <limit_value_by_axis_maximum+0x96>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800403c:	4621      	mov	r1, r4
 800403e:	6830      	ldr	r0, [r6, #0]
 8004040:	f7fc feee 	bl	8000e20 <__aeabi_fdiv>
 8004044:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8004048:	4620      	mov	r0, r4
 800404a:	4921      	ldr	r1, [pc, #132]	; (80040d0 <limit_value_by_axis_maximum+0xa8>)
 800404c:	f7fc ffdc 	bl	8001008 <__aeabi_fcmple>
 8004050:	2800      	cmp	r0, #0
 8004052:	d034      	beq.n	80040be <limit_value_by_axis_maximum+0x96>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004054:	686f      	ldr	r7, [r5, #4]
 8004056:	2100      	movs	r1, #0
 8004058:	4638      	mov	r0, r7
 800405a:	f7fc ffc1 	bl	8000fe0 <__aeabi_fcmpeq>
 800405e:	b950      	cbnz	r0, 8004076 <limit_value_by_axis_maximum+0x4e>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004060:	4639      	mov	r1, r7
 8004062:	6870      	ldr	r0, [r6, #4]
 8004064:	f7fc fedc 	bl	8000e20 <__aeabi_fdiv>
 8004068:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 800406c:	4639      	mov	r1, r7
 800406e:	4620      	mov	r0, r4
 8004070:	f7fc ffca 	bl	8001008 <__aeabi_fcmple>
 8004074:	b350      	cbz	r0, 80040cc <limit_value_by_axis_maximum+0xa4>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004076:	68af      	ldr	r7, [r5, #8]
 8004078:	2100      	movs	r1, #0
 800407a:	4638      	mov	r0, r7
 800407c:	f7fc ffb0 	bl	8000fe0 <__aeabi_fcmpeq>
 8004080:	b950      	cbnz	r0, 8004098 <limit_value_by_axis_maximum+0x70>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004082:	4639      	mov	r1, r7
 8004084:	68b0      	ldr	r0, [r6, #8]
 8004086:	f7fc fecb 	bl	8000e20 <__aeabi_fdiv>
 800408a:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 800408e:	4639      	mov	r1, r7
 8004090:	4620      	mov	r0, r4
 8004092:	f7fc ffb9 	bl	8001008 <__aeabi_fcmple>
 8004096:	b1b8      	cbz	r0, 80040c8 <limit_value_by_axis_maximum+0xa0>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004098:	68ed      	ldr	r5, [r5, #12]
 800409a:	2100      	movs	r1, #0
 800409c:	4628      	mov	r0, r5
 800409e:	f7fc ff9f 	bl	8000fe0 <__aeabi_fcmpeq>
 80040a2:	b950      	cbnz	r0, 80040ba <limit_value_by_axis_maximum+0x92>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80040a4:	4629      	mov	r1, r5
 80040a6:	68f0      	ldr	r0, [r6, #12]
 80040a8:	f7fc feba 	bl	8000e20 <__aeabi_fdiv>
 80040ac:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80040b0:	4629      	mov	r1, r5
 80040b2:	4620      	mov	r0, r4
 80040b4:	f7fc ffa8 	bl	8001008 <__aeabi_fcmple>
 80040b8:	b118      	cbz	r0, 80040c2 <limit_value_by_axis_maximum+0x9a>
    }
  }
  return(limit_value);
}
 80040ba:	4620      	mov	r0, r4
 80040bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float limit_value = SOME_LARGE_VALUE;
 80040be:	4c04      	ldr	r4, [pc, #16]	; (80040d0 <limit_value_by_axis_maximum+0xa8>)
 80040c0:	e7c8      	b.n	8004054 <limit_value_by_axis_maximum+0x2c>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80040c2:	462c      	mov	r4, r5
}
 80040c4:	4620      	mov	r0, r4
 80040c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80040c8:	463c      	mov	r4, r7
 80040ca:	e7e5      	b.n	8004098 <limit_value_by_axis_maximum+0x70>
 80040cc:	463c      	mov	r4, r7
 80040ce:	e7d2      	b.n	8004076 <limit_value_by_axis_maximum+0x4e>
 80040d0:	7f7fffff 	.word	0x7f7fffff

080040d4 <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 80040d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 80040d8:	4b7c      	ldr	r3, [pc, #496]	; (80042cc <planner_recalculate+0x1f8>)
 80040da:	4a7d      	ldr	r2, [pc, #500]	; (80042d0 <planner_recalculate+0x1fc>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
{
 80040de:	b083      	sub	sp, #12
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	f892 8000 	ldrb.w	r8, [r2]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 80b5 	beq.w	8004256 <planner_recalculate+0x182>
  block_index--;
 80040ec:	1e5c      	subs	r4, r3, #1
 80040ee:	b2e4      	uxtb	r4, r4

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 80040f0:	4544      	cmp	r4, r8
 80040f2:	f000 80ad 	beq.w	8004250 <planner_recalculate+0x17c>
  // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
  // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
  // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];
 80040f6:	4d77      	ldr	r5, [pc, #476]	; (80042d4 <planner_recalculate+0x200>)
 80040f8:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
 80040fc:	eb05 07c7 	add.w	r7, r5, r7, lsl #3

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8004100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004102:	6a38      	ldr	r0, [r7, #32]
 8004104:	f7fc fdd8 	bl	8000cb8 <__aeabi_fmul>
 8004108:	4601      	mov	r1, r0
 800410a:	f7fc fccd 	bl	8000aa8 <__addsf3>
 800410e:	f8d7 a01c 	ldr.w	sl, [r7, #28]
 8004112:	4681      	mov	r9, r0
 8004114:	4651      	mov	r1, sl
 8004116:	f107 0618 	add.w	r6, r7, #24
 800411a:	f7fc ff75 	bl	8001008 <__aeabi_fcmple>
 800411e:	2800      	cmp	r0, #0
 8004120:	f000 80c6 	beq.w	80042b0 <planner_recalculate+0x1dc>
 8004124:	f8c6 9000 	str.w	r9, [r6]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004128:	f04f 0a23 	mov.w	sl, #35	; 0x23
 800412c:	2c00      	cmp	r4, #0
 800412e:	f040 80c8 	bne.w	80042c2 <planner_recalculate+0x1ee>
 8004132:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80042dc <planner_recalculate+0x208>

  block_index = plan_prev_block_index(block_index);
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8004136:	45d0      	cmp	r8, sl
 8004138:	f899 2000 	ldrb.w	r2, [r9]
 800413c:	d12d      	bne.n	800419a <planner_recalculate+0xc6>
 800413e:	e0a9      	b.n	8004294 <planner_recalculate+0x1c0>
 8004140:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004144:	fa5f fa83 	uxtb.w	sl, r3
      next = current;
      current = &block_buffer[block_index];
      block_index = plan_prev_block_index(block_index);

      // Check if next block is the tail block(=planned block). If so, update current stepper parameters.
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004148:	4552      	cmp	r2, sl
 800414a:	d032      	beq.n	80041b2 <planner_recalculate+0xde>

      // Compute maximum entry speed decelerating over the current block from its exit speed.
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 800414c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8004150:	eb05 0bc6 	add.w	fp, r5, r6, lsl #3
 8004154:	f8db 601c 	ldr.w	r6, [fp, #28]
 8004158:	f8db 0018 	ldr.w	r0, [fp, #24]
 800415c:	4631      	mov	r1, r6
 800415e:	f7fc ff3f 	bl	8000fe0 <__aeabi_fcmpeq>
 8004162:	b9a8      	cbnz	r0, 8004190 <planner_recalculate+0xbc>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8004164:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 8004168:	f8db 0020 	ldr.w	r0, [fp, #32]
 800416c:	f7fc fda4 	bl	8000cb8 <__aeabi_fmul>
 8004170:	4601      	mov	r1, r0
 8004172:	f7fc fc99 	bl	8000aa8 <__addsf3>
 8004176:	69b9      	ldr	r1, [r7, #24]
 8004178:	f7fc fc96 	bl	8000aa8 <__addsf3>
 800417c:	4607      	mov	r7, r0
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 800417e:	4601      	mov	r1, r0
 8004180:	4630      	mov	r0, r6
 8004182:	f7fc ff55 	bl	8001030 <__aeabi_fcmpgt>
 8004186:	2800      	cmp	r0, #0
 8004188:	f000 808f 	beq.w	80042aa <planner_recalculate+0x1d6>
          current->entry_speed_sqr = entry_speed_sqr;
 800418c:	f8cb 7018 	str.w	r7, [fp, #24]
    while (block_index != block_buffer_planned) {
 8004190:	45c2      	cmp	sl, r8
 8004192:	d014      	beq.n	80041be <planner_recalculate+0xea>
 8004194:	4627      	mov	r7, r4
 8004196:	f899 2000 	ldrb.w	r2, [r9]
      current = &block_buffer[block_index];
 800419a:	ebca 04ca 	rsb	r4, sl, sl, lsl #3
 800419e:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 80041a2:	4656      	mov	r6, sl
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80041a4:	f1ba 0f00 	cmp.w	sl, #0
 80041a8:	d1ca      	bne.n	8004140 <planner_recalculate+0x6c>
 80041aa:	f04f 0a23 	mov.w	sl, #35	; 0x23
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80041ae:	4552      	cmp	r2, sl
 80041b0:	d1cc      	bne.n	800414c <planner_recalculate+0x78>
 80041b2:	f004 fae9 	bl	8008788 <st_update_plan_block_parameters>
 80041b6:	4b46      	ldr	r3, [pc, #280]	; (80042d0 <planner_recalculate+0x1fc>)
 80041b8:	f893 8000 	ldrb.w	r8, [r3]
 80041bc:	e7c6      	b.n	800414c <planner_recalculate+0x78>
 80041be:	4b43      	ldr	r3, [pc, #268]	; (80042cc <planner_recalculate+0x1f8>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	9301      	str	r3, [sp, #4]
  block_index++;
 80041c4:	f10a 0401 	add.w	r4, sl, #1
 80041c8:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80041ca:	2c24      	cmp	r4, #36	; 0x24
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80041cc:	ebca 02ca 	rsb	r2, sl, sl, lsl #3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80041d0:	bf08      	it	eq
 80041d2:	2400      	moveq	r4, #0
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80041d4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80041d8:	e02e      	b.n	8004238 <planner_recalculate+0x164>
    next = &block_buffer[block_index];

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 80041da:	f8d6 9018 	ldr.w	r9, [r6, #24]
 80041de:	f8d7 8018 	ldr.w	r8, [r7, #24]
 80041e2:	4648      	mov	r0, r9
 80041e4:	4641      	mov	r1, r8
 80041e6:	f7fc ff05 	bl	8000ff4 <__aeabi_fcmplt>
 80041ea:	b198      	cbz	r0, 8004214 <planner_recalculate+0x140>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 80041ec:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80041ee:	6a30      	ldr	r0, [r6, #32]
 80041f0:	f7fc fd62 	bl	8000cb8 <__aeabi_fmul>
 80041f4:	4601      	mov	r1, r0
 80041f6:	f7fc fc57 	bl	8000aa8 <__addsf3>
 80041fa:	4649      	mov	r1, r9
 80041fc:	f7fc fc54 	bl	8000aa8 <__addsf3>
 8004200:	4681      	mov	r9, r0
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8004202:	4601      	mov	r1, r0
 8004204:	4640      	mov	r0, r8
 8004206:	f7fc ff13 	bl	8001030 <__aeabi_fcmpgt>
 800420a:	b118      	cbz	r0, 8004214 <planner_recalculate+0x140>
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 800420c:	46c8      	mov	r8, r9
 800420e:	46a2      	mov	sl, r4
 8004210:	f8c7 9018 	str.w	r9, [r7, #24]

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 8004214:	ebab 0b04 	sub.w	fp, fp, r4
 8004218:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
 800421c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004220:	4641      	mov	r1, r8
 8004222:	f7fc fedd 	bl	8000fe0 <__aeabi_fcmpeq>
  block_index++;
 8004226:	1c62      	adds	r2, r4, #1
 8004228:	2800      	cmp	r0, #0
 800422a:	bf18      	it	ne
 800422c:	46a2      	movne	sl, r4
 800422e:	b2d4      	uxtb	r4, r2
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004230:	2c24      	cmp	r4, #36	; 0x24
 8004232:	bf08      	it	eq
 8004234:	2400      	moveq	r4, #0
 8004236:	463e      	mov	r6, r7
  while (block_index != block_buffer_head) {
 8004238:	9b01      	ldr	r3, [sp, #4]
    next = &block_buffer[block_index];
 800423a:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800423e:	ebab 0704 	sub.w	r7, fp, r4
  while (block_index != block_buffer_head) {
 8004242:	429c      	cmp	r4, r3
    next = &block_buffer[block_index];
 8004244:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
  while (block_index != block_buffer_head) {
 8004248:	d1c7      	bne.n	80041da <planner_recalculate+0x106>
 800424a:	4b21      	ldr	r3, [pc, #132]	; (80042d0 <planner_recalculate+0x1fc>)
 800424c:	f883 a000 	strb.w	sl, [r3]
    block_index = plan_next_block_index( block_index );
  }
}
 8004250:	b003      	add	sp, #12
 8004252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block_index == block_buffer_planned) { return; }
 8004256:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
 800425a:	d0f9      	beq.n	8004250 <planner_recalculate+0x17c>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 800425c:	4d1d      	ldr	r5, [pc, #116]	; (80042d4 <planner_recalculate+0x200>)
 800425e:	f8d5 17c8 	ldr.w	r1, [r5, #1992]	; 0x7c8
 8004262:	f8d5 07cc 	ldr.w	r0, [r5, #1996]	; 0x7cc
 8004266:	f7fc fd27 	bl	8000cb8 <__aeabi_fmul>
 800426a:	4601      	mov	r1, r0
 800426c:	f7fc fc1c 	bl	8000aa8 <__addsf3>
 8004270:	f8d5 77c4 	ldr.w	r7, [r5, #1988]	; 0x7c4
 8004274:	4604      	mov	r4, r0
 8004276:	4639      	mov	r1, r7
 8004278:	f7fc fec6 	bl	8001008 <__aeabi_fcmple>
 800427c:	b1d0      	cbz	r0, 80042b4 <planner_recalculate+0x1e0>
 800427e:	f04f 0a22 	mov.w	sl, #34	; 0x22
  plan_block_t *current = &block_buffer[block_index];
 8004282:	4f15      	ldr	r7, [pc, #84]	; (80042d8 <planner_recalculate+0x204>)
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8004284:	f8c5 47c0 	str.w	r4, [r5, #1984]	; 0x7c0
 8004288:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80042dc <planner_recalculate+0x208>
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 800428c:	45d0      	cmp	r8, sl
 800428e:	f899 2000 	ldrb.w	r2, [r9]
 8004292:	d182      	bne.n	800419a <planner_recalculate+0xc6>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004294:	4592      	cmp	sl, r2
 8004296:	d195      	bne.n	80041c4 <planner_recalculate+0xf0>
 8004298:	f004 fa76 	bl	8008788 <st_update_plan_block_parameters>
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <planner_recalculate+0x1f8>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <planner_recalculate+0x1fc>)
 80042a4:	f893 a000 	ldrb.w	sl, [r3]
 80042a8:	e78c      	b.n	80041c4 <planner_recalculate+0xf0>
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 80042aa:	f8cb 6018 	str.w	r6, [fp, #24]
 80042ae:	e76f      	b.n	8004190 <planner_recalculate+0xbc>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 80042b0:	46d1      	mov	r9, sl
 80042b2:	e737      	b.n	8004124 <planner_recalculate+0x50>
 80042b4:	463c      	mov	r4, r7
 80042b6:	f04f 0a22 	mov.w	sl, #34	; 0x22
 80042ba:	f8c5 47c0 	str.w	r4, [r5, #1984]	; 0x7c0
  plan_block_t *current = &block_buffer[block_index];
 80042be:	4f06      	ldr	r7, [pc, #24]	; (80042d8 <planner_recalculate+0x204>)
 80042c0:	e7e2      	b.n	8004288 <planner_recalculate+0x1b4>
 80042c2:	9b01      	ldr	r3, [sp, #4]
 80042c4:	3b02      	subs	r3, #2
 80042c6:	fa5f fa83 	uxtb.w	sl, r3
 80042ca:	e732      	b.n	8004132 <planner_recalculate+0x5e>
 80042cc:	20000d20 	.word	0x20000d20
 80042d0:	20000d21 	.word	0x20000d21
 80042d4:	20000540 	.word	0x20000540
 80042d8:	20000ce8 	.word	0x20000ce8
 80042dc:	20000d22 	.word	0x20000d22

080042e0 <plan_reset>:


void plan_reset()
{
 80042e0:	b538      	push	{r3, r4, r5, lr}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 80042e2:	2224      	movs	r2, #36	; 0x24
 80042e4:	2100      	movs	r1, #0
 80042e6:	4807      	ldr	r0, [pc, #28]	; (8004304 <plan_reset+0x24>)
 80042e8:	f006 fdd9 	bl	800ae9e <memset>
}


void plan_reset_buffer()
{
  block_buffer_tail = 0;
 80042ec:	2300      	movs	r3, #0
  block_buffer_head = 0; // Empty = tail
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 80042ee:	2101      	movs	r1, #1
  block_buffer_planned = 0; // = block_buffer_tail;
 80042f0:	4805      	ldr	r0, [pc, #20]	; (8004308 <plan_reset+0x28>)
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 80042f2:	4a06      	ldr	r2, [pc, #24]	; (800430c <plan_reset+0x2c>)
  block_buffer_tail = 0;
 80042f4:	4d06      	ldr	r5, [pc, #24]	; (8004310 <plan_reset+0x30>)
  block_buffer_head = 0; // Empty = tail
 80042f6:	4c07      	ldr	r4, [pc, #28]	; (8004314 <plan_reset+0x34>)
  block_buffer_planned = 0; // = block_buffer_tail;
 80042f8:	7003      	strb	r3, [r0, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 80042fa:	7011      	strb	r1, [r2, #0]
  block_buffer_tail = 0;
 80042fc:	702b      	strb	r3, [r5, #0]
  block_buffer_head = 0; // Empty = tail
 80042fe:	7023      	strb	r3, [r4, #0]
}
 8004300:	bd38      	pop	{r3, r4, r5, pc}
 8004302:	bf00      	nop
 8004304:	20000d24 	.word	0x20000d24
 8004308:	20000d21 	.word	0x20000d21
 800430c:	20000d23 	.word	0x20000d23
 8004310:	20000d22 	.word	0x20000d22
 8004314:	20000d20 	.word	0x20000d20

08004318 <plan_discard_current_block>:
}


void plan_discard_current_block()
{
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 8004318:	490a      	ldr	r1, [pc, #40]	; (8004344 <plan_discard_current_block+0x2c>)
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <plan_discard_current_block+0x30>)
 800431c:	780a      	ldrb	r2, [r1, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	4293      	cmp	r3, r2
 8004322:	d00d      	beq.n	8004340 <plan_discard_current_block+0x28>
  block_index++;
 8004324:	1c53      	adds	r3, r2, #1
 8004326:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004328:	2b24      	cmp	r3, #36	; 0x24
 800432a:	bf08      	it	eq
 800432c:	2300      	moveq	r3, #0
{
 800432e:	b410      	push	{r4}
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8004330:	4806      	ldr	r0, [pc, #24]	; (800434c <plan_discard_current_block+0x34>)
    block_buffer_tail = block_index;
 8004332:	700b      	strb	r3, [r1, #0]
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8004334:	7804      	ldrb	r4, [r0, #0]
 8004336:	4294      	cmp	r4, r2
 8004338:	bf08      	it	eq
 800433a:	7003      	strbeq	r3, [r0, #0]
  }
}
 800433c:	bc10      	pop	{r4}
 800433e:	4770      	bx	lr
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000d22 	.word	0x20000d22
 8004348:	20000d20 	.word	0x20000d20
 800434c:	20000d21 	.word	0x20000d21

08004350 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <plan_get_system_motion_block+0x10>)
 8004352:	4804      	ldr	r0, [pc, #16]	; (8004364 <plan_get_system_motion_block+0x14>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
}
 800435a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800435e:	4770      	bx	lr
 8004360:	20000d20 	.word	0x20000d20
 8004364:	20000540 	.word	0x20000540

08004368 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <plan_get_current_block+0x1c>)
 800436a:	4a07      	ldr	r2, [pc, #28]	; (8004388 <plan_get_current_block+0x20>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	7812      	ldrb	r2, [r2, #0]
 8004370:	429a      	cmp	r2, r3
  return(&block_buffer[block_buffer_tail]);
 8004372:	bf1d      	ittte	ne
 8004374:	4805      	ldrne	r0, [pc, #20]	; (800438c <plan_get_current_block+0x24>)
 8004376:	ebc3 03c3 	rsbne	r3, r3, r3, lsl #3
 800437a:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 800437e:	2000      	moveq	r0, #0
}
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000d22 	.word	0x20000d22
 8004388:	20000d20 	.word	0x20000d20
 800438c:	20000540 	.word	0x20000540

08004390 <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <plan_get_exec_block_exit_speed_sqr+0x28>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8004392:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <plan_get_exec_block_exit_speed_sqr+0x2c>)
  block_index++;
 8004394:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8004396:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 8004398:	3301      	adds	r3, #1
 800439a:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800439c:	2b24      	cmp	r3, #36	; 0x24
 800439e:	bf08      	it	eq
 80043a0:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d006      	beq.n	80043b4 <plan_get_exec_block_exit_speed_sqr+0x24>
  return( block_buffer[block_index].entry_speed_sqr );
 80043a6:	4a06      	ldr	r2, [pc, #24]	; (80043c0 <plan_get_exec_block_exit_speed_sqr+0x30>)
 80043a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80043ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80043b0:	6998      	ldr	r0, [r3, #24]
 80043b2:	4770      	bx	lr
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80043b4:	2000      	movs	r0, #0
}
 80043b6:	4770      	bx	lr
 80043b8:	20000d22 	.word	0x20000d22
 80043bc:	20000d20 	.word	0x20000d20
 80043c0:	20000540 	.word	0x20000540

080043c4 <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <plan_check_full_buffer+0x14>)
 80043c6:	4b05      	ldr	r3, [pc, #20]	; (80043dc <plan_check_full_buffer+0x18>)
 80043c8:	7810      	ldrb	r0, [r2, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 80043cc:	1ac0      	subs	r0, r0, r3
 80043ce:	fab0 f080 	clz	r0, r0
 80043d2:	0940      	lsrs	r0, r0, #5
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000d22 	.word	0x20000d22
 80043dc:	20000d23 	.word	0x20000d23

080043e0 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 80043e0:	b538      	push	{r3, r4, r5, lr}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80043e2:	7d83      	ldrb	r3, [r0, #22]
  float nominal_speed = block->programmed_rate;
 80043e4:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80043e6:	07da      	lsls	r2, r3, #31
 80043e8:	d514      	bpl.n	8004414 <plan_compute_profile_nominal_speed+0x34>
 80043ea:	4b16      	ldr	r3, [pc, #88]	; (8004444 <plan_compute_profile_nominal_speed+0x64>)
 80043ec:	7a58      	ldrb	r0, [r3, #9]
 80043ee:	f7fc fc0f 	bl	8000c10 <__aeabi_i2f>
 80043f2:	4915      	ldr	r1, [pc, #84]	; (8004448 <plan_compute_profile_nominal_speed+0x68>)
 80043f4:	f7fc fc60 	bl	8000cb8 <__aeabi_fmul>
 80043f8:	4629      	mov	r1, r5
 80043fa:	f7fc fc5d 	bl	8000cb8 <__aeabi_fmul>
 80043fe:	4604      	mov	r4, r0
 8004400:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004404:	4620      	mov	r0, r4
 8004406:	f7fc fe09 	bl	800101c <__aeabi_fcmpge>
 800440a:	b908      	cbnz	r0, 8004410 <plan_compute_profile_nominal_speed+0x30>
 800440c:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
  return(MINIMUM_FEED_RATE);
}
 8004410:	4620      	mov	r0, r4
 8004412:	bd38      	pop	{r3, r4, r5, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004414:	075b      	lsls	r3, r3, #29
 8004416:	4604      	mov	r4, r0
 8004418:	d40b      	bmi.n	8004432 <plan_compute_profile_nominal_speed+0x52>
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <plan_compute_profile_nominal_speed+0x64>)
 800441c:	7a18      	ldrb	r0, [r3, #8]
 800441e:	f7fc fbf7 	bl	8000c10 <__aeabi_i2f>
 8004422:	4909      	ldr	r1, [pc, #36]	; (8004448 <plan_compute_profile_nominal_speed+0x68>)
 8004424:	f7fc fc48 	bl	8000cb8 <__aeabi_fmul>
 8004428:	4601      	mov	r1, r0
 800442a:	4628      	mov	r0, r5
 800442c:	f7fc fc44 	bl	8000cb8 <__aeabi_fmul>
 8004430:	4605      	mov	r5, r0
 8004432:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8004434:	4629      	mov	r1, r5
 8004436:	4620      	mov	r0, r4
 8004438:	f7fc fde6 	bl	8001008 <__aeabi_fcmple>
 800443c:	2800      	cmp	r0, #0
 800443e:	d1df      	bne.n	8004400 <plan_compute_profile_nominal_speed+0x20>
 8004440:	462c      	mov	r4, r5
 8004442:	e7dd      	b.n	8004400 <plan_compute_profile_nominal_speed+0x20>
 8004444:	200013f0 	.word	0x200013f0
 8004448:	3c23d70a 	.word	0x3c23d70a

0800444c <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 800444c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004450:	4d35      	ldr	r5, [pc, #212]	; (8004528 <plan_update_velocity_profile_parameters+0xdc>)
  uint8_t block_index = block_buffer_tail;
 8004452:	4a36      	ldr	r2, [pc, #216]	; (800452c <plan_update_velocity_profile_parameters+0xe0>)
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
  while (block_index != block_buffer_head) {
 8004454:	4b36      	ldr	r3, [pc, #216]	; (8004530 <plan_update_velocity_profile_parameters+0xe4>)
{
 8004456:	b083      	sub	sp, #12
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004458:	7a28      	ldrb	r0, [r5, #8]
  uint8_t block_index = block_buffer_tail;
 800445a:	7814      	ldrb	r4, [r2, #0]
  while (block_index != block_buffer_head) {
 800445c:	f893 b000 	ldrb.w	fp, [r3]
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004460:	f7fc fbd6 	bl	8000c10 <__aeabi_i2f>
 8004464:	4933      	ldr	r1, [pc, #204]	; (8004534 <plan_update_velocity_profile_parameters+0xe8>)
 8004466:	f7fc fc27 	bl	8000cb8 <__aeabi_fmul>
 800446a:	9001      	str	r0, [sp, #4]
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800446c:	7a68      	ldrb	r0, [r5, #9]
 800446e:	f7fc fbcf 	bl	8000c10 <__aeabi_i2f>
 8004472:	4930      	ldr	r1, [pc, #192]	; (8004534 <plan_update_velocity_profile_parameters+0xe8>)
 8004474:	f7fc fc20 	bl	8000cb8 <__aeabi_fmul>
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8004478:	4f2f      	ldr	r7, [pc, #188]	; (8004538 <plan_update_velocity_profile_parameters+0xec>)
 800447a:	9000      	str	r0, [sp, #0]
    block = &block_buffer[block_index];
 800447c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8004540 <plan_update_velocity_profile_parameters+0xf4>
 8004480:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
  while (block_index != block_buffer_head) {
 8004484:	e023      	b.n	80044ce <plan_update_velocity_profile_parameters+0x82>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004486:	4641      	mov	r1, r8
 8004488:	9800      	ldr	r0, [sp, #0]
 800448a:	f7fc fc15 	bl	8000cb8 <__aeabi_fmul>
 800448e:	4605      	mov	r5, r0
 8004490:	4649      	mov	r1, r9
 8004492:	4628      	mov	r0, r5
 8004494:	f7fc fdc2 	bl	800101c <__aeabi_fcmpge>
 8004498:	b900      	cbnz	r0, 800449c <plan_update_velocity_profile_parameters+0x50>
 800449a:	464d      	mov	r5, r9
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 800449c:	4629      	mov	r1, r5
 800449e:	4638      	mov	r0, r7
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
 80044a0:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80044a4:	f7fc fda6 	bl	8000ff4 <__aeabi_fcmplt>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d031      	beq.n	8004510 <plan_update_velocity_profile_parameters+0xc4>
 80044ac:	4639      	mov	r1, r7
 80044ae:	4638      	mov	r0, r7
 80044b0:	f7fc fc02 	bl	8000cb8 <__aeabi_fmul>
 80044b4:	4607      	mov	r7, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80044b6:	4639      	mov	r1, r7
 80044b8:	4640      	mov	r0, r8
 80044ba:	f7fc fd9b 	bl	8000ff4 <__aeabi_fcmplt>
 80044be:	bb20      	cbnz	r0, 800450a <plan_update_velocity_profile_parameters+0xbe>
 80044c0:	61f7      	str	r7, [r6, #28]
  block_index++;
 80044c2:	3401      	adds	r4, #1
 80044c4:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80044c6:	2c24      	cmp	r4, #36	; 0x24
 80044c8:	bf08      	it	eq
 80044ca:	2400      	moveq	r4, #0
 80044cc:	462f      	mov	r7, r5
  while (block_index != block_buffer_head) {
 80044ce:	45a3      	cmp	fp, r4
 80044d0:	d024      	beq.n	800451c <plan_update_velocity_profile_parameters+0xd0>
    block = &block_buffer[block_index];
 80044d2:	00e5      	lsls	r5, r4, #3
 80044d4:	1b2e      	subs	r6, r5, r4
 80044d6:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80044da:	7db3      	ldrb	r3, [r6, #22]
  float nominal_speed = block->programmed_rate;
 80044dc:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80044e0:	07da      	lsls	r2, r3, #31
 80044e2:	d4d0      	bmi.n	8004486 <plan_update_velocity_profile_parameters+0x3a>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80044e4:	075b      	lsls	r3, r3, #29
 80044e6:	d404      	bmi.n	80044f2 <plan_update_velocity_profile_parameters+0xa6>
 80044e8:	4640      	mov	r0, r8
 80044ea:	9901      	ldr	r1, [sp, #4]
 80044ec:	f7fc fbe4 	bl	8000cb8 <__aeabi_fmul>
 80044f0:	4680      	mov	r8, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 80044f2:	1b2d      	subs	r5, r5, r4
 80044f4:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 80044f8:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 80044fa:	4641      	mov	r1, r8
 80044fc:	4628      	mov	r0, r5
 80044fe:	f7fc fd83 	bl	8001008 <__aeabi_fcmple>
 8004502:	2800      	cmp	r0, #0
 8004504:	d1c4      	bne.n	8004490 <plan_update_velocity_profile_parameters+0x44>
 8004506:	4645      	mov	r5, r8
 8004508:	e7c2      	b.n	8004490 <plan_update_velocity_profile_parameters+0x44>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 800450a:	f8c6 801c 	str.w	r8, [r6, #28]
 800450e:	e7d8      	b.n	80044c2 <plan_update_velocity_profile_parameters+0x76>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004510:	4629      	mov	r1, r5
 8004512:	4628      	mov	r0, r5
 8004514:	f7fc fbd0 	bl	8000cb8 <__aeabi_fmul>
 8004518:	4607      	mov	r7, r0
 800451a:	e7cc      	b.n	80044b6 <plan_update_velocity_profile_parameters+0x6a>
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 800451c:	4b07      	ldr	r3, [pc, #28]	; (800453c <plan_update_velocity_profile_parameters+0xf0>)
 800451e:	621f      	str	r7, [r3, #32]
}
 8004520:	b003      	add	sp, #12
 8004522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004526:	bf00      	nop
 8004528:	200013f0 	.word	0x200013f0
 800452c:	20000d22 	.word	0x20000d22
 8004530:	20000d20 	.word	0x20000d20
 8004534:	3c23d70a 	.word	0x3c23d70a
 8004538:	7f7fffff 	.word	0x7f7fffff
 800453c:	20000d24 	.word	0x20000d24
 8004540:	20000540 	.word	0x20000540

08004544 <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
 8004544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004548:	468b      	mov	fp, r1
 800454a:	4682      	mov	sl, r0
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 800454c:	4b69      	ldr	r3, [pc, #420]	; (80046f4 <plan_buffer_line+0x1b0>)
 800454e:	4d6a      	ldr	r5, [pc, #424]	; (80046f8 <plan_buffer_line+0x1b4>)
 8004550:	781e      	ldrb	r6, [r3, #0]
{
 8004552:	b093      	sub	sp, #76	; 0x4c
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004554:	00f7      	lsls	r7, r6, #3
 8004556:	eba7 0806 	sub.w	r8, r7, r6
 800455a:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 800455e:	2238      	movs	r2, #56	; 0x38
 8004560:	2100      	movs	r1, #0
 8004562:	4640      	mov	r0, r8
 8004564:	f006 fc9b 	bl	800ae9e <memset>
  block->condition = pl_data->condition;
 8004568:	f89b 3008 	ldrb.w	r3, [fp, #8]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 800456c:	f8db 2004 	ldr.w	r2, [fp, #4]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) {
 8004570:	0798      	lsls	r0, r3, #30
  block->condition = pl_data->condition;
 8004572:	f888 3016 	strb.w	r3, [r8, #22]
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004576:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8004708 <plan_buffer_line+0x1c4>
    memcpy(position_steps, sys_position, sizeof(sys_position));
 800457a:	bf4c      	ite	mi
 800457c:	4b5f      	ldrmi	r3, [pc, #380]	; (80046fc <plan_buffer_line+0x1b8>)
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 800457e:	4b60      	ldrpl	r3, [pc, #384]	; (8004700 <plan_buffer_line+0x1bc>)
    block->spindle_speed = pl_data->spindle_speed;
 8004580:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004584:	ac06      	add	r4, sp, #24
 8004586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800458c:	f8d9 2000 	ldr.w	r2, [r9]
 8004590:	f8da 1000 	ldr.w	r1, [sl]
 8004594:	4610      	mov	r0, r2
 8004596:	9201      	str	r2, [sp, #4]
 8004598:	f7fc fb8e 	bl	8000cb8 <__aeabi_fmul>
 800459c:	f006 fdb8 	bl	800b110 <lroundf>
 80045a0:	4684      	mov	ip, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80045a2:	1bb9      	subs	r1, r7, r6
 80045a4:	9806      	ldr	r0, [sp, #24]
 80045a6:	00c9      	lsls	r1, r1, #3
 80045a8:	186b      	adds	r3, r5, r1
 80045aa:	ebac 0000 	sub.w	r0, ip, r0
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80045ae:	691a      	ldr	r2, [r3, #16]
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80045b0:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 80045b4:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80045b8:	4294      	cmp	r4, r2
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80045ba:	506c      	str	r4, [r5, r1]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80045bc:	bf38      	it	cc
 80045be:	4614      	movcc	r4, r2
 80045c0:	611c      	str	r4, [r3, #16]
 80045c2:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80045c4:	f8cd c008 	str.w	ip, [sp, #8]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80045c8:	f7fc fb22 	bl	8000c10 <__aeabi_i2f>
 80045cc:	9a01      	ldr	r2, [sp, #4]
 80045ce:	4611      	mov	r1, r2
 80045d0:	f7fc fc26 	bl	8000e20 <__aeabi_fdiv>
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80045d4:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80045d6:	900a      	str	r0, [sp, #40]	; 0x28
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80045d8:	f7fc fd0c 	bl	8000ff4 <__aeabi_fcmplt>
 80045dc:	9b00      	ldr	r3, [sp, #0]
 80045de:	b120      	cbz	r0, 80045ea <plan_buffer_line+0xa6>
 80045e0:	4a48      	ldr	r2, [pc, #288]	; (8004704 <plan_buffer_line+0x1c0>)
 80045e2:	8a99      	ldrh	r1, [r3, #20]
 80045e4:	8812      	ldrh	r2, [r2, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	829a      	strh	r2, [r3, #20]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80045ea:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80045ee:	f8da 1004 	ldr.w	r1, [sl, #4]
 80045f2:	4610      	mov	r0, r2
 80045f4:	9201      	str	r2, [sp, #4]
 80045f6:	f7fc fb5f 	bl	8000cb8 <__aeabi_fmul>
 80045fa:	f006 fd89 	bl	800b110 <lroundf>
 80045fe:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004600:	9807      	ldr	r0, [sp, #28]
 8004602:	1bbb      	subs	r3, r7, r6
 8004604:	1a08      	subs	r0, r1, r0
 8004606:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 800460a:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800460e:	4564      	cmp	r4, ip
 8004610:	bf38      	it	cc
 8004612:	4664      	movcc	r4, ip
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004614:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004618:	f8c3 c004 	str.w	ip, [r3, #4]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800461c:	611c      	str	r4, [r3, #16]
 800461e:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004620:	9103      	str	r1, [sp, #12]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004622:	f7fc faf5 	bl	8000c10 <__aeabi_i2f>
 8004626:	9a01      	ldr	r2, [sp, #4]
 8004628:	4611      	mov	r1, r2
 800462a:	f7fc fbf9 	bl	8000e20 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800462e:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004630:	900b      	str	r0, [sp, #44]	; 0x2c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004632:	f7fc fcdf 	bl	8000ff4 <__aeabi_fcmplt>
 8004636:	9b00      	ldr	r3, [sp, #0]
 8004638:	b120      	cbz	r0, 8004644 <plan_buffer_line+0x100>
 800463a:	4a32      	ldr	r2, [pc, #200]	; (8004704 <plan_buffer_line+0x1c0>)
 800463c:	8a99      	ldrh	r1, [r3, #20]
 800463e:	8852      	ldrh	r2, [r2, #2]
 8004640:	430a      	orrs	r2, r1
 8004642:	829a      	strh	r2, [r3, #20]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004644:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8004648:	f8da 1008 	ldr.w	r1, [sl, #8]
 800464c:	4610      	mov	r0, r2
 800464e:	9201      	str	r2, [sp, #4]
 8004650:	f7fc fb32 	bl	8000cb8 <__aeabi_fmul>
 8004654:	f006 fd5c 	bl	800b110 <lroundf>
 8004658:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800465a:	9808      	ldr	r0, [sp, #32]
 800465c:	1bbb      	subs	r3, r7, r6
 800465e:	1a08      	subs	r0, r1, r0
 8004660:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 8004664:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004668:	4564      	cmp	r4, ip
 800466a:	bf38      	it	cc
 800466c:	4664      	movcc	r4, ip
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800466e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004672:	f8c3 c008 	str.w	ip, [r3, #8]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004676:	611c      	str	r4, [r3, #16]
 8004678:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800467a:	9104      	str	r1, [sp, #16]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 800467c:	f7fc fac8 	bl	8000c10 <__aeabi_i2f>
 8004680:	9a01      	ldr	r2, [sp, #4]
 8004682:	4611      	mov	r1, r2
 8004684:	f7fc fbcc 	bl	8000e20 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004688:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 800468a:	900c      	str	r0, [sp, #48]	; 0x30
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800468c:	f7fc fcb2 	bl	8000ff4 <__aeabi_fcmplt>
 8004690:	9b00      	ldr	r3, [sp, #0]
 8004692:	b120      	cbz	r0, 800469e <plan_buffer_line+0x15a>
 8004694:	491b      	ldr	r1, [pc, #108]	; (8004704 <plan_buffer_line+0x1c0>)
 8004696:	8a9a      	ldrh	r2, [r3, #20]
 8004698:	8889      	ldrh	r1, [r1, #4]
 800469a:	430a      	orrs	r2, r1
 800469c:	829a      	strh	r2, [r3, #20]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800469e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80046a2:	f8da 100c 	ldr.w	r1, [sl, #12]
 80046a6:	4618      	mov	r0, r3
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	f7fc fb05 	bl	8000cb8 <__aeabi_fmul>
 80046ae:	f006 fd2f 	bl	800b110 <lroundf>
 80046b2:	4602      	mov	r2, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80046b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046b6:	eba7 0a06 	sub.w	sl, r7, r6
 80046ba:	1a10      	subs	r0, r2, r0
 80046bc:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 80046c0:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80046c4:	428c      	cmp	r4, r1
 80046c6:	bf38      	it	cc
 80046c8:	460c      	movcc	r4, r1
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80046ca:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80046ce:	e9ca 1403 	strd	r1, r4, [sl, #12]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80046d2:	9205      	str	r2, [sp, #20]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80046d4:	f7fc fa9c 	bl	8000c10 <__aeabi_i2f>
 80046d8:	9b00      	ldr	r3, [sp, #0]
 80046da:	4619      	mov	r1, r3
 80046dc:	f7fc fba0 	bl	8000e20 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80046e0:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80046e2:	900d      	str	r0, [sp, #52]	; 0x34
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80046e4:	f7fc fc86 	bl	8000ff4 <__aeabi_fcmplt>
 80046e8:	b980      	cbnz	r0, 800470c <plan_buffer_line+0x1c8>
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 80046ea:	b9c4      	cbnz	r4, 800471e <plan_buffer_line+0x1da>
 80046ec:	4620      	mov	r0, r4

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
  }
  return(PLAN_OK);
}
 80046ee:	b013      	add	sp, #76	; 0x4c
 80046f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f4:	20000d20 	.word	0x20000d20
 80046f8:	20000540 	.word	0x20000540
 80046fc:	20001418 	.word	0x20001418
 8004700:	20000d24 	.word	0x20000d24
 8004704:	0800c310 	.word	0x0800c310
 8004708:	200015ac 	.word	0x200015ac
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800470c:	4baa      	ldr	r3, [pc, #680]	; (80049b8 <plan_buffer_line+0x474>)
 800470e:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8004712:	88db      	ldrh	r3, [r3, #6]
 8004714:	4313      	orrs	r3, r2
 8004716:	f8aa 3014 	strh.w	r3, [sl, #20]
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 800471a:	2c00      	cmp	r4, #0
 800471c:	d0e6      	beq.n	80046ec <plan_buffer_line+0x1a8>
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 800471e:	ac0a      	add	r4, sp, #40	; 0x28
 8004720:	4620      	mov	r0, r4
 8004722:	f7ff fc25 	bl	8003f70 <convert_delta_vector_to_unit_vector>
 8004726:	eba7 0a06 	sub.w	sl, r7, r6
 800472a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800472e:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004732:	4621      	mov	r1, r4
 8004734:	48a1      	ldr	r0, [pc, #644]	; (80049bc <plan_buffer_line+0x478>)
 8004736:	f7ff fc77 	bl	8004028 <limit_value_by_axis_maximum>
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 800473a:	4621      	mov	r1, r4
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 800473c:	f8ca 0020 	str.w	r0, [sl, #32]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004740:	489f      	ldr	r0, [pc, #636]	; (80049c0 <plan_buffer_line+0x47c>)
 8004742:	f7ff fc71 	bl	8004028 <limit_value_by_axis_maximum>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004746:	f89a 3016 	ldrb.w	r3, [sl, #22]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 800474a:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 800474e:	07d9      	lsls	r1, r3, #31
 8004750:	f100 80c2 	bmi.w	80048d8 <plan_buffer_line+0x394>
    block->programmed_rate = pl_data->feed_rate;
 8004754:	f8db 1000 	ldr.w	r1, [fp]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004758:	071a      	lsls	r2, r3, #28
    block->programmed_rate = pl_data->feed_rate;
 800475a:	f8ca 1030 	str.w	r1, [sl, #48]	; 0x30
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 800475e:	d507      	bpl.n	8004770 <plan_buffer_line+0x22c>
 8004760:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	f7fc faa7 	bl	8000cb8 <__aeabi_fmul>
 800476a:	9b00      	ldr	r3, [sp, #0]
 800476c:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004770:	4a94      	ldr	r2, [pc, #592]	; (80049c4 <plan_buffer_line+0x480>)
 8004772:	4995      	ldr	r1, [pc, #596]	; (80049c8 <plan_buffer_line+0x484>)
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	7809      	ldrb	r1, [r1, #0]
 8004778:	4291      	cmp	r1, r2
 800477a:	f000 80b0 	beq.w	80048de <plan_buffer_line+0x39a>
 800477e:	079b      	lsls	r3, r3, #30
 8004780:	f100 80ad 	bmi.w	80048de <plan_buffer_line+0x39a>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004784:	4b91      	ldr	r3, [pc, #580]	; (80049cc <plan_buffer_line+0x488>)
 8004786:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800478a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800478e:	4651      	mov	r1, sl
 8004790:	4658      	mov	r0, fp
 8004792:	f7fc fa91 	bl	8000cb8 <__aeabi_fmul>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004796:	4659      	mov	r1, fp
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004798:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800479c:	4650      	mov	r0, sl
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800479e:	9300      	str	r3, [sp, #0]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047a0:	f7fc f980 	bl	8000aa4 <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047a4:	4b89      	ldr	r3, [pc, #548]	; (80049cc <plan_buffer_line+0x488>)
 80047a6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80047aa:	f8d3 b014 	ldr.w	fp, [r3, #20]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047ae:	900e      	str	r0, [sp, #56]	; 0x38
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047b0:	4659      	mov	r1, fp
 80047b2:	4650      	mov	r0, sl
 80047b4:	f7fc fa80 	bl	8000cb8 <__aeabi_fmul>
 80047b8:	9b00      	ldr	r3, [sp, #0]
 80047ba:	4601      	mov	r1, r0
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fc f971 	bl	8000aa4 <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047c2:	4659      	mov	r1, fp
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047c4:	9001      	str	r0, [sp, #4]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047c6:	4650      	mov	r0, sl
 80047c8:	f7fc f96c 	bl	8000aa4 <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047cc:	4b7f      	ldr	r3, [pc, #508]	; (80049cc <plan_buffer_line+0x488>)
 80047ce:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	4659      	mov	r1, fp
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047d6:	900f      	str	r0, [sp, #60]	; 0x3c
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047d8:	4618      	mov	r0, r3
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	f7fc fa6c 	bl	8000cb8 <__aeabi_fmul>
 80047e0:	9a01      	ldr	r2, [sp, #4]
 80047e2:	4601      	mov	r1, r0
 80047e4:	4610      	mov	r0, r2
 80047e6:	f7fc f95d 	bl	8000aa4 <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047ea:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047ec:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047ee:	4619      	mov	r1, r3
 80047f0:	4658      	mov	r0, fp
 80047f2:	f7fc f957 	bl	8000aa4 <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047f6:	4b75      	ldr	r3, [pc, #468]	; (80049cc <plan_buffer_line+0x488>)
 80047f8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80047fc:	69db      	ldr	r3, [r3, #28]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047fe:	9010      	str	r0, [sp, #64]	; 0x40
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004800:	4659      	mov	r1, fp
 8004802:	4618      	mov	r0, r3
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	f7fc fa57 	bl	8000cb8 <__aeabi_fmul>
 800480a:	4601      	mov	r1, r0
 800480c:	4650      	mov	r0, sl
 800480e:	f7fc f949 	bl	8000aa4 <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004812:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004814:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004816:	4619      	mov	r1, r3
 8004818:	4658      	mov	r0, fp
 800481a:	f7fc f943 	bl	8000aa4 <__aeabi_fsub>
    if (junction_cos_theta > 0.999999f) {
 800481e:	496c      	ldr	r1, [pc, #432]	; (80049d0 <plan_buffer_line+0x48c>)
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004820:	9011      	str	r0, [sp, #68]	; 0x44
    if (junction_cos_theta > 0.999999f) {
 8004822:	4650      	mov	r0, sl
 8004824:	f7fc fc04 	bl	8001030 <__aeabi_fcmpgt>
 8004828:	2800      	cmp	r0, #0
 800482a:	f000 8085 	beq.w	8004938 <plan_buffer_line+0x3f4>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 800482e:	2200      	movs	r2, #0
 8004830:	1bbb      	subs	r3, r7, r6
 8004832:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004836:	629a      	str	r2, [r3, #40]	; 0x28
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004838:	1bbb      	subs	r3, r7, r6
 800483a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800483e:	7d9a      	ldrb	r2, [r3, #22]
 8004840:	0790      	lsls	r0, r2, #30
 8004842:	d453      	bmi.n	80048ec <plan_buffer_line+0x3a8>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004844:	07d1      	lsls	r1, r2, #31
  float nominal_speed = block->programmed_rate;
 8004846:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800484a:	d553      	bpl.n	80048f4 <plan_buffer_line+0x3b0>
 800484c:	4b61      	ldr	r3, [pc, #388]	; (80049d4 <plan_buffer_line+0x490>)
 800484e:	7a58      	ldrb	r0, [r3, #9]
 8004850:	f7fc f9de 	bl	8000c10 <__aeabi_i2f>
 8004854:	4649      	mov	r1, r9
 8004856:	f7fc fa2f 	bl	8000cb8 <__aeabi_fmul>
 800485a:	495f      	ldr	r1, [pc, #380]	; (80049d8 <plan_buffer_line+0x494>)
 800485c:	f7fc fa2c 	bl	8000cb8 <__aeabi_fmul>
 8004860:	4605      	mov	r5, r0
 8004862:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004866:	4628      	mov	r0, r5
 8004868:	f7fc fbd8 	bl	800101c <__aeabi_fcmpge>
 800486c:	b908      	cbnz	r0, 8004872 <plan_buffer_line+0x32e>
 800486e:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004872:	4e56      	ldr	r6, [pc, #344]	; (80049cc <plan_buffer_line+0x488>)
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004874:	4629      	mov	r1, r5
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004876:	f8d6 9020 	ldr.w	r9, [r6, #32]
 800487a:	f8d8 7028 	ldr.w	r7, [r8, #40]	; 0x28
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 800487e:	4648      	mov	r0, r9
 8004880:	f7fc fbb8 	bl	8000ff4 <__aeabi_fcmplt>
 8004884:	2800      	cmp	r0, #0
 8004886:	d051      	beq.n	800492c <plan_buffer_line+0x3e8>
 8004888:	4649      	mov	r1, r9
 800488a:	4648      	mov	r0, r9
 800488c:	f7fc fa14 	bl	8000cb8 <__aeabi_fmul>
 8004890:	4681      	mov	r9, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004892:	4639      	mov	r1, r7
 8004894:	4648      	mov	r0, r9
 8004896:	f7fc fbcb 	bl	8001030 <__aeabi_fcmpgt>
 800489a:	2800      	cmp	r0, #0
 800489c:	d143      	bne.n	8004926 <plan_buffer_line+0x3e2>
 800489e:	f8c8 901c 	str.w	r9, [r8, #28]
    block_buffer_head = next_buffer_head;
 80048a2:	4a4e      	ldr	r2, [pc, #312]	; (80049dc <plan_buffer_line+0x498>)
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 80048a4:	4f4e      	ldr	r7, [pc, #312]	; (80049e0 <plan_buffer_line+0x49c>)
    block_buffer_head = next_buffer_head;
 80048a6:	7811      	ldrb	r1, [r2, #0]
 80048a8:	4847      	ldr	r0, [pc, #284]	; (80049c8 <plan_buffer_line+0x484>)
  block_index++;
 80048aa:	1c4b      	adds	r3, r1, #1
 80048ac:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80048ae:	2b24      	cmp	r3, #36	; 0x24
 80048b0:	bf08      	it	eq
 80048b2:	2300      	moveq	r3, #0
    pl.previous_nominal_speed = nominal_speed;
 80048b4:	6235      	str	r5, [r6, #32]
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 80048b6:	ad02      	add	r5, sp, #8
    block_buffer_head = next_buffer_head;
 80048b8:	7001      	strb	r1, [r0, #0]
    next_buffer_head = plan_next_block_index(block_buffer_head);
 80048ba:	7013      	strb	r3, [r2, #0]
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 80048bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048c0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 80048c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80048c8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    planner_recalculate();
 80048cc:	f7ff fc02 	bl	80040d4 <planner_recalculate>
  return(PLAN_OK);
 80048d0:	2001      	movs	r0, #1
}
 80048d2:	b013      	add	sp, #76	; 0x4c
 80048d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 80048d8:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
 80048dc:	e748      	b.n	8004770 <plan_buffer_line+0x22c>
    block->entry_speed_sqr = 0.0f;
 80048de:	2200      	movs	r2, #0
 80048e0:	1bbb      	subs	r3, r7, r6
 80048e2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80048e6:	619a      	str	r2, [r3, #24]
    block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 80048e8:	629a      	str	r2, [r3, #40]	; 0x28
 80048ea:	e7a5      	b.n	8004838 <plan_buffer_line+0x2f4>
  return(PLAN_OK);
 80048ec:	2001      	movs	r0, #1
}
 80048ee:	b013      	add	sp, #76	; 0x4c
 80048f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80048f4:	0753      	lsls	r3, r2, #29
 80048f6:	d40a      	bmi.n	800490e <plan_buffer_line+0x3ca>
 80048f8:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <plan_buffer_line+0x490>)
 80048fa:	7a18      	ldrb	r0, [r3, #8]
 80048fc:	f7fc f988 	bl	8000c10 <__aeabi_i2f>
 8004900:	4649      	mov	r1, r9
 8004902:	f7fc f9d9 	bl	8000cb8 <__aeabi_fmul>
 8004906:	4934      	ldr	r1, [pc, #208]	; (80049d8 <plan_buffer_line+0x494>)
 8004908:	f7fc f9d6 	bl	8000cb8 <__aeabi_fmul>
 800490c:	4681      	mov	r9, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 800490e:	1bbe      	subs	r6, r7, r6
 8004910:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 8004914:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8004916:	4649      	mov	r1, r9
 8004918:	4628      	mov	r0, r5
 800491a:	f7fc fb75 	bl	8001008 <__aeabi_fcmple>
 800491e:	2800      	cmp	r0, #0
 8004920:	d19f      	bne.n	8004862 <plan_buffer_line+0x31e>
 8004922:	464d      	mov	r5, r9
 8004924:	e79d      	b.n	8004862 <plan_buffer_line+0x31e>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004926:	f8c8 701c 	str.w	r7, [r8, #28]
 800492a:	e7ba      	b.n	80048a2 <plan_buffer_line+0x35e>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 800492c:	4629      	mov	r1, r5
 800492e:	4628      	mov	r0, r5
 8004930:	f7fc f9c2 	bl	8000cb8 <__aeabi_fmul>
 8004934:	4681      	mov	r9, r0
 8004936:	e7ac      	b.n	8004892 <plan_buffer_line+0x34e>
      if (junction_cos_theta < -0.999999f) {
 8004938:	492a      	ldr	r1, [pc, #168]	; (80049e4 <plan_buffer_line+0x4a0>)
 800493a:	4650      	mov	r0, sl
 800493c:	f7fc fb5a 	bl	8000ff4 <__aeabi_fcmplt>
 8004940:	b128      	cbz	r0, 800494e <plan_buffer_line+0x40a>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8004942:	1bbb      	subs	r3, r7, r6
 8004944:	4a28      	ldr	r2, [pc, #160]	; (80049e8 <plan_buffer_line+0x4a4>)
 8004946:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800494a:	629a      	str	r2, [r3, #40]	; 0x28
 800494c:	e774      	b.n	8004838 <plan_buffer_line+0x2f4>
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 800494e:	a80e      	add	r0, sp, #56	; 0x38
 8004950:	f7ff fb0e 	bl	8003f70 <convert_delta_vector_to_unit_vector>
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004954:	a90e      	add	r1, sp, #56	; 0x38
 8004956:	4819      	ldr	r0, [pc, #100]	; (80049bc <plan_buffer_line+0x478>)
 8004958:	f7ff fb66 	bl	8004028 <limit_value_by_axis_maximum>
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 800495c:	4651      	mov	r1, sl
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 800495e:	9000      	str	r0, [sp, #0]
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004960:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004964:	f7fc f89e 	bl	8000aa4 <__aeabi_fsub>
 8004968:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800496c:	f7fc f9a4 	bl	8000cb8 <__aeabi_fmul>
 8004970:	f006 fc32 	bl	800b1d8 <sqrtf>
 8004974:	4683      	mov	fp, r0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8004976:	9b00      	ldr	r3, [sp, #0]
 8004978:	4659      	mov	r1, fp
 800497a:	4618      	mov	r0, r3
 800497c:	f7fc f99c 	bl	8000cb8 <__aeabi_fmul>
 8004980:	f8d9 1048 	ldr.w	r1, [r9, #72]	; 0x48
 8004984:	f7fc f998 	bl	8000cb8 <__aeabi_fmul>
 8004988:	4659      	mov	r1, fp
 800498a:	4681      	mov	r9, r0
 800498c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004990:	f7fc f888 	bl	8000aa4 <__aeabi_fsub>
 8004994:	4601      	mov	r1, r0
 8004996:	4648      	mov	r0, r9
 8004998:	f7fc fa42 	bl	8000e20 <__aeabi_fdiv>
 800499c:	eba7 0a06 	sub.w	sl, r7, r6
 80049a0:	2100      	movs	r1, #0
 80049a2:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80049a6:	4681      	mov	r9, r0
 80049a8:	f7fc fb38 	bl	800101c <__aeabi_fcmpge>
 80049ac:	b908      	cbnz	r0, 80049b2 <plan_buffer_line+0x46e>
 80049ae:	f04f 0900 	mov.w	r9, #0
 80049b2:	f8ca 9028 	str.w	r9, [sl, #40]	; 0x28
 80049b6:	e73f      	b.n	8004838 <plan_buffer_line+0x2f4>
 80049b8:	0800c310 	.word	0x0800c310
 80049bc:	200015cc 	.word	0x200015cc
 80049c0:	200015bc 	.word	0x200015bc
 80049c4:	20000d22 	.word	0x20000d22
 80049c8:	20000d20 	.word	0x20000d20
 80049cc:	20000d24 	.word	0x20000d24
 80049d0:	3f7fffef 	.word	0x3f7fffef
 80049d4:	200013f0 	.word	0x200013f0
 80049d8:	3c23d70a 	.word	0x3c23d70a
 80049dc:	20000d23 	.word	0x20000d23
 80049e0:	20000d34 	.word	0x20000d34
 80049e4:	bf7fffef 	.word	0xbf7fffef
 80049e8:	7f7fffff 	.word	0x7f7fffff

080049ec <plan_sync_position>:
        pl.position[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      } else {
        pl.position[idx] = sys_position[idx];
      }
    #else
      pl.position[idx] = sys_position[idx];
 80049ec:	4a06      	ldr	r2, [pc, #24]	; (8004a08 <plan_sync_position+0x1c>)
 80049ee:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <plan_sync_position+0x20>)
{
 80049f0:	b410      	push	{r4}
      pl.position[idx] = sys_position[idx];
 80049f2:	e9d2 4000 	ldrd	r4, r0, [r2]
 80049f6:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 80049fa:	e9c3 4000 	strd	r4, r0, [r3]
 80049fe:	e9c3 1202 	strd	r1, r2, [r3, #8]
    #endif
  }
}
 8004a02:	bc10      	pop	{r4}
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20001418 	.word	0x20001418
 8004a0c:	20000d24 	.word	0x20000d24

08004a10 <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8004a10:	4a06      	ldr	r2, [pc, #24]	; (8004a2c <plan_get_block_buffer_available+0x1c>)
 8004a12:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <plan_get_block_buffer_available+0x20>)
 8004a14:	7812      	ldrb	r2, [r2, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	bf2c      	ite	cs
 8004a1c:	f103 0023 	addcs.w	r0, r3, #35	; 0x23
  return((block_buffer_tail-block_buffer_head-1));
 8004a20:	f103 30ff 	addcc.w	r0, r3, #4294967295	; 0xffffffff
 8004a24:	1a80      	subs	r0, r0, r2
 8004a26:	b2c0      	uxtb	r0, r0
}
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	20000d20 	.word	0x20000d20
 8004a30:	20000d22 	.word	0x20000d22

08004a34 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8004a34:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8004a36:	f003 fea7 	bl	8008788 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8004a3a:	4a04      	ldr	r2, [pc, #16]	; (8004a4c <plan_cycle_reinitialize+0x18>)
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <plan_cycle_reinitialize+0x1c>)
 8004a3e:	7812      	ldrb	r2, [r2, #0]
 8004a40:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 8004a42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 8004a46:	f7ff bb45 	b.w	80040d4 <planner_recalculate>
 8004a4a:	bf00      	nop
 8004a4c:	20000d22 	.word	0x20000d22
 8004a50:	20000d21 	.word	0x20000d21

08004a54 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8004a54:	b510      	push	{r4, lr}
 8004a56:	4604      	mov	r4, r0
  while (*s)
 8004a58:	7800      	ldrb	r0, [r0, #0]
 8004a5a:	b128      	cbz	r0, 8004a68 <printString+0x14>
    serial_write(*s++);
 8004a5c:	f002 fc8a 	bl	8007374 <serial_write>
  while (*s)
 8004a60:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d1f9      	bne.n	8004a5c <printString+0x8>
}
 8004a68:	bd10      	pop	{r4, pc}
 8004a6a:	bf00      	nop

08004a6c <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 8004a6c:	2863      	cmp	r0, #99	; 0x63
{
 8004a6e:	b570      	push	{r4, r5, r6, lr}
 8004a70:	4605      	mov	r5, r0
  if (n >= 100) { // 100-255
 8004a72:	d920      	bls.n	8004ab6 <print_uint8_base10+0x4a>
    digit_a = '0' + n % 10;
    n /= 10;
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
    n /= 10;
 8004a74:	481c      	ldr	r0, [pc, #112]	; (8004ae8 <print_uint8_base10+0x7c>)
 8004a76:	fba0 3005 	umull	r3, r0, r0, r5
 8004a7a:	0940      	lsrs	r0, r0, #5
  }
  serial_write('0' + n);
 8004a7c:	3030      	adds	r0, #48	; 0x30
 8004a7e:	f002 fc79 	bl	8007374 <serial_write>
    n /= 10;
 8004a82:	481a      	ldr	r0, [pc, #104]	; (8004aec <print_uint8_base10+0x80>)
 8004a84:	fba0 3405 	umull	r3, r4, r0, r5
 8004a88:	08e4      	lsrs	r4, r4, #3
    digit_b = '0' + n % 10;
 8004a8a:	b2e3      	uxtb	r3, r4
 8004a8c:	fba0 2003 	umull	r2, r0, r0, r3
 8004a90:	08c0      	lsrs	r0, r0, #3
 8004a92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a96:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 8004a9a:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004a9c:	b2c0      	uxtb	r0, r0
 8004a9e:	f002 fc69 	bl	8007374 <serial_write>
    digit_a = '0' + n % 10;
 8004aa2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8004aa6:	eba5 0040 	sub.w	r0, r5, r0, lsl #1
 8004aaa:	3030      	adds	r0, #48	; 0x30
  if (digit_a) { serial_write(digit_a); }
 8004aac:	b2c0      	uxtb	r0, r0
}
 8004aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (digit_a) { serial_write(digit_a); }
 8004ab2:	f002 bc5f 	b.w	8007374 <serial_write>
  if (n >= 10) { // 10-99
 8004ab6:	2809      	cmp	r0, #9
 8004ab8:	d805      	bhi.n	8004ac6 <print_uint8_base10+0x5a>
}
 8004aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  serial_write('0' + n);
 8004abe:	3030      	adds	r0, #48	; 0x30
 8004ac0:	b2c0      	uxtb	r0, r0
 8004ac2:	f002 bc57 	b.w	8007374 <serial_write>
    n /= 10;
 8004ac6:	260a      	movs	r6, #10
 8004ac8:	fbb0 f4f6 	udiv	r4, r0, r6
  serial_write('0' + n);
 8004acc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004ad0:	b2c0      	uxtb	r0, r0
 8004ad2:	f002 fc4f 	bl	8007374 <serial_write>
    digit_b = '0' + n % 10;
 8004ad6:	fb06 5014 	mls	r0, r6, r4, r5
}
 8004ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digit_b = '0' + n % 10;
 8004ade:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004ae0:	b2c0      	uxtb	r0, r0
 8004ae2:	f002 bc47 	b.w	8007374 <serial_write>
 8004ae6:	bf00      	nop
 8004ae8:	51eb851f 	.word	0x51eb851f
 8004aec:	cccccccd 	.word	0xcccccccd

08004af0 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8004af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af2:	460d      	mov	r5, r1
 8004af4:	b085      	sub	sp, #20
  if (n < 0) {
 8004af6:	2100      	movs	r1, #0
{
 8004af8:	4606      	mov	r6, r0
  if (n < 0) {
 8004afa:	f7fc fa7b 	bl	8000ff4 <__aeabi_fcmplt>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	f040 80c2 	bne.w	8004c88 <printFloat+0x198>
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004b04:	2d01      	cmp	r5, #1
 8004b06:	f240 80c7 	bls.w	8004c98 <printFloat+0x1a8>
 8004b0a:	462c      	mov	r4, r5
    n *= 100;
 8004b0c:	4f6d      	ldr	r7, [pc, #436]	; (8004cc4 <printFloat+0x1d4>)
 8004b0e:	4630      	mov	r0, r6
 8004b10:	4639      	mov	r1, r7
 8004b12:	f7fc f8d1 	bl	8000cb8 <__aeabi_fmul>
    decimals -= 2;
 8004b16:	3c02      	subs	r4, #2
 8004b18:	b2e4      	uxtb	r4, r4
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004b1a:	2c01      	cmp	r4, #1
    n *= 100;
 8004b1c:	4606      	mov	r6, r0
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004b1e:	d8f6      	bhi.n	8004b0e <printFloat+0x1e>
 8004b20:	f005 0301 	and.w	r3, r5, #1
  }
  if (decimals) { n *= 10; }
 8004b24:	b123      	cbz	r3, 8004b30 <printFloat+0x40>
 8004b26:	4630      	mov	r0, r6
 8004b28:	4967      	ldr	r1, [pc, #412]	; (8004cc8 <printFloat+0x1d8>)
 8004b2a:	f7fc f8c5 	bl	8000cb8 <__aeabi_fmul>
 8004b2e:	4606      	mov	r6, r0
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004b30:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004b34:	4630      	mov	r0, r6
 8004b36:	f7fb ffb7 	bl	8000aa8 <__addsf3>

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 8004b3a:	f7fc fa99 	bl	8001070 <__aeabi_f2iz>
  while(a > 0) {
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	f000 80ac 	beq.w	8004c9c <printFloat+0x1ac>
  uint8_t i = 0;
 8004b44:	2200      	movs	r2, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004b46:	4e61      	ldr	r6, [pc, #388]	; (8004ccc <printFloat+0x1dc>)
 8004b48:	fba6 1300 	umull	r1, r3, r6, r0
 8004b4c:	08db      	lsrs	r3, r3, #3
 8004b4e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004b52:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004b56:	1c54      	adds	r4, r2, #1
 8004b58:	a904      	add	r1, sp, #16
 8004b5a:	3030      	adds	r0, #48	; 0x30
 8004b5c:	440a      	add	r2, r1
 8004b5e:	b2e4      	uxtb	r4, r4
 8004b60:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004b64:	4622      	mov	r2, r4
  while(a > 0) {
 8004b66:	4618      	mov	r0, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1ed      	bne.n	8004b48 <printFloat+0x58>
    a /= 10;
  }
  while (i < decimal_places) {
 8004b6c:	42a5      	cmp	r5, r4
 8004b6e:	d968      	bls.n	8004c42 <printFloat+0x152>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b70:	2130      	movs	r1, #48	; 0x30
 8004b72:	1c63      	adds	r3, r4, #1
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	aa04      	add	r2, sp, #16
 8004b78:	4422      	add	r2, r4
  while (i < decimal_places) {
 8004b7a:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b7c:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004b80:	d97e      	bls.n	8004c80 <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b82:	1ca2      	adds	r2, r4, #2
 8004b84:	a804      	add	r0, sp, #16
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004b8a:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b8c:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004b90:	d972      	bls.n	8004c78 <printFloat+0x188>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b92:	1ce3      	adds	r3, r4, #3
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004b98:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b9a:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004b9e:	d96f      	bls.n	8004c80 <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ba0:	1d22      	adds	r2, r4, #4
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004ba6:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ba8:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004bac:	d964      	bls.n	8004c78 <printFloat+0x188>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bae:	1d63      	adds	r3, r4, #5
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004bb4:	42ab      	cmp	r3, r5
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bb6:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004bba:	d261      	bcs.n	8004c80 <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bbc:	1da2      	adds	r2, r4, #6
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004bc2:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bc4:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004bc8:	d956      	bls.n	8004c78 <printFloat+0x188>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bca:	1de3      	adds	r3, r4, #7
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004bd0:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bd2:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004bd6:	d953      	bls.n	8004c80 <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bd8:	f104 0208 	add.w	r2, r4, #8
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004be0:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004be2:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004be6:	d947      	bls.n	8004c78 <printFloat+0x188>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004be8:	f104 0309 	add.w	r3, r4, #9
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004bf0:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bf2:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004bf6:	d943      	bls.n	8004c80 <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bf8:	f104 020a 	add.w	r2, r4, #10
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004c00:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c02:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004c06:	d937      	bls.n	8004c78 <printFloat+0x188>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c08:	f104 030b 	add.w	r3, r4, #11
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004c10:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c12:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004c16:	d933      	bls.n	8004c80 <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c18:	f104 020c 	add.w	r2, r4, #12
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004c20:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c22:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004c26:	d927      	bls.n	8004c78 <printFloat+0x188>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c28:	f104 030d 	add.w	r3, r4, #13
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004c30:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c32:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004c36:	d923      	bls.n	8004c80 <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c38:	340e      	adds	r4, #14
 8004c3a:	4403      	add	r3, r0
 8004c3c:	b2e4      	uxtb	r4, r4
 8004c3e:	f803 1c10 	strb.w	r1, [r3, #-16]
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004c42:	42a5      	cmp	r5, r4
 8004c44:	d010      	beq.n	8004c68 <printFloat+0x178>
    buf[i++] = '0';
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8004c46:	b16c      	cbz	r4, 8004c64 <printFloat+0x174>
 8004c48:	1e6b      	subs	r3, r5, #1
 8004c4a:	eb0d 0604 	add.w	r6, sp, r4
 8004c4e:	b2df      	uxtb	r7, r3
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004c50:	42a5      	cmp	r5, r4
 8004c52:	d026      	beq.n	8004ca2 <printFloat+0x1b2>
    serial_write(buf[i-1]);
 8004c54:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 8004c58:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8004c5a:	f002 fb8b 	bl	8007374 <serial_write>
  for (; i > 0; i--) {
 8004c5e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004c62:	d1f5      	bne.n	8004c50 <printFloat+0x160>
  }
}
 8004c64:	b005      	add	sp, #20
 8004c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    buf[i++] = '0';
 8004c68:	2230      	movs	r2, #48	; 0x30
 8004c6a:	ab04      	add	r3, sp, #16
 8004c6c:	1c6c      	adds	r4, r5, #1
 8004c6e:	442b      	add	r3, r5
 8004c70:	f803 2c10 	strb.w	r2, [r3, #-16]
 8004c74:	b2e4      	uxtb	r4, r4
 8004c76:	e7e6      	b.n	8004c46 <printFloat+0x156>
  while (i < decimal_places) {
 8004c78:	4614      	mov	r4, r2
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004c7a:	42a5      	cmp	r5, r4
 8004c7c:	d1e3      	bne.n	8004c46 <printFloat+0x156>
 8004c7e:	e7f3      	b.n	8004c68 <printFloat+0x178>
  while (i < decimal_places) {
 8004c80:	461c      	mov	r4, r3
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004c82:	42a5      	cmp	r5, r4
 8004c84:	d1df      	bne.n	8004c46 <printFloat+0x156>
 8004c86:	e7ef      	b.n	8004c68 <printFloat+0x178>
    serial_write('-');
 8004c88:	202d      	movs	r0, #45	; 0x2d
 8004c8a:	f002 fb73 	bl	8007374 <serial_write>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004c8e:	2d01      	cmp	r5, #1
    n = -n;
 8004c90:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004c94:	f63f af39 	bhi.w	8004b0a <printFloat+0x1a>
 8004c98:	462b      	mov	r3, r5
 8004c9a:	e743      	b.n	8004b24 <printFloat+0x34>
  while (i < decimal_places) {
 8004c9c:	b165      	cbz	r5, 8004cb8 <printFloat+0x1c8>
  uint8_t i = 0;
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	e766      	b.n	8004b70 <printFloat+0x80>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004ca2:	202e      	movs	r0, #46	; 0x2e
 8004ca4:	f002 fb66 	bl	8007374 <serial_write>
    serial_write(buf[i-1]);
 8004ca8:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8004cac:	f002 fb62 	bl	8007374 <serial_write>
  for (; i > 0; i--) {
 8004cb0:	463c      	mov	r4, r7
 8004cb2:	2f00      	cmp	r7, #0
 8004cb4:	d1cc      	bne.n	8004c50 <printFloat+0x160>
 8004cb6:	e7d5      	b.n	8004c64 <printFloat+0x174>
    buf[i++] = '0';
 8004cb8:	2330      	movs	r3, #48	; 0x30
 8004cba:	2401      	movs	r4, #1
 8004cbc:	f88d 3000 	strb.w	r3, [sp]
 8004cc0:	e7c2      	b.n	8004c48 <printFloat+0x158>
 8004cc2:	bf00      	nop
 8004cc4:	42c80000 	.word	0x42c80000
 8004cc8:	41200000 	.word	0x41200000
 8004ccc:	cccccccd 	.word	0xcccccccd

08004cd0 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8004cd0:	b530      	push	{r4, r5, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004cd2:	4b72      	ldr	r3, [pc, #456]	; (8004e9c <printFloat_CoordValue+0x1cc>)
void printFloat_CoordValue(float n) {
 8004cd4:	b085      	sub	sp, #20
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004cd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004cda:	07db      	lsls	r3, r3, #31
 8004cdc:	d457      	bmi.n	8004d8e <printFloat_CoordValue+0xbe>
  if (n < 0) {
 8004cde:	2100      	movs	r1, #0
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	f7fc f987 	bl	8000ff4 <__aeabi_fcmplt>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	f040 80b1 	bne.w	8004e4e <printFloat_CoordValue+0x17e>
  if (decimals) { n *= 10; }
 8004cec:	496c      	ldr	r1, [pc, #432]	; (8004ea0 <printFloat_CoordValue+0x1d0>)
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f7fb ffe2 	bl	8000cb8 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004cf4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004cf8:	f7fb fed6 	bl	8000aa8 <__addsf3>
  uint32_t a = (long)n;
 8004cfc:	f7fc f9b8 	bl	8001070 <__aeabi_f2iz>
  while(a > 0) {
 8004d00:	2800      	cmp	r0, #0
 8004d02:	f000 80aa 	beq.w	8004e5a <printFloat_CoordValue+0x18a>
  uint8_t i = 0;
 8004d06:	2400      	movs	r4, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004d08:	4d66      	ldr	r5, [pc, #408]	; (8004ea4 <printFloat_CoordValue+0x1d4>)
 8004d0a:	e000      	b.n	8004d0e <printFloat_CoordValue+0x3e>
 8004d0c:	461c      	mov	r4, r3
 8004d0e:	fba5 3200 	umull	r3, r2, r5, r0
 8004d12:	08d2      	lsrs	r2, r2, #3
 8004d14:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8004d18:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8004d1c:	a904      	add	r1, sp, #16
 8004d1e:	3030      	adds	r0, #48	; 0x30
 8004d20:	1c63      	adds	r3, r4, #1
 8004d22:	4421      	add	r1, r4
 8004d24:	f801 0c10 	strb.w	r0, [r1, #-16]
 8004d28:	b2db      	uxtb	r3, r3
  while(a > 0) {
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	2a00      	cmp	r2, #0
 8004d2e:	d1ed      	bne.n	8004d0c <printFloat_CoordValue+0x3c>
  while (i < decimal_places) {
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	f200 80aa 	bhi.w	8004e8a <printFloat_CoordValue+0x1ba>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d36:	2130      	movs	r1, #48	; 0x30
 8004d38:	1ca2      	adds	r2, r4, #2
 8004d3a:	a804      	add	r0, sp, #16
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004d40:	2a03      	cmp	r2, #3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d42:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004d46:	d007      	beq.n	8004d58 <printFloat_CoordValue+0x88>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d48:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004d4a:	2cff      	cmp	r4, #255	; 0xff
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d4c:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004d50:	d102      	bne.n	8004d58 <printFloat_CoordValue+0x88>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d52:	2330      	movs	r3, #48	; 0x30
 8004d54:	f88d 3002 	strb.w	r3, [sp, #2]
    buf[i++] = '0';
 8004d58:	2530      	movs	r5, #48	; 0x30
 8004d5a:	2304      	movs	r3, #4
 8004d5c:	f88d 5003 	strb.w	r5, [sp, #3]
 8004d60:	e00a      	b.n	8004d78 <printFloat_CoordValue+0xa8>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004d62:	202e      	movs	r0, #46	; 0x2e
 8004d64:	f002 fb06 	bl	8007374 <serial_write>
    serial_write(buf[i-1]);
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f002 fb03 	bl	8007374 <serial_write>
 8004d6e:	aa04      	add	r2, sp, #16
    buf[i++] = '0';
 8004d70:	4623      	mov	r3, r4
 8004d72:	4414      	add	r4, r2
 8004d74:	f814 5c11 	ldrb.w	r5, [r4, #-17]
 8004d78:	1e5c      	subs	r4, r3, #1
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	b2e4      	uxtb	r4, r4
 8004d7e:	d0f0      	beq.n	8004d62 <printFloat_CoordValue+0x92>
    serial_write(buf[i-1]);
 8004d80:	4628      	mov	r0, r5
 8004d82:	f002 faf7 	bl	8007374 <serial_write>
  for (; i > 0; i--) {
 8004d86:	2c00      	cmp	r4, #0
 8004d88:	d1f1      	bne.n	8004d6e <printFloat_CoordValue+0x9e>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8004d8a:	b005      	add	sp, #20
 8004d8c:	bd30      	pop	{r4, r5, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004d8e:	4946      	ldr	r1, [pc, #280]	; (8004ea8 <printFloat_CoordValue+0x1d8>)
 8004d90:	f7fb ff92 	bl	8000cb8 <__aeabi_fmul>
  if (n < 0) {
 8004d94:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004d96:	4604      	mov	r4, r0
  if (n < 0) {
 8004d98:	f7fc f92c 	bl	8000ff4 <__aeabi_fcmplt>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d161      	bne.n	8004e64 <printFloat_CoordValue+0x194>
    n *= 100;
 8004da0:	4942      	ldr	r1, [pc, #264]	; (8004eac <printFloat_CoordValue+0x1dc>)
 8004da2:	4620      	mov	r0, r4
 8004da4:	f7fb ff88 	bl	8000cb8 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004da8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004dac:	f7fb fe7c 	bl	8000aa8 <__addsf3>
  uint32_t a = (long)n;
 8004db0:	f7fc f95e 	bl	8001070 <__aeabi_f2iz>
  while(a > 0) {
 8004db4:	2800      	cmp	r0, #0
 8004db6:	d05b      	beq.n	8004e70 <printFloat_CoordValue+0x1a0>
  uint8_t i = 0;
 8004db8:	2400      	movs	r4, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004dba:	4d3a      	ldr	r5, [pc, #232]	; (8004ea4 <printFloat_CoordValue+0x1d4>)
 8004dbc:	e000      	b.n	8004dc0 <printFloat_CoordValue+0xf0>
 8004dbe:	461c      	mov	r4, r3
 8004dc0:	fba5 3200 	umull	r3, r2, r5, r0
 8004dc4:	08d2      	lsrs	r2, r2, #3
 8004dc6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8004dca:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8004dce:	a904      	add	r1, sp, #16
 8004dd0:	3030      	adds	r0, #48	; 0x30
 8004dd2:	1c63      	adds	r3, r4, #1
 8004dd4:	4421      	add	r1, r4
 8004dd6:	f801 0c10 	strb.w	r0, [r1, #-16]
 8004dda:	b2db      	uxtb	r3, r3
  while(a > 0) {
 8004ddc:	4610      	mov	r0, r2
 8004dde:	2a00      	cmp	r2, #0
 8004de0:	d1ed      	bne.n	8004dbe <printFloat_CoordValue+0xee>
  while (i < decimal_places) {
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d84a      	bhi.n	8004e7c <printFloat_CoordValue+0x1ac>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004de6:	2130      	movs	r1, #48	; 0x30
 8004de8:	1ca2      	adds	r2, r4, #2
 8004dea:	a804      	add	r0, sp, #16
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004df0:	2a04      	cmp	r2, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004df2:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004df6:	d00f      	beq.n	8004e18 <printFloat_CoordValue+0x148>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004df8:	3403      	adds	r4, #3
 8004dfa:	b2e4      	uxtb	r4, r4
 8004dfc:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004dfe:	2c04      	cmp	r4, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e00:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004e04:	d008      	beq.n	8004e18 <printFloat_CoordValue+0x148>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e06:	2330      	movs	r3, #48	; 0x30
 8004e08:	aa04      	add	r2, sp, #16
 8004e0a:	4422      	add	r2, r4
  while (i < decimal_places) {
 8004e0c:	2c02      	cmp	r4, #2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e0e:	f802 3c10 	strb.w	r3, [r2, #-16]
  while (i < decimal_places) {
 8004e12:	d101      	bne.n	8004e18 <printFloat_CoordValue+0x148>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e14:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[i++] = '0';
 8004e18:	2530      	movs	r5, #48	; 0x30
 8004e1a:	2305      	movs	r3, #5
 8004e1c:	f88d 5004 	strb.w	r5, [sp, #4]
 8004e20:	e00a      	b.n	8004e38 <printFloat_CoordValue+0x168>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004e22:	202e      	movs	r0, #46	; 0x2e
 8004e24:	f002 faa6 	bl	8007374 <serial_write>
    serial_write(buf[i-1]);
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f002 faa3 	bl	8007374 <serial_write>
 8004e2e:	aa04      	add	r2, sp, #16
    buf[i++] = '0';
 8004e30:	4623      	mov	r3, r4
 8004e32:	4414      	add	r4, r2
 8004e34:	f814 5c11 	ldrb.w	r5, [r4, #-17]
 8004e38:	1e5c      	subs	r4, r3, #1
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	b2e4      	uxtb	r4, r4
 8004e3e:	d0f0      	beq.n	8004e22 <printFloat_CoordValue+0x152>
    serial_write(buf[i-1]);
 8004e40:	4628      	mov	r0, r5
 8004e42:	f002 fa97 	bl	8007374 <serial_write>
  for (; i > 0; i--) {
 8004e46:	2c00      	cmp	r4, #0
 8004e48:	d1f1      	bne.n	8004e2e <printFloat_CoordValue+0x15e>
}
 8004e4a:	b005      	add	sp, #20
 8004e4c:	bd30      	pop	{r4, r5, pc}
    serial_write('-');
 8004e4e:	202d      	movs	r0, #45	; 0x2d
 8004e50:	f002 fa90 	bl	8007374 <serial_write>
    n = -n;
 8004e54:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004e58:	e748      	b.n	8004cec <printFloat_CoordValue+0x1c>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e5a:	f243 0330 	movw	r3, #12336	; 0x3030
 8004e5e:	f8ad 3000 	strh.w	r3, [sp]
 8004e62:	e776      	b.n	8004d52 <printFloat_CoordValue+0x82>
    serial_write('-');
 8004e64:	202d      	movs	r0, #45	; 0x2d
 8004e66:	f002 fa85 	bl	8007374 <serial_write>
    n = -n;
 8004e6a:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004e6e:	e797      	b.n	8004da0 <printFloat_CoordValue+0xd0>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e70:	f243 0330 	movw	r3, #12336	; 0x3030
 8004e74:	2402      	movs	r4, #2
 8004e76:	f8ad 3000 	strh.w	r3, [sp]
 8004e7a:	e7c4      	b.n	8004e06 <printFloat_CoordValue+0x136>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d0cb      	beq.n	8004e18 <printFloat_CoordValue+0x148>
 8004e80:	aa04      	add	r2, sp, #16
 8004e82:	441a      	add	r2, r3
 8004e84:	f812 5c11 	ldrb.w	r5, [r2, #-17]
 8004e88:	e7d6      	b.n	8004e38 <printFloat_CoordValue+0x168>
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	f43f af64 	beq.w	8004d58 <printFloat_CoordValue+0x88>
 8004e90:	aa04      	add	r2, sp, #16
 8004e92:	441a      	add	r2, r3
 8004e94:	f812 5c11 	ldrb.w	r5, [r2, #-17]
 8004e98:	e76e      	b.n	8004d78 <printFloat_CoordValue+0xa8>
 8004e9a:	bf00      	nop
 8004e9c:	200015ac 	.word	0x200015ac
 8004ea0:	447a0000 	.word	0x447a0000
 8004ea4:	cccccccd 	.word	0xcccccccd
 8004ea8:	3d21428b 	.word	0x3d21428b
 8004eac:	461c4000 	.word	0x461c4000

08004eb0 <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 8004eb0:	b570      	push	{r4, r5, r6, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004eb2:	4b4c      	ldr	r3, [pc, #304]	; (8004fe4 <printFloat_RateValue+0x134>)
void printFloat_RateValue(float n) {
 8004eb4:	b084      	sub	sp, #16
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004eb6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004eba:	07db      	lsls	r3, r3, #31
 8004ebc:	d433      	bmi.n	8004f26 <printFloat_RateValue+0x76>
  if (n < 0) {
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	f7fc f897 	bl	8000ff4 <__aeabi_fcmplt>
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d174      	bne.n	8004fb4 <printFloat_RateValue+0x104>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004eca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f7fb fdea 	bl	8000aa8 <__addsf3>
  uint32_t a = (long)n;
 8004ed4:	f7fc f8cc 	bl	8001070 <__aeabi_f2iz>
  while(a > 0) {
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d071      	beq.n	8004fc0 <printFloat_RateValue+0x110>
  uint8_t i = 0;
 8004edc:	2400      	movs	r4, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004ede:	4d42      	ldr	r5, [pc, #264]	; (8004fe8 <printFloat_RateValue+0x138>)
 8004ee0:	e000      	b.n	8004ee4 <printFloat_RateValue+0x34>
 8004ee2:	461c      	mov	r4, r3
 8004ee4:	fba5 3200 	umull	r3, r2, r5, r0
 8004ee8:	08d2      	lsrs	r2, r2, #3
 8004eea:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8004eee:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8004ef2:	a904      	add	r1, sp, #16
 8004ef4:	3030      	adds	r0, #48	; 0x30
 8004ef6:	1c63      	adds	r3, r4, #1
 8004ef8:	4421      	add	r1, r4
 8004efa:	f801 0c10 	strb.w	r0, [r1, #-16]
 8004efe:	b2db      	uxtb	r3, r3
  while(a > 0) {
 8004f00:	4610      	mov	r0, r2
 8004f02:	2a00      	cmp	r2, #0
 8004f04:	d1ed      	bne.n	8004ee2 <printFloat_RateValue+0x32>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d05a      	beq.n	8004fc0 <printFloat_RateValue+0x110>
 8004f0a:	f10d 32ff 	add.w	r2, sp, #4294967295	; 0xffffffff
 8004f0e:	18d5      	adds	r5, r2, r3
 8004f10:	1b2d      	subs	r5, r5, r4
 8004f12:	eb0d 0403 	add.w	r4, sp, r3
    serial_write(buf[i-1]);
 8004f16:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 8004f1a:	f002 fa2b 	bl	8007374 <serial_write>
  for (; i > 0; i--) {
 8004f1e:	42a5      	cmp	r5, r4
 8004f20:	d1f9      	bne.n	8004f16 <printFloat_RateValue+0x66>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 8004f22:	b004      	add	sp, #16
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004f26:	4931      	ldr	r1, [pc, #196]	; (8004fec <printFloat_RateValue+0x13c>)
 8004f28:	f7fb fec6 	bl	8000cb8 <__aeabi_fmul>
  if (n < 0) {
 8004f2c:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004f2e:	4604      	mov	r4, r0
  if (n < 0) {
 8004f30:	f7fc f860 	bl	8000ff4 <__aeabi_fcmplt>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d149      	bne.n	8004fcc <printFloat_RateValue+0x11c>
  if (decimals) { n *= 10; }
 8004f38:	492d      	ldr	r1, [pc, #180]	; (8004ff0 <printFloat_RateValue+0x140>)
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f7fb febc 	bl	8000cb8 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004f40:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f44:	f7fb fdb0 	bl	8000aa8 <__addsf3>
  uint32_t a = (long)n;
 8004f48:	f7fc f892 	bl	8001070 <__aeabi_f2iz>
  while(a > 0) {
 8004f4c:	b1a0      	cbz	r0, 8004f78 <printFloat_RateValue+0xc8>
  uint8_t i = 0;
 8004f4e:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004f50:	4c25      	ldr	r4, [pc, #148]	; (8004fe8 <printFloat_RateValue+0x138>)
 8004f52:	fba4 3200 	umull	r3, r2, r4, r0
 8004f56:	08d2      	lsrs	r2, r2, #3
 8004f58:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8004f5c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8004f60:	ad04      	add	r5, sp, #16
 8004f62:	1c4b      	adds	r3, r1, #1
 8004f64:	3030      	adds	r0, #48	; 0x30
 8004f66:	4429      	add	r1, r5
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f801 0c10 	strb.w	r0, [r1, #-16]
 8004f6e:	4619      	mov	r1, r3
  while(a > 0) {
 8004f70:	4610      	mov	r0, r2
 8004f72:	2a00      	cmp	r2, #0
 8004f74:	d1ed      	bne.n	8004f52 <printFloat_RateValue+0xa2>
  while (i < decimal_places) {
 8004f76:	bb7b      	cbnz	r3, 8004fd8 <printFloat_RateValue+0x128>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004f78:	2330      	movs	r3, #48	; 0x30
 8004f7a:	f88d 3000 	strb.w	r3, [sp]
    buf[i++] = '0';
 8004f7e:	2230      	movs	r2, #48	; 0x30
 8004f80:	2302      	movs	r3, #2
 8004f82:	4616      	mov	r6, r2
 8004f84:	f88d 2001 	strb.w	r2, [sp, #1]
 8004f88:	1e5c      	subs	r4, r3, #1
 8004f8a:	b2e5      	uxtb	r5, r4
 8004f8c:	446d      	add	r5, sp
 8004f8e:	e000      	b.n	8004f92 <printFloat_RateValue+0xe2>
 8004f90:	1e5c      	subs	r4, r3, #1
    serial_write(buf[i-1]);
 8004f92:	4630      	mov	r0, r6
 8004f94:	f002 f9ee 	bl	8007374 <serial_write>
  for (; i > 0; i--) {
 8004f98:	b2e3      	uxtb	r3, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
 8004fa0:	d1f6      	bne.n	8004f90 <printFloat_RateValue+0xe0>
 8004fa2:	202e      	movs	r0, #46	; 0x2e
 8004fa4:	f002 f9e6 	bl	8007374 <serial_write>
    serial_write(buf[i-1]);
 8004fa8:	4630      	mov	r0, r6
}
 8004faa:	b004      	add	sp, #16
 8004fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serial_write(buf[i-1]);
 8004fb0:	f002 b9e0 	b.w	8007374 <serial_write>
    serial_write('-');
 8004fb4:	202d      	movs	r0, #45	; 0x2d
 8004fb6:	f002 f9dd 	bl	8007374 <serial_write>
    n = -n;
 8004fba:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004fbe:	e784      	b.n	8004eca <printFloat_RateValue+0x1a>
    serial_write(buf[i-1]);
 8004fc0:	2030      	movs	r0, #48	; 0x30
}
 8004fc2:	b004      	add	sp, #16
 8004fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serial_write(buf[i-1]);
 8004fc8:	f002 b9d4 	b.w	8007374 <serial_write>
    serial_write('-');
 8004fcc:	202d      	movs	r0, #45	; 0x2d
 8004fce:	f002 f9d1 	bl	8007374 <serial_write>
    n = -n;
 8004fd2:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004fd6:	e7af      	b.n	8004f38 <printFloat_RateValue+0x88>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d0d0      	beq.n	8004f7e <printFloat_RateValue+0xce>
 8004fdc:	4429      	add	r1, r5
 8004fde:	f811 6c11 	ldrb.w	r6, [r1, #-17]
 8004fe2:	e7d1      	b.n	8004f88 <printFloat_RateValue+0xd8>
 8004fe4:	200015ac 	.word	0x200015ac
 8004fe8:	cccccccd 	.word	0xcccccccd
 8004fec:	3d21428b 	.word	0x3d21428b
 8004ff0:	41200000 	.word	0x41200000

08004ff4 <probe_init>:
uint16_t probe_invert_mask;


// Probe pin initialization routine.
void probe_init()
{
 8004ff4:	b510      	push	{r4, lr}
    PROBE_PORT |= PROBE_MASK;    // Enable internal pull-up resistors. Normal high operation.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8004ff6:	2101      	movs	r1, #1
{
 8004ff8:	b082      	sub	sp, #8
#ifdef DISABLE_PROBE_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8004ffa:	f44f 7400 	mov.w	r4, #512	; 0x200
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8004ffe:	2008      	movs	r0, #8
 8005000:	f7fc fbc8 	bl	8001794 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005004:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8005006:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8005008:	a902      	add	r1, sp, #8
 800500a:	f821 4d04 	strh.w	r4, [r1, #-4]!
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 800500e:	4809      	ldr	r0, [pc, #36]	; (8005034 <probe_init+0x40>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005010:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8005014:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8005018:	f7fc f9d0 	bl	80013bc <GPIO_Init>
// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
 800501c:	2100      	movs	r1, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 800501e:	4a06      	ldr	r2, [pc, #24]	; (8005038 <probe_init+0x44>)
  probe_invert_mask = 0; // Initialize as zero.
 8005020:	4b06      	ldr	r3, [pc, #24]	; (800503c <probe_init+0x48>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005022:	f992 2058 	ldrsb.w	r2, [r2, #88]	; 0x58
  probe_invert_mask = 0; // Initialize as zero.
 8005026:	8019      	strh	r1, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005028:	428a      	cmp	r2, r1
 800502a:	bfa8      	it	ge
 800502c:	801c      	strhge	r4, [r3, #0]
}
 800502e:	b002      	add	sp, #8
 8005030:	bd10      	pop	{r4, pc}
 8005032:	bf00      	nop
 8005034:	40010c00 	.word	0x40010c00
 8005038:	200015ac 	.word	0x200015ac
 800503c:	2000142a 	.word	0x2000142a

08005040 <probe_configure_invert_mask>:
  probe_invert_mask = 0; // Initialize as zero.
 8005040:	2300      	movs	r3, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005042:	4907      	ldr	r1, [pc, #28]	; (8005060 <probe_configure_invert_mask+0x20>)
  probe_invert_mask = 0; // Initialize as zero.
 8005044:	4a07      	ldr	r2, [pc, #28]	; (8005064 <probe_configure_invert_mask+0x24>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005046:	f991 1058 	ldrsb.w	r1, [r1, #88]	; 0x58
  probe_invert_mask = 0; // Initialize as zero.
 800504a:	8013      	strh	r3, [r2, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 800504c:	4299      	cmp	r1, r3
 800504e:	bfaa      	itet	ge
 8005050:	f44f 7100 	movge.w	r1, #512	; 0x200
 8005054:	f44f 7300 	movlt.w	r3, #512	; 0x200
 8005058:	8011      	strhge	r1, [r2, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_MASK; }
 800505a:	b100      	cbz	r0, 800505e <probe_configure_invert_mask+0x1e>
 800505c:	8013      	strh	r3, [r2, #0]
}
 800505e:	4770      	bx	lr
 8005060:	200015ac 	.word	0x200015ac
 8005064:	2000142a 	.word	0x2000142a

08005068 <probe_get_state>:


// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state() 
{ 
 8005068:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
	return 0;
#endif
#ifdef STM32F103C8
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 800506a:	4805      	ldr	r0, [pc, #20]	; (8005080 <probe_get_state+0x18>)
 800506c:	f7fc fb2c 	bl	80016c8 <GPIO_ReadInputData>
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <probe_get_state+0x1c>)
 8005072:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8005076:	881b      	ldrh	r3, [r3, #0]
#endif
}
 8005078:	1a18      	subs	r0, r3, r0
 800507a:	bf18      	it	ne
 800507c:	2001      	movne	r0, #1
 800507e:	bd08      	pop	{r3, pc}
 8005080:	40010c00 	.word	0x40010c00
 8005084:	2000142a 	.word	0x2000142a

08005088 <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 8005088:	b538      	push	{r3, r4, r5, lr}
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 800508a:	480b      	ldr	r0, [pc, #44]	; (80050b8 <probe_state_monitor+0x30>)
 800508c:	f7fc fb1c 	bl	80016c8 <GPIO_ReadInputData>
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <probe_state_monitor+0x34>)
  if (probe_get_state()) {
 8005092:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	4283      	cmp	r3, r0
 800509a:	d00c      	beq.n	80050b6 <probe_state_monitor+0x2e>
    sys_probe_state = PROBE_OFF;
 800509c:	2100      	movs	r1, #0
 800509e:	4a08      	ldr	r2, [pc, #32]	; (80050c0 <probe_state_monitor+0x38>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 80050a0:	4d08      	ldr	r5, [pc, #32]	; (80050c4 <probe_state_monitor+0x3c>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 80050a2:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <probe_state_monitor+0x40>)
 80050a4:	4c09      	ldr	r4, [pc, #36]	; (80050cc <probe_state_monitor+0x44>)
    sys_probe_state = PROBE_OFF;
 80050a6:	7011      	strb	r1, [r2, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 80050a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 80050ae:	782b      	ldrb	r3, [r5, #0]
 80050b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b4:	702b      	strb	r3, [r5, #0]
  }
}
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	40010c00 	.word	0x40010c00
 80050bc:	2000142a 	.word	0x2000142a
 80050c0:	20001406 	.word	0x20001406
 80050c4:	20001405 	.word	0x20001405
 80050c8:	20001418 	.word	0x20001418
 80050cc:	20001408 	.word	0x20001408

080050d0 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 80050d0:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 80050d2:	f7ff f949 	bl	8004368 <plan_get_current_block>
 80050d6:	b120      	cbz	r0, 80050e2 <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  }
}
 80050d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 80050dc:	2002      	movs	r0, #2
 80050de:	f004 bc03 	b.w	80098e8 <system_set_exec_state_flag>
}
 80050e2:	bd08      	pop	{r3, pc}

080050e4 <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 80050e6:	4bae      	ldr	r3, [pc, #696]	; (80053a0 <protocol_exec_rt_system+0x2bc>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f040 80b2 	bne.w	8005254 <protocol_exec_rt_system+0x170>
 80050f0:	4cac      	ldr	r4, [pc, #688]	; (80053a4 <protocol_exec_rt_system+0x2c0>)
 80050f2:	4dad      	ldr	r5, [pc, #692]	; (80053a8 <protocol_exec_rt_system+0x2c4>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 80050f4:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 80050f6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d05b      	beq.n	80051b6 <protocol_exec_rt_system+0xd2>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 80050fe:	06e8      	lsls	r0, r5, #27
 8005100:	f100 80a5 	bmi.w	800524e <protocol_exec_rt_system+0x16a>
      sys.abort = true;  // Only place this is set true.
      return; // Nothing else to do but exit.
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005104:	07e9      	lsls	r1, r5, #31
 8005106:	f100 8123 	bmi.w	8005350 <protocol_exec_rt_system+0x26c>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 800510a:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 800510e:	d033      	beq.n	8005178 <protocol_exec_rt_system+0x94>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005110:	7823      	ldrb	r3, [r4, #0]
 8005112:	b26e      	sxtb	r6, r5
 8005114:	079a      	lsls	r2, r3, #30
 8005116:	d129      	bne.n	800516c <protocol_exec_rt_system+0x88>
      
        // If in CYCLE or JOG states, immediately initiate a motion HOLD.
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005118:	f013 0f28 	tst.w	r3, #40	; 0x28
 800511c:	f040 814c 	bne.w	80053b8 <protocol_exec_rt_system+0x2d4>
 8005120:	f005 0140 	and.w	r1, r5, #64	; 0x40
 8005124:	f005 0208 	and.w	r2, r5, #8
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
            }
          }
        }
        // If IDLE, Grbl is not in motion. Simply indicate suspend state and hold is complete.
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005128:	2b00      	cmp	r3, #0
 800512a:	f040 814d 	bne.w	80053c8 <protocol_exec_rt_system+0x2e4>
 800512e:	2001      	movs	r0, #1
 8005130:	70a0      	strb	r0, [r4, #2]

        // Execute and flag a motion cancel with deceleration and return to idle. Used primarily by probing cycle
        // to halt and cancel the remainder of the motion.
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005132:	2900      	cmp	r1, #0
 8005134:	f000 816f 	beq.w	8005416 <protocol_exec_rt_system+0x332>
 8005138:	2141      	movs	r1, #65	; 0x41
          // MOTION_CANCEL only occurs during a CYCLE, but a HOLD and SAFETY_DOOR may been initiated beforehand
          // to hold the CYCLE. Motion cancel is valid for a single planner block motion only, while jog cancel
          // will handle and clear multiple planner block motions.
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 800513a:	70a1      	strb	r1, [r4, #2]
        }

        // Execute a feed hold with deceleration, if required. Then, suspend system.
        if (rt_exec & EXEC_FEED_HOLD) {
 800513c:	b11a      	cbz	r2, 8005146 <protocol_exec_rt_system+0x62>
          // Block SAFETY_DOOR, JOG, and SLEEP states from changing to HOLD state.
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 800513e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005142:	f000 816b 	beq.w	800541c <protocol_exec_rt_system+0x338>
        }

        // Execute a safety door stop with a feed hold and disable spindle/coolant.
        // NOTE: Safety door differs from feed holds by stopping everything no matter state, disables powered
        // devices (spindle/coolant), and blocks resuming until switch is re-engaged.
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005146:	06a8      	lsls	r0, r5, #26
 8005148:	d510      	bpl.n	800516c <protocol_exec_rt_system+0x88>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 800514a:	2006      	movs	r0, #6
 800514c:	f001 f9c4 	bl	80064d8 <report_feedback_message>
          // If jogging, block safety door methods until jog cancel is complete. Just flag that it happened.
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005150:	78a3      	ldrb	r3, [r4, #2]
 8005152:	0619      	lsls	r1, r3, #24
 8005154:	d407      	bmi.n	8005166 <protocol_exec_rt_system+0x82>
            // Check if the safety re-opened during a restore parking motion only. Ignore if
            // already retracting, parked or in sleep state.
            if (sys.state == STATE_SAFETY_DOOR) {
 8005156:	7822      	ldrb	r2, [r4, #0]
 8005158:	2a40      	cmp	r2, #64	; 0x40
 800515a:	f000 81a0 	beq.w	800549e <protocol_exec_rt_system+0x3ba>
                #endif
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
                sys.suspend |= SUSPEND_RESTART_RETRACT;
              }
            }
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 800515e:	2a80      	cmp	r2, #128	; 0x80
 8005160:	d001      	beq.n	8005166 <protocol_exec_rt_system+0x82>
 8005162:	2240      	movs	r2, #64	; 0x40
 8005164:	7022      	strb	r2, [r4, #0]
          }
          // NOTE: This flag doesn't change when the door closes, unlike sys.state. Ensures any parking motions
          // are executed if the door switch closes and the state returns to HOLD.
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005166:	f043 0320 	orr.w	r3, r3, #32
 800516a:	70a3      	strb	r3, [r4, #2]
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 800516c:	2e00      	cmp	r6, #0
 800516e:	f2c0 813f 	blt.w	80053f0 <protocol_exec_rt_system+0x30c>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
        sys.state = STATE_SLEEP; 
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005172:	20e8      	movs	r0, #232	; 0xe8
 8005174:	f004 fbc2 	bl	80098fc <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 8005178:	07ab      	lsls	r3, r5, #30
 800517a:	d519      	bpl.n	80051b0 <protocol_exec_rt_system+0xcc>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 800517c:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005180:	d113      	bne.n	80051aa <protocol_exec_rt_system+0xc6>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005182:	7823      	ldrb	r3, [r4, #0]
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	f000 812a 	beq.w	80053de <protocol_exec_rt_system+0x2fa>
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 800518a:	2b00      	cmp	r3, #0
 800518c:	f040 8149 	bne.w	8005422 <protocol_exec_rt_system+0x33e>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005190:	2300      	movs	r3, #0
 8005192:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005194:	f7ff f8e8 	bl	8004368 <plan_get_current_block>
 8005198:	b120      	cbz	r0, 80051a4 <protocol_exec_rt_system+0xc0>
 800519a:	78a3      	ldrb	r3, [r4, #2]
 800519c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80051a0:	f000 816e 	beq.w	8005480 <protocol_exec_rt_system+0x39c>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
              sys.state = STATE_CYCLE;
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
              st_wake_up();
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80051a4:	2300      	movs	r3, #0
 80051a6:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 80051a8:	7023      	strb	r3, [r4, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80051aa:	2002      	movs	r0, #2
 80051ac:	f004 fba6 	bl	80098fc <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 80051b0:	0769      	lsls	r1, r5, #29
 80051b2:	f100 80b5 	bmi.w	8005320 <protocol_exec_rt_system+0x23c>
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 80051b6:	4b7d      	ldr	r3, [pc, #500]	; (80053ac <protocol_exec_rt_system+0x2c8>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 80051ba:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d173      	bne.n	80052aa <protocol_exec_rt_system+0x1c6>
      plan_update_velocity_profile_parameters();
      plan_cycle_reinitialize();
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 80051c2:	4b7b      	ldr	r3, [pc, #492]	; (80053b0 <protocol_exec_rt_system+0x2cc>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 80051c6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80051ca:	b923      	cbnz	r3, 80051d6 <protocol_exec_rt_system+0xf2>
 80051cc:	7823      	ldrb	r3, [r4, #0]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 80051ce:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 80051d2:	d138      	bne.n	8005246 <protocol_exec_rt_system+0x162>
    st_prep_buffer();
  }

}
 80051d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 80051d6:	f004 fbc7 	bl	8009968 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 80051da:	7aa2      	ldrb	r2, [r4, #10]
 80051dc:	f015 0f01 	tst.w	r5, #1
 80051e0:	bf0c      	ite	eq
 80051e2:	4613      	moveq	r3, r2
 80051e4:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80051e6:	07ae      	lsls	r6, r5, #30
 80051e8:	bf44      	itt	mi
 80051ea:	330a      	addmi	r3, #10
 80051ec:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80051ee:	0768      	lsls	r0, r5, #29
 80051f0:	bf44      	itt	mi
 80051f2:	3b0a      	submi	r3, #10
 80051f4:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80051f6:	0729      	lsls	r1, r5, #28
 80051f8:	bf44      	itt	mi
 80051fa:	3301      	addmi	r3, #1
 80051fc:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80051fe:	06ef      	lsls	r7, r5, #27
 8005200:	bf44      	itt	mi
 8005202:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8005206:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005208:	2bc8      	cmp	r3, #200	; 0xc8
 800520a:	bf28      	it	cs
 800520c:	23c8      	movcs	r3, #200	; 0xc8
 800520e:	2b0a      	cmp	r3, #10
 8005210:	bf38      	it	cc
 8005212:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005214:	429a      	cmp	r2, r3
 8005216:	d006      	beq.n	8005226 <protocol_exec_rt_system+0x142>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005218:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800521a:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 800521c:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800521e:	f042 0308 	orr.w	r3, r2, #8
 8005222:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005224:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005226:	06ae      	lsls	r6, r5, #26
 8005228:	7823      	ldrb	r3, [r4, #0]
 800522a:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
 800522e:	d520      	bpl.n	8005272 <protocol_exec_rt_system+0x18e>
      if (sys.state == STATE_HOLD) {
 8005230:	2b10      	cmp	r3, #16
 8005232:	d11e      	bne.n	8005272 <protocol_exec_rt_system+0x18e>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005234:	7ae1      	ldrb	r1, [r4, #11]
 8005236:	2900      	cmp	r1, #0
 8005238:	f040 80e4 	bne.w	8005404 <protocol_exec_rt_system+0x320>
 800523c:	2102      	movs	r1, #2
 800523e:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005240:	2a00      	cmp	r2, #0
 8005242:	f040 8099 	bne.w	8005378 <protocol_exec_rt_system+0x294>
}
 8005246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    st_prep_buffer();
 800524a:	f003 bab3 	b.w	80087b4 <st_prep_buffer>
      sys.abort = true;  // Only place this is set true.
 800524e:	2301      	movs	r3, #1
 8005250:	7063      	strb	r3, [r4, #1]
}
 8005252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys.state = STATE_ALARM; // Set system alarm state
 8005254:	2601      	movs	r6, #1
 8005256:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800525a:	4c52      	ldr	r4, [pc, #328]	; (80053a4 <protocol_exec_rt_system+0x2c0>)
    report_alarm_message(rt_exec);
 800525c:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 800525e:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8005260:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 8005262:	f001 f923 	bl	80064ac <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005266:	42b5      	cmp	r5, r6
 8005268:	d978      	bls.n	800535c <protocol_exec_rt_system+0x278>
 800526a:	4d4f      	ldr	r5, [pc, #316]	; (80053a8 <protocol_exec_rt_system+0x2c4>)
    system_clear_exec_alarm(); // Clear alarm
 800526c:	f004 fb58 	bl	8009920 <system_clear_exec_alarm>
 8005270:	e740      	b.n	80050f4 <protocol_exec_rt_system+0x10>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005272:	2a00      	cmp	r2, #0
 8005274:	d0ab      	beq.n	80051ce <protocol_exec_rt_system+0xea>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005276:	2b00      	cmp	r3, #0
 8005278:	d17e      	bne.n	8005378 <protocol_exec_rt_system+0x294>
        uint8_t coolant_state = gc_state.modal.coolant;
 800527a:	4f4e      	ldr	r7, [pc, #312]	; (80053b4 <protocol_exec_rt_system+0x2d0>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 800527c:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 800527e:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005280:	d505      	bpl.n	800528e <protocol_exec_rt_system+0x1aa>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005282:	0633      	lsls	r3, r6, #24
 8005284:	bf4c      	ite	mi
 8005286:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 800528a:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 800528e:	0668      	lsls	r0, r5, #25
 8005290:	d505      	bpl.n	800529e <protocol_exec_rt_system+0x1ba>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005292:	0671      	lsls	r1, r6, #25
 8005294:	bf4c      	ite	mi
 8005296:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 800529a:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 800529e:	4630      	mov	r0, r6
 80052a0:	f7fc fbb4 	bl	8001a0c <coolant_set_state>
 80052a4:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 80052a6:	723e      	strb	r6, [r7, #8]
 80052a8:	e791      	b.n	80051ce <protocol_exec_rt_system+0xea>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 80052aa:	f004 fb55 	bl	8009958 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 80052ae:	7a21      	ldrb	r1, [r4, #8]
 80052b0:	f015 0f01 	tst.w	r5, #1
 80052b4:	bf0c      	ite	eq
 80052b6:	460b      	moveq	r3, r1
 80052b8:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 80052ba:	07af      	lsls	r7, r5, #30
 80052bc:	bf44      	itt	mi
 80052be:	330a      	addmi	r3, #10
 80052c0:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 80052c2:	076e      	lsls	r6, r5, #29
 80052c4:	bf44      	itt	mi
 80052c6:	3b0a      	submi	r3, #10
 80052c8:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 80052ca:	0728      	lsls	r0, r5, #28
 80052cc:	bf44      	itt	mi
 80052ce:	3301      	addmi	r3, #1
 80052d0:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 80052d2:	06ef      	lsls	r7, r5, #27
 80052d4:	bf44      	itt	mi
 80052d6:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 80052da:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 80052dc:	2bc8      	cmp	r3, #200	; 0xc8
 80052de:	bf28      	it	cs
 80052e0:	23c8      	movcs	r3, #200	; 0xc8
 80052e2:	2b0a      	cmp	r3, #10
 80052e4:	bf38      	it	cc
 80052e6:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 80052e8:	7a60      	ldrb	r0, [r4, #9]
 80052ea:	f015 0f20 	tst.w	r5, #32
 80052ee:	bf14      	ite	ne
 80052f0:	2264      	movne	r2, #100	; 0x64
 80052f2:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 80052f4:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052f8:	bf18      	it	ne
 80052fa:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 80052fc:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005300:	bf18      	it	ne
 8005302:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005304:	4299      	cmp	r1, r3
 8005306:	d102      	bne.n	800530e <protocol_exec_rt_system+0x22a>
 8005308:	4282      	cmp	r2, r0
 800530a:	f43f af5a 	beq.w	80051c2 <protocol_exec_rt_system+0xde>
      sys.report_ovr_counter = 0; // Set to report change immediately
 800530e:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 8005310:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005312:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005314:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005316:	f7ff f899 	bl	800444c <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 800531a:	f7ff fb8b 	bl	8004a34 <plan_cycle_reinitialize>
 800531e:	e750      	b.n	80051c2 <protocol_exec_rt_system+0xde>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005320:	7822      	ldrb	r2, [r4, #0]
 8005322:	78a3      	ldrb	r3, [r4, #2]
 8005324:	f012 0fd0 	tst.w	r2, #208	; 0xd0
 8005328:	b259      	sxtb	r1, r3
 800532a:	d001      	beq.n	8005330 <protocol_exec_rt_system+0x24c>
 800532c:	78e2      	ldrb	r2, [r4, #3]
 800532e:	b342      	cbz	r2, 8005382 <protocol_exec_rt_system+0x29e>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005330:	2900      	cmp	r1, #0
 8005332:	db28      	blt.n	8005386 <protocol_exec_rt_system+0x2a2>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005334:	f013 0220 	ands.w	r2, r3, #32
 8005338:	d01b      	beq.n	8005372 <protocol_exec_rt_system+0x28e>
          sys.state = STATE_SAFETY_DOOR;
 800533a:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 800533c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005346:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005348:	2004      	movs	r0, #4
 800534a:	f004 fad7 	bl	80098fc <system_clear_exec_state_flag>
 800534e:	e732      	b.n	80051b6 <protocol_exec_rt_system+0xd2>
      report_realtime_status();
 8005350:	f001 fe0c 	bl	8006f6c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005354:	2001      	movs	r0, #1
 8005356:	f004 fad1 	bl	80098fc <system_clear_exec_state_flag>
 800535a:	e6d6      	b.n	800510a <protocol_exec_rt_system+0x26>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 800535c:	4630      	mov	r0, r6
 800535e:	f001 f8bb 	bl	80064d8 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005362:	2010      	movs	r0, #16
 8005364:	f004 faca 	bl	80098fc <system_clear_exec_state_flag>
 8005368:	4d0f      	ldr	r5, [pc, #60]	; (80053a8 <protocol_exec_rt_system+0x2c4>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 800536a:	782b      	ldrb	r3, [r5, #0]
 800536c:	06de      	lsls	r6, r3, #27
 800536e:	d5fc      	bpl.n	800536a <protocol_exec_rt_system+0x286>
 8005370:	e77c      	b.n	800526c <protocol_exec_rt_system+0x188>
          sys.suspend = SUSPEND_DISABLE;
 8005372:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005374:	7022      	strb	r2, [r4, #0]
 8005376:	e7e7      	b.n	8005348 <protocol_exec_rt_system+0x264>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005378:	f013 0f18 	tst.w	r3, #24
 800537c:	f43f af27 	beq.w	80051ce <protocol_exec_rt_system+0xea>
 8005380:	e77b      	b.n	800527a <protocol_exec_rt_system+0x196>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005382:	2900      	cmp	r1, #0
 8005384:	da5f      	bge.n	8005446 <protocol_exec_rt_system+0x362>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005386:	2300      	movs	r3, #0
 8005388:	7123      	strb	r3, [r4, #4]
          plan_reset();
 800538a:	f7fe ffa9 	bl	80042e0 <plan_reset>
          st_reset();
 800538e:	f003 f8a9 	bl	80084e4 <st_reset>
          gc_sync_position();
 8005392:	f7fc fc3d 	bl	8001c10 <gc_sync_position>
          plan_sync_position();
 8005396:	f7ff fb29 	bl	80049ec <plan_sync_position>
 800539a:	78a3      	ldrb	r3, [r4, #2]
 800539c:	e7ca      	b.n	8005334 <protocol_exec_rt_system+0x250>
 800539e:	bf00      	nop
 80053a0:	20001428 	.word	0x20001428
 80053a4:	200013f0 	.word	0x200013f0
 80053a8:	20001405 	.word	0x20001405
 80053ac:	200013ec 	.word	0x200013ec
 80053b0:	20001404 	.word	0x20001404
 80053b4:	20001354 	.word	0x20001354
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 80053b8:	78a2      	ldrb	r2, [r4, #2]
 80053ba:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80053be:	d04f      	beq.n	8005460 <protocol_exec_rt_system+0x37c>
 80053c0:	f005 0140 	and.w	r1, r5, #64	; 0x40
 80053c4:	f005 0208 	and.w	r2, r5, #8
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80053c8:	2900      	cmp	r1, #0
 80053ca:	f43f aeb7 	beq.w	800513c <protocol_exec_rt_system+0x58>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80053ce:	069f      	lsls	r7, r3, #26
 80053d0:	f53f aeb4 	bmi.w	800513c <protocol_exec_rt_system+0x58>
 80053d4:	78a1      	ldrb	r1, [r4, #2]
 80053d6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80053da:	70a1      	strb	r1, [r4, #2]
 80053dc:	e6ae      	b.n	800513c <protocol_exec_rt_system+0x58>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80053de:	78a3      	ldrb	r3, [r4, #2]
 80053e0:	f013 0220 	ands.w	r2, r3, #32
 80053e4:	f47f aee1 	bne.w	80051aa <protocol_exec_rt_system+0xc6>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 80053e8:	06df      	lsls	r7, r3, #27
 80053ea:	d551      	bpl.n	8005490 <protocol_exec_rt_system+0x3ac>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 80053ec:	7022      	strb	r2, [r4, #0]
 80053ee:	e6cf      	b.n	8005190 <protocol_exec_rt_system+0xac>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80053f0:	7823      	ldrb	r3, [r4, #0]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d103      	bne.n	80053fe <protocol_exec_rt_system+0x31a>
 80053f6:	78a3      	ldrb	r3, [r4, #2]
 80053f8:	f043 0305 	orr.w	r3, r3, #5
 80053fc:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 80053fe:	2380      	movs	r3, #128	; 0x80
 8005400:	7023      	strb	r3, [r4, #0]
 8005402:	e6b6      	b.n	8005172 <protocol_exec_rt_system+0x8e>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005404:	07c8      	lsls	r0, r1, #31
 8005406:	d502      	bpl.n	800540e <protocol_exec_rt_system+0x32a>
 8005408:	f041 0104 	orr.w	r1, r1, #4
 800540c:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 800540e:	2a00      	cmp	r2, #0
 8005410:	f47f af33 	bne.w	800527a <protocol_exec_rt_system+0x196>
 8005414:	e717      	b.n	8005246 <protocol_exec_rt_system+0x162>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005416:	2a00      	cmp	r2, #0
 8005418:	f43f ae95 	beq.w	8005146 <protocol_exec_rt_system+0x62>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 800541c:	2310      	movs	r3, #16
 800541e:	7023      	strb	r3, [r4, #0]
 8005420:	e691      	b.n	8005146 <protocol_exec_rt_system+0x62>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005422:	06da      	lsls	r2, r3, #27
 8005424:	f57f aec1 	bpl.w	80051aa <protocol_exec_rt_system+0xc6>
 8005428:	78a2      	ldrb	r2, [r4, #2]
 800542a:	07d0      	lsls	r0, r2, #31
 800542c:	f57f aebd 	bpl.w	80051aa <protocol_exec_rt_system+0xc6>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005430:	2b10      	cmp	r3, #16
 8005432:	f47f aead 	bne.w	8005190 <protocol_exec_rt_system+0xac>
 8005436:	7ae3      	ldrb	r3, [r4, #11]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f43f aea9 	beq.w	8005190 <protocol_exec_rt_system+0xac>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 800543e:	f043 0308 	orr.w	r3, r3, #8
 8005442:	72e3      	strb	r3, [r4, #11]
 8005444:	e6b1      	b.n	80051aa <protocol_exec_rt_system+0xc6>
        plan_cycle_reinitialize();
 8005446:	f7ff faf5 	bl	8004a34 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 800544a:	7923      	ldrb	r3, [r4, #4]
 800544c:	079a      	lsls	r2, r3, #30
 800544e:	d503      	bpl.n	8005458 <protocol_exec_rt_system+0x374>
 8005450:	78a2      	ldrb	r2, [r4, #2]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005458:	f023 0306 	bic.w	r3, r3, #6
 800545c:	7123      	strb	r3, [r4, #4]
 800545e:	e773      	b.n	8005348 <protocol_exec_rt_system+0x264>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005460:	f003 f992 	bl	8008788 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005464:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005466:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005468:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800546a:	2b20      	cmp	r3, #32
 800546c:	f47f ae58 	bne.w	8005120 <protocol_exec_rt_system+0x3c>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005470:	2e00      	cmp	r6, #0
 8005472:	f6ff ae68 	blt.w	8005146 <protocol_exec_rt_system+0x62>
 8005476:	78a3      	ldrb	r3, [r4, #2]
 8005478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800547c:	70a3      	strb	r3, [r4, #2]
 800547e:	e662      	b.n	8005146 <protocol_exec_rt_system+0x62>
              sys.state = STATE_CYCLE;
 8005480:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005482:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005484:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8005486:	f003 f995 	bl	80087b4 <st_prep_buffer>
              st_wake_up();
 800548a:	f002 fe11 	bl	80080b0 <st_wake_up>
 800548e:	e68c      	b.n	80051aa <protocol_exec_rt_system+0xc6>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005490:	075e      	lsls	r6, r3, #29
 8005492:	f57f ae8a 	bpl.w	80051aa <protocol_exec_rt_system+0xc6>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005496:	f043 0308 	orr.w	r3, r3, #8
 800549a:	70a3      	strb	r3, [r4, #2]
 800549c:	e685      	b.n	80051aa <protocol_exec_rt_system+0xc6>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 800549e:	071a      	lsls	r2, r3, #28
 80054a0:	f57f ae5f 	bpl.w	8005162 <protocol_exec_rt_system+0x7e>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 80054a4:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 80054a8:	f043 0302 	orr.w	r3, r3, #2
 80054ac:	e659      	b.n	8005162 <protocol_exec_rt_system+0x7e>
 80054ae:	bf00      	nop

080054b0 <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template
static void protocol_exec_rt_suspend()
{
 80054b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b4:	b083      	sub	sp, #12
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 80054b6:	f7fe ff57 	bl	8004368 <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 80054ba:	2800      	cmp	r0, #0
 80054bc:	f000 8278 	beq.w	80059b0 <protocol_exec_rt_suspend+0x500>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
      restore_spindle_speed = gc_state.spindle_speed;
    } else {
      restore_condition = block->condition;
 80054c0:	7d86      	ldrb	r6, [r0, #22]
      restore_spindle_speed = block->spindle_speed;
 80054c2:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 80054c6:	4dbe      	ldr	r5, [pc, #760]	; (80057c0 <protocol_exec_rt_suspend+0x310>)
 80054c8:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 80054cc:	0798      	lsls	r0, r3, #30
 80054ce:	f100 826b 	bmi.w	80059a8 <protocol_exec_rt_suspend+0x4f8>
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80054d2:	2700      	movs	r7, #0
 80054d4:	4cbb      	ldr	r4, [pc, #748]	; (80057c4 <protocol_exec_rt_suspend+0x314>)
  while (sys.suspend) {
 80054d6:	78a3      	ldrb	r3, [r4, #2]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80d7 	beq.w	800568c <protocol_exec_rt_suspend+0x1dc>
    if (sys.abort) { return; }
 80054de:	7862      	ldrb	r2, [r4, #1]
 80054e0:	2a00      	cmp	r2, #0
 80054e2:	f040 80d3 	bne.w	800568c <protocol_exec_rt_suspend+0x1dc>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 80054e6:	07d9      	lsls	r1, r3, #31
 80054e8:	d539      	bpl.n	800555e <protocol_exec_rt_suspend+0xae>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 80054ea:	7821      	ldrb	r1, [r4, #0]
 80054ec:	f011 00c0 	ands.w	r0, r1, #192	; 0xc0
 80054f0:	f000 80fc 	beq.w	80056ec <protocol_exec_rt_suspend+0x23c>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 80054f4:	f013 0b04 	ands.w	fp, r3, #4
 80054f8:	f000 81c1 	beq.w	800587e <protocol_exec_rt_suspend+0x3ce>
          if (sys.state == STATE_SLEEP) {
 80054fc:	2980      	cmp	r1, #128	; 0x80
 80054fe:	f000 82c9 	beq.w	8005a94 <protocol_exec_rt_suspend+0x5e4>
          if (sys.state == STATE_SAFETY_DOOR) {
 8005502:	2940      	cmp	r1, #64	; 0x40
 8005504:	f000 8246 	beq.w	8005994 <protocol_exec_rt_suspend+0x4e4>
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8005508:	0718      	lsls	r0, r3, #28
 800550a:	d528      	bpl.n	800555e <protocol_exec_rt_suspend+0xae>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 800550c:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 80057d4 <protocol_exec_rt_suspend+0x324>
 8005510:	f003 0102 	and.w	r1, r3, #2
 8005514:	f89a 0009 	ldrb.w	r0, [sl, #9]
 8005518:	2800      	cmp	r0, #0
 800551a:	f000 80c7 	beq.w	80056ac <protocol_exec_rt_suspend+0x1fc>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800551e:	b9f1      	cbnz	r1, 800555e <protocol_exec_rt_suspend+0xae>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8005520:	f895 1058 	ldrb.w	r1, [r5, #88]	; 0x58
 8005524:	0789      	lsls	r1, r1, #30
 8005526:	f140 80b4 	bpl.w	8005692 <protocol_exec_rt_suspend+0x1e2>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800552a:	7921      	ldrb	r1, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 800552c:	f89a 0008 	ldrb.w	r0, [sl, #8]
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005530:	f041 0208 	orr.w	r2, r1, #8
 8005534:	7122      	strb	r2, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005536:	b160      	cbz	r0, 8005552 <protocol_exec_rt_suspend+0xa2>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8005538:	f006 0040 	and.w	r0, r6, #64	; 0x40
 800553c:	f7fc fa66 	bl	8001a0c <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005540:	2101      	movs	r1, #1
 8005542:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005546:	f7fe fcb9 	bl	8003ebc <delay_sec>
 800554a:	78a3      	ldrb	r3, [r4, #2]
 800554c:	f003 0102 	and.w	r1, r3, #2
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005550:	b929      	cbnz	r1, 800555e <protocol_exec_rt_suspend+0xae>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8005552:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8005556:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8005558:	70a3      	strb	r3, [r4, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 800555a:	f004 f9c5 	bl	80098e8 <system_set_exec_state_flag>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 800555e:	4b9a      	ldr	r3, [pc, #616]	; (80057c8 <protocol_exec_rt_suspend+0x318>)
 8005560:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005562:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005566:	2b00      	cmp	r3, #0
 8005568:	f040 80af 	bne.w	80056ca <protocol_exec_rt_suspend+0x21a>
 800556c:	f8df b268 	ldr.w	fp, [pc, #616]	; 80057d8 <protocol_exec_rt_suspend+0x328>
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005570:	f89b 3000 	ldrb.w	r3, [fp]
  if (rt_exec) {
 8005574:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005578:	2b00      	cmp	r3, #0
 800557a:	d06f      	beq.n	800565c <protocol_exec_rt_suspend+0x1ac>
    if (rt_exec & EXEC_RESET) {
 800557c:	f01b 0f10 	tst.w	fp, #16
 8005580:	f040 816c 	bne.w	800585c <protocol_exec_rt_suspend+0x3ac>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005584:	f01b 0f01 	tst.w	fp, #1
 8005588:	f040 8189 	bne.w	800589e <protocol_exec_rt_suspend+0x3ee>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 800558c:	f01b 0fe8 	tst.w	fp, #232	; 0xe8
 8005590:	d028      	beq.n	80055e4 <protocol_exec_rt_suspend+0x134>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005592:	7823      	ldrb	r3, [r4, #0]
 8005594:	fa4f f28b 	sxtb.w	r2, fp
 8005598:	0799      	lsls	r1, r3, #30
 800559a:	d11d      	bne.n	80055d8 <protocol_exec_rt_suspend+0x128>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 800559c:	f013 0f28 	tst.w	r3, #40	; 0x28
 80055a0:	f040 81b5 	bne.w	800590e <protocol_exec_rt_suspend+0x45e>
 80055a4:	f00b 0040 	and.w	r0, fp, #64	; 0x40
 80055a8:	f00b 0108 	and.w	r1, fp, #8
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f040 81b7 	bne.w	8005920 <protocol_exec_rt_suspend+0x470>
 80055b2:	f04f 0c01 	mov.w	ip, #1
 80055b6:	f884 c002 	strb.w	ip, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80055ba:	2800      	cmp	r0, #0
 80055bc:	f000 821f 	beq.w	80059fe <protocol_exec_rt_suspend+0x54e>
 80055c0:	2041      	movs	r0, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80055c2:	70a0      	strb	r0, [r4, #2]
        if (rt_exec & EXEC_FEED_HOLD) {
 80055c4:	b121      	cbz	r1, 80055d0 <protocol_exec_rt_suspend+0x120>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80055c6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 80055ca:	d101      	bne.n	80055d0 <protocol_exec_rt_suspend+0x120>
 80055cc:	2310      	movs	r3, #16
 80055ce:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 80055d0:	f01b 0f20 	tst.w	fp, #32
 80055d4:	f040 8201 	bne.w	80059da <protocol_exec_rt_suspend+0x52a>
      if (rt_exec & EXEC_SLEEP) {
 80055d8:	2a00      	cmp	r2, #0
 80055da:	f2c0 81d1 	blt.w	8005980 <protocol_exec_rt_suspend+0x4d0>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 80055de:	20e8      	movs	r0, #232	; 0xe8
 80055e0:	f004 f98c 	bl	80098fc <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 80055e4:	f01b 0f02 	tst.w	fp, #2
 80055e8:	d01f      	beq.n	800562a <protocol_exec_rt_suspend+0x17a>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 80055ea:	f01b 0f68 	tst.w	fp, #104	; 0x68
 80055ee:	d119      	bne.n	8005624 <protocol_exec_rt_suspend+0x174>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80055f0:	7823      	ldrb	r3, [r4, #0]
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	f000 81e3 	beq.w	80059be <protocol_exec_rt_suspend+0x50e>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f040 822c 	bne.w	8005a56 <protocol_exec_rt_suspend+0x5a6>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 80055fe:	2300      	movs	r3, #0
 8005600:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005602:	f7fe feb1 	bl	8004368 <plan_get_current_block>
 8005606:	2800      	cmp	r0, #0
 8005608:	f000 81a9 	beq.w	800595e <protocol_exec_rt_suspend+0x4ae>
 800560c:	78a3      	ldrb	r3, [r4, #2]
 800560e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005612:	f040 81a4 	bne.w	800595e <protocol_exec_rt_suspend+0x4ae>
              sys.state = STATE_CYCLE;
 8005616:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005618:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 800561a:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 800561c:	f003 f8ca 	bl	80087b4 <st_prep_buffer>
              st_wake_up();
 8005620:	f002 fd46 	bl	80080b0 <st_wake_up>
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005624:	2002      	movs	r0, #2
 8005626:	f004 f969 	bl	80098fc <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 800562a:	f01b 0f04 	tst.w	fp, #4
 800562e:	d015      	beq.n	800565c <protocol_exec_rt_suspend+0x1ac>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005630:	7821      	ldrb	r1, [r4, #0]
 8005632:	78a3      	ldrb	r3, [r4, #2]
 8005634:	f011 0fd0 	tst.w	r1, #208	; 0xd0
 8005638:	b25a      	sxtb	r2, r3
 800563a:	d003      	beq.n	8005644 <protocol_exec_rt_suspend+0x194>
 800563c:	78e1      	ldrb	r1, [r4, #3]
 800563e:	2900      	cmp	r1, #0
 8005640:	f000 8179 	beq.w	8005936 <protocol_exec_rt_suspend+0x486>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005644:	2a00      	cmp	r2, #0
 8005646:	f2c0 8178 	blt.w	800593a <protocol_exec_rt_suspend+0x48a>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 800564a:	f013 0220 	ands.w	r2, r3, #32
 800564e:	f040 814b 	bne.w	80058e8 <protocol_exec_rt_suspend+0x438>
          sys.suspend = SUSPEND_DISABLE;
 8005652:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005654:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005656:	2004      	movs	r0, #4
 8005658:	f004 f950 	bl	80098fc <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 800565c:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <protocol_exec_rt_suspend+0x31c>)
 800565e:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005660:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005664:	2b00      	cmp	r3, #0
 8005666:	f040 80b9 	bne.w	80057dc <protocol_exec_rt_suspend+0x32c>
  rt_exec = sys_rt_exec_accessory_override;
 800566a:	4b59      	ldr	r3, [pc, #356]	; (80057d0 <protocol_exec_rt_suspend+0x320>)
 800566c:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800566e:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005672:	2b00      	cmp	r3, #0
 8005674:	d149      	bne.n	800570a <protocol_exec_rt_suspend+0x25a>
 8005676:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005678:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 800567c:	f43f af2b 	beq.w	80054d6 <protocol_exec_rt_suspend+0x26>
    st_prep_buffer();
 8005680:	f003 f898 	bl	80087b4 <st_prep_buffer>
  while (sys.suspend) {
 8005684:	78a3      	ldrb	r3, [r4, #2]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f47f af29 	bne.w	80054de <protocol_exec_rt_suspend+0x2e>
    }

    protocol_exec_rt_system();

  }
}
 800568c:	b003      	add	sp, #12
 800568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005692:	4641      	mov	r1, r8
 8005694:	f006 0030 	and.w	r0, r6, #48	; 0x30
 8005698:	f002 fbc2 	bl	8007e20 <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 800569c:	2101      	movs	r1, #1
 800569e:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 80056a2:	f7fe fc0b 	bl	8003ebc <delay_sec>
 80056a6:	78a3      	ldrb	r3, [r4, #2]
 80056a8:	f003 0102 	and.w	r1, r3, #2
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 80056ac:	f89a 2008 	ldrb.w	r2, [sl, #8]
 80056b0:	2a00      	cmp	r2, #0
 80056b2:	f43f af4d 	beq.w	8005550 <protocol_exec_rt_suspend+0xa0>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 80056b6:	2900      	cmp	r1, #0
 80056b8:	f43f af3e 	beq.w	8005538 <protocol_exec_rt_suspend+0x88>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 80056bc:	4b42      	ldr	r3, [pc, #264]	; (80057c8 <protocol_exec_rt_suspend+0x318>)
 80056be:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 80056c0:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f43f af51 	beq.w	800556c <protocol_exec_rt_suspend+0xbc>
    sys.state = STATE_ALARM; // Set system alarm state
 80056ca:	f04f 0901 	mov.w	r9, #1
    report_alarm_message(rt_exec);
 80056ce:	4658      	mov	r0, fp
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80056d0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    sys.state = STATE_ALARM; // Set system alarm state
 80056d4:	f884 9000 	strb.w	r9, [r4]
    report_alarm_message(rt_exec);
 80056d8:	f000 fee8 	bl	80064ac <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80056dc:	45cb      	cmp	fp, r9
 80056de:	f240 80f6 	bls.w	80058ce <protocol_exec_rt_suspend+0x41e>
 80056e2:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 80057d8 <protocol_exec_rt_suspend+0x328>
    system_clear_exec_alarm(); // Clear alarm
 80056e6:	f004 f91b 	bl	8009920 <system_clear_exec_alarm>
 80056ea:	e741      	b.n	8005570 <protocol_exec_rt_suspend+0xc0>
        if (sys.spindle_stop_ovr) {
 80056ec:	7ae3      	ldrb	r3, [r4, #11]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 80b7 	beq.w	8005862 <protocol_exec_rt_suspend+0x3b2>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 80056f4:	079a      	lsls	r2, r3, #30
 80056f6:	f140 80d8 	bpl.w	80058aa <protocol_exec_rt_suspend+0x3fa>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80056fa:	4b36      	ldr	r3, [pc, #216]	; (80057d4 <protocol_exec_rt_suspend+0x324>)
 80056fc:	7a5b      	ldrb	r3, [r3, #9]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f040 8127 	bne.w	8005952 <protocol_exec_rt_suspend+0x4a2>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 8005704:	2300      	movs	r3, #0
 8005706:	72e3      	strb	r3, [r4, #11]
 8005708:	e729      	b.n	800555e <protocol_exec_rt_suspend+0xae>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 800570a:	f004 f92d 	bl	8009968 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 800570e:	f01b 0f01 	tst.w	fp, #1
 8005712:	bf18      	it	ne
 8005714:	2364      	movne	r3, #100	; 0x64
 8005716:	7aa2      	ldrb	r2, [r4, #10]
 8005718:	bf08      	it	eq
 800571a:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 800571c:	f01b 0f02 	tst.w	fp, #2
 8005720:	bf1c      	itt	ne
 8005722:	330a      	addne	r3, #10
 8005724:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005726:	f01b 0f04 	tst.w	fp, #4
 800572a:	bf1c      	itt	ne
 800572c:	3b0a      	subne	r3, #10
 800572e:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005730:	f01b 0f08 	tst.w	fp, #8
 8005734:	bf1c      	itt	ne
 8005736:	3301      	addne	r3, #1
 8005738:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 800573a:	f01b 0f10 	tst.w	fp, #16
 800573e:	bf1c      	itt	ne
 8005740:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 8005744:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005746:	2bc8      	cmp	r3, #200	; 0xc8
 8005748:	bf28      	it	cs
 800574a:	23c8      	movcs	r3, #200	; 0xc8
 800574c:	2b0a      	cmp	r3, #10
 800574e:	bf38      	it	cc
 8005750:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005752:	429a      	cmp	r2, r3
 8005754:	d006      	beq.n	8005764 <protocol_exec_rt_suspend+0x2b4>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005756:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005758:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 800575a:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800575c:	f042 0308 	orr.w	r3, r2, #8
 8005760:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005762:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005764:	f01b 0f20 	tst.w	fp, #32
 8005768:	7823      	ldrb	r3, [r4, #0]
 800576a:	f00b 02c0 	and.w	r2, fp, #192	; 0xc0
 800576e:	d002      	beq.n	8005776 <protocol_exec_rt_suspend+0x2c6>
      if (sys.state == STATE_HOLD) {
 8005770:	2b10      	cmp	r3, #16
 8005772:	f000 80c1 	beq.w	80058f8 <protocol_exec_rt_suspend+0x448>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005776:	2a00      	cmp	r2, #0
 8005778:	f43f af7e 	beq.w	8005678 <protocol_exec_rt_suspend+0x1c8>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 800577c:	2b00      	cmp	r3, #0
 800577e:	f040 80fa 	bne.w	8005976 <protocol_exec_rt_suspend+0x4c6>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005782:	f8df a050 	ldr.w	sl, [pc, #80]	; 80057d4 <protocol_exec_rt_suspend+0x324>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005786:	f01b 0f80 	tst.w	fp, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 800578a:	f89a 9008 	ldrb.w	r9, [sl, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 800578e:	d006      	beq.n	800579e <protocol_exec_rt_suspend+0x2ee>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005790:	f019 0f80 	tst.w	r9, #128	; 0x80
 8005794:	bf14      	ite	ne
 8005796:	f009 097f 	andne.w	r9, r9, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 800579a:	f049 0980 	orreq.w	r9, r9, #128	; 0x80
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 800579e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80057a2:	d006      	beq.n	80057b2 <protocol_exec_rt_suspend+0x302>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 80057a4:	f019 0f40 	tst.w	r9, #64	; 0x40
 80057a8:	bf14      	ite	ne
 80057aa:	f009 09bf 	andne.w	r9, r9, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 80057ae:	f049 0940 	orreq.w	r9, r9, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 80057b2:	4648      	mov	r0, r9
 80057b4:	f7fc f92a 	bl	8001a0c <coolant_set_state>
 80057b8:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 80057ba:	f88a 9008 	strb.w	r9, [sl, #8]
 80057be:	e75b      	b.n	8005678 <protocol_exec_rt_suspend+0x1c8>
 80057c0:	200015ac 	.word	0x200015ac
 80057c4:	200013f0 	.word	0x200013f0
 80057c8:	20001428 	.word	0x20001428
 80057cc:	200013ec 	.word	0x200013ec
 80057d0:	20001404 	.word	0x20001404
 80057d4:	20001354 	.word	0x20001354
 80057d8:	20001405 	.word	0x20001405
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 80057dc:	f004 f8bc 	bl	8009958 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 80057e0:	f01b 0f01 	tst.w	fp, #1
 80057e4:	bf18      	it	ne
 80057e6:	2364      	movne	r3, #100	; 0x64
 80057e8:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 80057ea:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 80057ec:	bf08      	it	eq
 80057ee:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 80057f0:	f01b 0f02 	tst.w	fp, #2
 80057f4:	bf1c      	itt	ne
 80057f6:	330a      	addne	r3, #10
 80057f8:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 80057fa:	f01b 0f04 	tst.w	fp, #4
 80057fe:	bf1c      	itt	ne
 8005800:	3b0a      	subne	r3, #10
 8005802:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005804:	f01b 0f08 	tst.w	fp, #8
 8005808:	bf1c      	itt	ne
 800580a:	3301      	addne	r3, #1
 800580c:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 800580e:	f01b 0f10 	tst.w	fp, #16
 8005812:	bf1c      	itt	ne
 8005814:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 8005818:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 800581a:	2bc8      	cmp	r3, #200	; 0xc8
 800581c:	bf28      	it	cs
 800581e:	23c8      	movcs	r3, #200	; 0xc8
 8005820:	2b0a      	cmp	r3, #10
 8005822:	bf38      	it	cc
 8005824:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005826:	f01b 0f20 	tst.w	fp, #32
 800582a:	bf14      	ite	ne
 800582c:	2164      	movne	r1, #100	; 0x64
 800582e:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005830:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005834:	bf18      	it	ne
 8005836:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005838:	f01b 0f80 	tst.w	fp, #128	; 0x80
 800583c:	bf18      	it	ne
 800583e:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005840:	429a      	cmp	r2, r3
 8005842:	d102      	bne.n	800584a <protocol_exec_rt_suspend+0x39a>
 8005844:	4288      	cmp	r0, r1
 8005846:	f43f af10 	beq.w	800566a <protocol_exec_rt_suspend+0x1ba>
      sys.report_ovr_counter = 0; // Set to report change immediately
 800584a:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 800584c:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 800584e:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005850:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005852:	f7fe fdfb 	bl	800444c <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005856:	f7ff f8ed 	bl	8004a34 <plan_cycle_reinitialize>
 800585a:	e706      	b.n	800566a <protocol_exec_rt_suspend+0x1ba>
      sys.abort = true;  // Only place this is set true.
 800585c:	2301      	movs	r3, #1
 800585e:	7063      	strb	r3, [r4, #1]
 8005860:	e639      	b.n	80054d6 <protocol_exec_rt_suspend+0x26>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8005862:	7923      	ldrb	r3, [r4, #4]
 8005864:	071b      	lsls	r3, r3, #28
 8005866:	f57f ae7a 	bpl.w	800555e <protocol_exec_rt_suspend+0xae>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800586a:	4641      	mov	r1, r8
 800586c:	f006 0030 	and.w	r0, r6, #48	; 0x30
 8005870:	f002 fad6 	bl	8007e20 <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005874:	7923      	ldrb	r3, [r4, #4]
 8005876:	f023 0308 	bic.w	r3, r3, #8
 800587a:	7123      	strb	r3, [r4, #4]
 800587c:	e66f      	b.n	800555e <protocol_exec_rt_suspend+0xae>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 800587e:	4639      	mov	r1, r7
 8005880:	4658      	mov	r0, fp
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 8005882:	f884 b00b 	strb.w	fp, [r4, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005886:	f002 facb 	bl	8007e20 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 800588a:	4658      	mov	r0, fp
 800588c:	f7fc f8be 	bl	8001a0c <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 8005890:	78a3      	ldrb	r3, [r4, #2]
 8005892:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 8005896:	f043 0304 	orr.w	r3, r3, #4
 800589a:	70a3      	strb	r3, [r4, #2]
 800589c:	e65f      	b.n	800555e <protocol_exec_rt_suspend+0xae>
      report_realtime_status();
 800589e:	f001 fb65 	bl	8006f6c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 80058a2:	2001      	movs	r0, #1
 80058a4:	f004 f82a 	bl	80098fc <system_clear_exec_state_flag>
 80058a8:	e670      	b.n	800558c <protocol_exec_rt_suspend+0xdc>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 80058aa:	f013 0f0c 	tst.w	r3, #12
 80058ae:	f43f ae56 	beq.w	800555e <protocol_exec_rt_suspend+0xae>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80058b2:	4a89      	ldr	r2, [pc, #548]	; (8005ad8 <protocol_exec_rt_suspend+0x628>)
 80058b4:	7a52      	ldrb	r2, [r2, #9]
 80058b6:	2a00      	cmp	r2, #0
 80058b8:	f040 80df 	bne.w	8005a7a <protocol_exec_rt_suspend+0x5ca>
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 80058bc:	071a      	lsls	r2, r3, #28
 80058be:	f57f af21 	bpl.w	8005704 <protocol_exec_rt_suspend+0x254>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 80058c2:	2002      	movs	r0, #2
 80058c4:	f004 f810 	bl	80098e8 <system_set_exec_state_flag>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 80058c8:	2300      	movs	r3, #0
 80058ca:	72e3      	strb	r3, [r4, #11]
 80058cc:	e647      	b.n	800555e <protocol_exec_rt_suspend+0xae>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 80058ce:	4648      	mov	r0, r9
 80058d0:	f000 fe02 	bl	80064d8 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 80058d4:	2010      	movs	r0, #16
 80058d6:	f004 f811 	bl	80098fc <system_clear_exec_state_flag>
 80058da:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005adc <protocol_exec_rt_suspend+0x62c>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 80058de:	f89b 3000 	ldrb.w	r3, [fp]
 80058e2:	06d8      	lsls	r0, r3, #27
 80058e4:	d5fb      	bpl.n	80058de <protocol_exec_rt_suspend+0x42e>
 80058e6:	e6fe      	b.n	80056e6 <protocol_exec_rt_suspend+0x236>
          sys.state = STATE_SAFETY_DOOR;
 80058e8:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 80058ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 80058f4:	7022      	strb	r2, [r4, #0]
 80058f6:	e6ae      	b.n	8005656 <protocol_exec_rt_suspend+0x1a6>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 80058f8:	7ae1      	ldrb	r1, [r4, #11]
 80058fa:	b3b9      	cbz	r1, 800596c <protocol_exec_rt_suspend+0x4bc>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80058fc:	07c8      	lsls	r0, r1, #31
 80058fe:	d537      	bpl.n	8005970 <protocol_exec_rt_suspend+0x4c0>
 8005900:	f041 0104 	orr.w	r1, r1, #4
 8005904:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005906:	2a00      	cmp	r2, #0
 8005908:	f47f af3b 	bne.w	8005782 <protocol_exec_rt_suspend+0x2d2>
 800590c:	e6b8      	b.n	8005680 <protocol_exec_rt_suspend+0x1d0>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 800590e:	78a1      	ldrb	r1, [r4, #2]
 8005910:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 8005914:	f000 8084 	beq.w	8005a20 <protocol_exec_rt_suspend+0x570>
 8005918:	f00b 0040 	and.w	r0, fp, #64	; 0x40
 800591c:	f00b 0108 	and.w	r1, fp, #8
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005920:	2800      	cmp	r0, #0
 8005922:	f43f ae4f 	beq.w	80055c4 <protocol_exec_rt_suspend+0x114>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005926:	0698      	lsls	r0, r3, #26
 8005928:	f53f ae4c 	bmi.w	80055c4 <protocol_exec_rt_suspend+0x114>
 800592c:	78a0      	ldrb	r0, [r4, #2]
 800592e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005932:	70a0      	strb	r0, [r4, #2]
 8005934:	e646      	b.n	80055c4 <protocol_exec_rt_suspend+0x114>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005936:	2a00      	cmp	r2, #0
 8005938:	da65      	bge.n	8005a06 <protocol_exec_rt_suspend+0x556>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 800593a:	2300      	movs	r3, #0
 800593c:	7123      	strb	r3, [r4, #4]
          plan_reset();
 800593e:	f7fe fccf 	bl	80042e0 <plan_reset>
          st_reset();
 8005942:	f002 fdcf 	bl	80084e4 <st_reset>
          gc_sync_position();
 8005946:	f7fc f963 	bl	8001c10 <gc_sync_position>
          plan_sync_position();
 800594a:	f7ff f84f 	bl	80049ec <plan_sync_position>
 800594e:	78a3      	ldrb	r3, [r4, #2]
 8005950:	e67b      	b.n	800564a <protocol_exec_rt_suspend+0x19a>
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005952:	4639      	mov	r1, r7
 8005954:	f002 fa64 	bl	8007e20 <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 8005958:	2301      	movs	r3, #1
 800595a:	72e3      	strb	r3, [r4, #11]
 800595c:	e5ff      	b.n	800555e <protocol_exec_rt_suspend+0xae>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 800595e:	2300      	movs	r3, #0
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005960:	2002      	movs	r0, #2
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005962:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005964:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005966:	f003 ffc9 	bl	80098fc <system_clear_exec_state_flag>
 800596a:	e65e      	b.n	800562a <protocol_exec_rt_suspend+0x17a>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 800596c:	2102      	movs	r1, #2
 800596e:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005970:	2a00      	cmp	r2, #0
 8005972:	f43f ae85 	beq.w	8005680 <protocol_exec_rt_suspend+0x1d0>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005976:	f013 0f18 	tst.w	r3, #24
 800597a:	f43f ae7d 	beq.w	8005678 <protocol_exec_rt_suspend+0x1c8>
 800597e:	e700      	b.n	8005782 <protocol_exec_rt_suspend+0x2d2>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005980:	7823      	ldrb	r3, [r4, #0]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d103      	bne.n	800598e <protocol_exec_rt_suspend+0x4de>
 8005986:	78a3      	ldrb	r3, [r4, #2]
 8005988:	f043 0305 	orr.w	r3, r3, #5
 800598c:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 800598e:	2380      	movs	r3, #128	; 0x80
 8005990:	7023      	strb	r3, [r4, #0]
 8005992:	e624      	b.n	80055de <protocol_exec_rt_suspend+0x12e>
            if (!(system_check_safety_door_ajar())) {
 8005994:	f003 fd76 	bl	8009484 <system_check_safety_door_ajar>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005998:	78a3      	ldrb	r3, [r4, #2]
            if (!(system_check_safety_door_ajar())) {
 800599a:	2800      	cmp	r0, #0
 800599c:	f47f adb4 	bne.w	8005508 <protocol_exec_rt_suspend+0x58>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 80059a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80059a4:	70a3      	strb	r3, [r4, #2]
 80059a6:	e5af      	b.n	8005508 <protocol_exec_rt_suspend+0x58>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 80059a8:	2020      	movs	r0, #32
 80059aa:	f003 ffcb 	bl	8009944 <system_set_exec_accessory_override_flag>
 80059ae:	e590      	b.n	80054d2 <protocol_exec_rt_suspend+0x22>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80059b0:	4b49      	ldr	r3, [pc, #292]	; (8005ad8 <protocol_exec_rt_suspend+0x628>)
 80059b2:	7a5e      	ldrb	r6, [r3, #9]
 80059b4:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 80059b6:	f8d3 800c 	ldr.w	r8, [r3, #12]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80059ba:	4316      	orrs	r6, r2
 80059bc:	e583      	b.n	80054c6 <protocol_exec_rt_suspend+0x16>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80059be:	78a3      	ldrb	r3, [r4, #2]
 80059c0:	f013 0220 	ands.w	r2, r3, #32
 80059c4:	f47f ae2e 	bne.w	8005624 <protocol_exec_rt_suspend+0x174>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 80059c8:	06d9      	lsls	r1, r3, #27
 80059ca:	d47c      	bmi.n	8005ac6 <protocol_exec_rt_suspend+0x616>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80059cc:	0758      	lsls	r0, r3, #29
 80059ce:	f57f ae29 	bpl.w	8005624 <protocol_exec_rt_suspend+0x174>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 80059d2:	f043 0308 	orr.w	r3, r3, #8
 80059d6:	70a3      	strb	r3, [r4, #2]
 80059d8:	e624      	b.n	8005624 <protocol_exec_rt_suspend+0x174>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 80059da:	2006      	movs	r0, #6
 80059dc:	9201      	str	r2, [sp, #4]
 80059de:	f000 fd7b 	bl	80064d8 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80059e2:	78a3      	ldrb	r3, [r4, #2]
 80059e4:	9a01      	ldr	r2, [sp, #4]
 80059e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80059ea:	d104      	bne.n	80059f6 <protocol_exec_rt_suspend+0x546>
            if (sys.state == STATE_SAFETY_DOOR) {
 80059ec:	7821      	ldrb	r1, [r4, #0]
 80059ee:	2940      	cmp	r1, #64	; 0x40
 80059f0:	d028      	beq.n	8005a44 <protocol_exec_rt_suspend+0x594>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 80059f2:	2980      	cmp	r1, #128	; 0x80
 80059f4:	d12c      	bne.n	8005a50 <protocol_exec_rt_suspend+0x5a0>
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 80059f6:	f043 0320 	orr.w	r3, r3, #32
 80059fa:	70a3      	strb	r3, [r4, #2]
 80059fc:	e5ec      	b.n	80055d8 <protocol_exec_rt_suspend+0x128>
        if (rt_exec & EXEC_FEED_HOLD) {
 80059fe:	2900      	cmp	r1, #0
 8005a00:	f47f ade4 	bne.w	80055cc <protocol_exec_rt_suspend+0x11c>
 8005a04:	e5e4      	b.n	80055d0 <protocol_exec_rt_suspend+0x120>
        plan_cycle_reinitialize();
 8005a06:	f7ff f815 	bl	8004a34 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005a0a:	7923      	ldrb	r3, [r4, #4]
 8005a0c:	079a      	lsls	r2, r3, #30
 8005a0e:	d503      	bpl.n	8005a18 <protocol_exec_rt_suspend+0x568>
 8005a10:	78a2      	ldrb	r2, [r4, #2]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005a18:	f023 0306 	bic.w	r3, r3, #6
 8005a1c:	7123      	strb	r3, [r4, #4]
 8005a1e:	e61a      	b.n	8005656 <protocol_exec_rt_suspend+0x1a6>
 8005a20:	9201      	str	r2, [sp, #4]
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005a22:	f002 feb1 	bl	8008788 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005a26:	2102      	movs	r1, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005a28:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005a2a:	7121      	strb	r1, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	9a01      	ldr	r2, [sp, #4]
 8005a30:	f47f adb8 	bne.w	80055a4 <protocol_exec_rt_suspend+0xf4>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	f6ff adcb 	blt.w	80055d0 <protocol_exec_rt_suspend+0x120>
 8005a3a:	78a3      	ldrb	r3, [r4, #2]
 8005a3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a40:	70a3      	strb	r3, [r4, #2]
 8005a42:	e5c5      	b.n	80055d0 <protocol_exec_rt_suspend+0x120>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005a44:	0718      	lsls	r0, r3, #28
 8005a46:	d503      	bpl.n	8005a50 <protocol_exec_rt_suspend+0x5a0>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005a48:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005a4c:	f043 0302 	orr.w	r3, r3, #2
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005a50:	2140      	movs	r1, #64	; 0x40
 8005a52:	7021      	strb	r1, [r4, #0]
 8005a54:	e7cf      	b.n	80059f6 <protocol_exec_rt_suspend+0x546>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005a56:	06da      	lsls	r2, r3, #27
 8005a58:	f57f ade4 	bpl.w	8005624 <protocol_exec_rt_suspend+0x174>
 8005a5c:	78a2      	ldrb	r2, [r4, #2]
 8005a5e:	07d1      	lsls	r1, r2, #31
 8005a60:	f57f ade0 	bpl.w	8005624 <protocol_exec_rt_suspend+0x174>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	f47f adca 	bne.w	80055fe <protocol_exec_rt_suspend+0x14e>
 8005a6a:	7ae3      	ldrb	r3, [r4, #11]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f43f adc6 	beq.w	80055fe <protocol_exec_rt_suspend+0x14e>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005a72:	f043 0308 	orr.w	r3, r3, #8
 8005a76:	72e3      	strb	r3, [r4, #11]
 8005a78:	e5d4      	b.n	8005624 <protocol_exec_rt_suspend+0x174>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 8005a7a:	200a      	movs	r0, #10
 8005a7c:	f000 fd2c 	bl	80064d8 <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8005a80:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8005a84:	0799      	lsls	r1, r3, #30
 8005a86:	d520      	bpl.n	8005aca <protocol_exec_rt_suspend+0x61a>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005a88:	7922      	ldrb	r2, [r4, #4]
 8005a8a:	7ae3      	ldrb	r3, [r4, #11]
 8005a8c:	f042 0208 	orr.w	r2, r2, #8
 8005a90:	7122      	strb	r2, [r4, #4]
 8005a92:	e713      	b.n	80058bc <protocol_exec_rt_suspend+0x40c>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 8005a94:	200b      	movs	r0, #11
 8005a96:	9201      	str	r2, [sp, #4]
 8005a98:	f000 fd1e 	bl	80064d8 <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005a9c:	9a01      	ldr	r2, [sp, #4]
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f002 f9bd 	bl	8007e20 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 8005aa6:	9a01      	ldr	r2, [sp, #4]
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f7fb ffaf 	bl	8001a0c <coolant_set_state>
            st_go_idle(); // Disable steppers
 8005aae:	f002 fb3f 	bl	8008130 <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 8005ab2:	7863      	ldrb	r3, [r4, #1]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f47f ade9 	bne.w	800568c <protocol_exec_rt_suspend+0x1dc>
 8005aba:	f7ff fb13 	bl	80050e4 <protocol_exec_rt_system>
 8005abe:	7863      	ldrb	r3, [r4, #1]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0fa      	beq.n	8005aba <protocol_exec_rt_suspend+0x60a>
 8005ac4:	e5e2      	b.n	800568c <protocol_exec_rt_suspend+0x1dc>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005ac6:	7022      	strb	r2, [r4, #0]
 8005ac8:	e599      	b.n	80055fe <protocol_exec_rt_suspend+0x14e>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005aca:	4641      	mov	r1, r8
 8005acc:	f006 0030 	and.w	r0, r6, #48	; 0x30
 8005ad0:	f002 f9a6 	bl	8007e20 <spindle_set_state>
 8005ad4:	7ae3      	ldrb	r3, [r4, #11]
 8005ad6:	e6f1      	b.n	80058bc <protocol_exec_rt_suspend+0x40c>
 8005ad8:	20001354 	.word	0x20001354
 8005adc:	20001405 	.word	0x20001405

08005ae0 <protocol_execute_realtime>:
{
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005ae2:	4bab      	ldr	r3, [pc, #684]	; (8005d90 <protocol_execute_realtime+0x2b0>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f040 80ba 	bne.w	8005c60 <protocol_execute_realtime+0x180>
 8005aec:	4ca9      	ldr	r4, [pc, #676]	; (8005d94 <protocol_execute_realtime+0x2b4>)
 8005aee:	4daa      	ldr	r5, [pc, #680]	; (8005d98 <protocol_execute_realtime+0x2b8>)
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005af0:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8005af2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d05b      	beq.n	8005bb2 <protocol_execute_realtime+0xd2>
    if (rt_exec & EXEC_RESET) {
 8005afa:	06e8      	lsls	r0, r5, #27
 8005afc:	f100 80ad 	bmi.w	8005c5a <protocol_execute_realtime+0x17a>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005b00:	07e9      	lsls	r1, r5, #31
 8005b02:	f100 812b 	bmi.w	8005d5c <protocol_execute_realtime+0x27c>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005b06:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8005b0a:	d033      	beq.n	8005b74 <protocol_execute_realtime+0x94>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005b0c:	7823      	ldrb	r3, [r4, #0]
 8005b0e:	b26e      	sxtb	r6, r5
 8005b10:	079a      	lsls	r2, r3, #30
 8005b12:	d129      	bne.n	8005b68 <protocol_execute_realtime+0x88>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005b14:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005b18:	f040 8154 	bne.w	8005dc4 <protocol_execute_realtime+0x2e4>
 8005b1c:	f005 0140 	and.w	r1, r5, #64	; 0x40
 8005b20:	f005 0208 	and.w	r2, r5, #8
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f040 8155 	bne.w	8005dd4 <protocol_execute_realtime+0x2f4>
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	70a0      	strb	r0, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005b2e:	2900      	cmp	r1, #0
 8005b30:	f000 8177 	beq.w	8005e22 <protocol_execute_realtime+0x342>
 8005b34:	2141      	movs	r1, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005b36:	70a1      	strb	r1, [r4, #2]
        if (rt_exec & EXEC_FEED_HOLD) {
 8005b38:	b11a      	cbz	r2, 8005b42 <protocol_execute_realtime+0x62>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005b3a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005b3e:	f000 8173 	beq.w	8005e28 <protocol_execute_realtime+0x348>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005b42:	06a8      	lsls	r0, r5, #26
 8005b44:	d510      	bpl.n	8005b68 <protocol_execute_realtime+0x88>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005b46:	2006      	movs	r0, #6
 8005b48:	f000 fcc6 	bl	80064d8 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005b4c:	78a3      	ldrb	r3, [r4, #2]
 8005b4e:	0619      	lsls	r1, r3, #24
 8005b50:	d407      	bmi.n	8005b62 <protocol_execute_realtime+0x82>
            if (sys.state == STATE_SAFETY_DOOR) {
 8005b52:	7822      	ldrb	r2, [r4, #0]
 8005b54:	2a40      	cmp	r2, #64	; 0x40
 8005b56:	f000 81a8 	beq.w	8005eaa <protocol_execute_realtime+0x3ca>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005b5a:	2a80      	cmp	r2, #128	; 0x80
 8005b5c:	d001      	beq.n	8005b62 <protocol_execute_realtime+0x82>
 8005b5e:	2240      	movs	r2, #64	; 0x40
 8005b60:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005b62:	f043 0320 	orr.w	r3, r3, #32
 8005b66:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 8005b68:	2e00      	cmp	r6, #0
 8005b6a:	f2c0 8147 	blt.w	8005dfc <protocol_execute_realtime+0x31c>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005b6e:	20e8      	movs	r0, #232	; 0xe8
 8005b70:	f003 fec4 	bl	80098fc <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 8005b74:	07ab      	lsls	r3, r5, #30
 8005b76:	d519      	bpl.n	8005bac <protocol_execute_realtime+0xcc>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005b78:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005b7c:	d113      	bne.n	8005ba6 <protocol_execute_realtime+0xc6>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005b7e:	7823      	ldrb	r3, [r4, #0]
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	f000 8132 	beq.w	8005dea <protocol_execute_realtime+0x30a>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f040 8151 	bne.w	8005e2e <protocol_execute_realtime+0x34e>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005b90:	f7fe fbea 	bl	8004368 <plan_get_current_block>
 8005b94:	b120      	cbz	r0, 8005ba0 <protocol_execute_realtime+0xc0>
 8005b96:	78a3      	ldrb	r3, [r4, #2]
 8005b98:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005b9c:	f000 8176 	beq.w	8005e8c <protocol_execute_realtime+0x3ac>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005ba4:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005ba6:	2002      	movs	r0, #2
 8005ba8:	f003 fea8 	bl	80098fc <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005bac:	0769      	lsls	r1, r5, #29
 8005bae:	f100 80bd 	bmi.w	8005d2c <protocol_execute_realtime+0x24c>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005bb2:	4b7a      	ldr	r3, [pc, #488]	; (8005d9c <protocol_execute_realtime+0x2bc>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005bb6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d17b      	bne.n	8005cb6 <protocol_execute_realtime+0x1d6>
  rt_exec = sys_rt_exec_accessory_override;
 8005bbe:	4b78      	ldr	r3, [pc, #480]	; (8005da0 <protocol_execute_realtime+0x2c0>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005bc2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005bc6:	b93b      	cbnz	r3, 8005bd8 <protocol_execute_realtime+0xf8>
 8005bc8:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005bca:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005bce:	d13b      	bne.n	8005c48 <protocol_execute_realtime+0x168>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005bd0:	78a3      	ldrb	r3, [r4, #2]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d13d      	bne.n	8005c52 <protocol_execute_realtime+0x172>
}
 8005bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005bd8:	f003 fec6 	bl	8009968 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005bdc:	7aa2      	ldrb	r2, [r4, #10]
 8005bde:	f015 0f01 	tst.w	r5, #1
 8005be2:	bf0c      	ite	eq
 8005be4:	4613      	moveq	r3, r2
 8005be6:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005be8:	07ae      	lsls	r6, r5, #30
 8005bea:	bf44      	itt	mi
 8005bec:	330a      	addmi	r3, #10
 8005bee:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005bf0:	0768      	lsls	r0, r5, #29
 8005bf2:	bf44      	itt	mi
 8005bf4:	3b0a      	submi	r3, #10
 8005bf6:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005bf8:	0729      	lsls	r1, r5, #28
 8005bfa:	bf44      	itt	mi
 8005bfc:	3301      	addmi	r3, #1
 8005bfe:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005c00:	06ef      	lsls	r7, r5, #27
 8005c02:	bf44      	itt	mi
 8005c04:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8005c08:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005c0a:	2bc8      	cmp	r3, #200	; 0xc8
 8005c0c:	bf28      	it	cs
 8005c0e:	23c8      	movcs	r3, #200	; 0xc8
 8005c10:	2b0a      	cmp	r3, #10
 8005c12:	bf38      	it	cc
 8005c14:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d006      	beq.n	8005c28 <protocol_execute_realtime+0x148>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005c1a:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005c1c:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005c1e:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005c20:	f042 0308 	orr.w	r3, r2, #8
 8005c24:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005c26:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005c28:	06ae      	lsls	r6, r5, #26
 8005c2a:	7823      	ldrb	r3, [r4, #0]
 8005c2c:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
 8005c30:	d525      	bpl.n	8005c7e <protocol_execute_realtime+0x19e>
      if (sys.state == STATE_HOLD) {
 8005c32:	2b10      	cmp	r3, #16
 8005c34:	d123      	bne.n	8005c7e <protocol_execute_realtime+0x19e>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005c36:	7ae1      	ldrb	r1, [r4, #11]
 8005c38:	2900      	cmp	r1, #0
 8005c3a:	f040 80e9 	bne.w	8005e10 <protocol_execute_realtime+0x330>
 8005c3e:	2102      	movs	r1, #2
 8005c40:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005c42:	2a00      	cmp	r2, #0
 8005c44:	f040 809e 	bne.w	8005d84 <protocol_execute_realtime+0x2a4>
    st_prep_buffer();
 8005c48:	f002 fdb4 	bl	80087b4 <st_prep_buffer>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005c4c:	78a3      	ldrb	r3, [r4, #2]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0c1      	beq.n	8005bd6 <protocol_execute_realtime+0xf6>
}
 8005c52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005c56:	f7ff bc2b 	b.w	80054b0 <protocol_exec_rt_suspend>
      sys.abort = true;  // Only place this is set true.
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	7063      	strb	r3, [r4, #1]
 8005c5e:	e7b7      	b.n	8005bd0 <protocol_execute_realtime+0xf0>
    sys.state = STATE_ALARM; // Set system alarm state
 8005c60:	2601      	movs	r6, #1
 8005c62:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005c66:	4c4b      	ldr	r4, [pc, #300]	; (8005d94 <protocol_execute_realtime+0x2b4>)
    report_alarm_message(rt_exec);
 8005c68:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005c6a:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8005c6c:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 8005c6e:	f000 fc1d 	bl	80064ac <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005c72:	42b5      	cmp	r5, r6
 8005c74:	d978      	bls.n	8005d68 <protocol_execute_realtime+0x288>
 8005c76:	4d48      	ldr	r5, [pc, #288]	; (8005d98 <protocol_execute_realtime+0x2b8>)
    system_clear_exec_alarm(); // Clear alarm
 8005c78:	f003 fe52 	bl	8009920 <system_clear_exec_alarm>
 8005c7c:	e738      	b.n	8005af0 <protocol_execute_realtime+0x10>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005c7e:	2a00      	cmp	r2, #0
 8005c80:	d0a3      	beq.n	8005bca <protocol_execute_realtime+0xea>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d17e      	bne.n	8005d84 <protocol_execute_realtime+0x2a4>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005c86:	4f47      	ldr	r7, [pc, #284]	; (8005da4 <protocol_execute_realtime+0x2c4>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005c88:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 8005c8a:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005c8c:	d505      	bpl.n	8005c9a <protocol_execute_realtime+0x1ba>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005c8e:	0633      	lsls	r3, r6, #24
 8005c90:	bf4c      	ite	mi
 8005c92:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005c96:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8005c9a:	0668      	lsls	r0, r5, #25
 8005c9c:	d505      	bpl.n	8005caa <protocol_execute_realtime+0x1ca>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005c9e:	0671      	lsls	r1, r6, #25
 8005ca0:	bf4c      	ite	mi
 8005ca2:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005ca6:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005caa:	4630      	mov	r0, r6
 8005cac:	f7fb feae 	bl	8001a0c <coolant_set_state>
 8005cb0:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005cb2:	723e      	strb	r6, [r7, #8]
 8005cb4:	e789      	b.n	8005bca <protocol_execute_realtime+0xea>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005cb6:	f003 fe4f 	bl	8009958 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005cba:	7a21      	ldrb	r1, [r4, #8]
 8005cbc:	f015 0f01 	tst.w	r5, #1
 8005cc0:	bf0c      	ite	eq
 8005cc2:	460b      	moveq	r3, r1
 8005cc4:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005cc6:	07af      	lsls	r7, r5, #30
 8005cc8:	bf44      	itt	mi
 8005cca:	330a      	addmi	r3, #10
 8005ccc:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005cce:	076e      	lsls	r6, r5, #29
 8005cd0:	bf44      	itt	mi
 8005cd2:	3b0a      	submi	r3, #10
 8005cd4:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005cd6:	0728      	lsls	r0, r5, #28
 8005cd8:	bf44      	itt	mi
 8005cda:	3301      	addmi	r3, #1
 8005cdc:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005cde:	06ef      	lsls	r7, r5, #27
 8005ce0:	bf44      	itt	mi
 8005ce2:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8005ce6:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005ce8:	2bc8      	cmp	r3, #200	; 0xc8
 8005cea:	bf28      	it	cs
 8005cec:	23c8      	movcs	r3, #200	; 0xc8
 8005cee:	2b0a      	cmp	r3, #10
 8005cf0:	bf38      	it	cc
 8005cf2:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005cf4:	7a60      	ldrb	r0, [r4, #9]
 8005cf6:	f015 0f20 	tst.w	r5, #32
 8005cfa:	bf14      	ite	ne
 8005cfc:	2264      	movne	r2, #100	; 0x64
 8005cfe:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005d00:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d04:	bf18      	it	ne
 8005d06:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005d08:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005d0c:	bf18      	it	ne
 8005d0e:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005d10:	4299      	cmp	r1, r3
 8005d12:	d102      	bne.n	8005d1a <protocol_execute_realtime+0x23a>
 8005d14:	4290      	cmp	r0, r2
 8005d16:	f43f af52 	beq.w	8005bbe <protocol_execute_realtime+0xde>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005d1a:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 8005d1c:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005d1e:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005d20:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005d22:	f7fe fb93 	bl	800444c <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005d26:	f7fe fe85 	bl	8004a34 <plan_cycle_reinitialize>
 8005d2a:	e748      	b.n	8005bbe <protocol_execute_realtime+0xde>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005d2c:	7822      	ldrb	r2, [r4, #0]
 8005d2e:	78a3      	ldrb	r3, [r4, #2]
 8005d30:	f012 0fd0 	tst.w	r2, #208	; 0xd0
 8005d34:	b259      	sxtb	r1, r3
 8005d36:	d001      	beq.n	8005d3c <protocol_execute_realtime+0x25c>
 8005d38:	78e2      	ldrb	r2, [r4, #3]
 8005d3a:	b3aa      	cbz	r2, 8005da8 <protocol_execute_realtime+0x2c8>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	db35      	blt.n	8005dac <protocol_execute_realtime+0x2cc>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005d40:	f013 0220 	ands.w	r2, r3, #32
 8005d44:	d01b      	beq.n	8005d7e <protocol_execute_realtime+0x29e>
          sys.state = STATE_SAFETY_DOOR;
 8005d46:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005d4c:	f043 0301 	orr.w	r3, r3, #1
 8005d50:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005d52:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005d54:	2004      	movs	r0, #4
 8005d56:	f003 fdd1 	bl	80098fc <system_clear_exec_state_flag>
 8005d5a:	e72a      	b.n	8005bb2 <protocol_execute_realtime+0xd2>
      report_realtime_status();
 8005d5c:	f001 f906 	bl	8006f6c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005d60:	2001      	movs	r0, #1
 8005d62:	f003 fdcb 	bl	80098fc <system_clear_exec_state_flag>
 8005d66:	e6ce      	b.n	8005b06 <protocol_execute_realtime+0x26>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005d68:	4630      	mov	r0, r6
 8005d6a:	f000 fbb5 	bl	80064d8 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005d6e:	2010      	movs	r0, #16
 8005d70:	f003 fdc4 	bl	80098fc <system_clear_exec_state_flag>
 8005d74:	4d08      	ldr	r5, [pc, #32]	; (8005d98 <protocol_execute_realtime+0x2b8>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005d76:	782b      	ldrb	r3, [r5, #0]
 8005d78:	06de      	lsls	r6, r3, #27
 8005d7a:	d5fc      	bpl.n	8005d76 <protocol_execute_realtime+0x296>
 8005d7c:	e77c      	b.n	8005c78 <protocol_execute_realtime+0x198>
          sys.suspend = SUSPEND_DISABLE;
 8005d7e:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005d80:	7022      	strb	r2, [r4, #0]
 8005d82:	e7e7      	b.n	8005d54 <protocol_execute_realtime+0x274>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005d84:	f013 0f18 	tst.w	r3, #24
 8005d88:	f43f af1f 	beq.w	8005bca <protocol_execute_realtime+0xea>
 8005d8c:	e77b      	b.n	8005c86 <protocol_execute_realtime+0x1a6>
 8005d8e:	bf00      	nop
 8005d90:	20001428 	.word	0x20001428
 8005d94:	200013f0 	.word	0x200013f0
 8005d98:	20001405 	.word	0x20001405
 8005d9c:	200013ec 	.word	0x200013ec
 8005da0:	20001404 	.word	0x20001404
 8005da4:	20001354 	.word	0x20001354
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005da8:	2900      	cmp	r1, #0
 8005daa:	da52      	bge.n	8005e52 <protocol_execute_realtime+0x372>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005dac:	2300      	movs	r3, #0
 8005dae:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005db0:	f7fe fa96 	bl	80042e0 <plan_reset>
          st_reset();
 8005db4:	f002 fb96 	bl	80084e4 <st_reset>
          gc_sync_position();
 8005db8:	f7fb ff2a 	bl	8001c10 <gc_sync_position>
          plan_sync_position();
 8005dbc:	f7fe fe16 	bl	80049ec <plan_sync_position>
 8005dc0:	78a3      	ldrb	r3, [r4, #2]
 8005dc2:	e7bd      	b.n	8005d40 <protocol_execute_realtime+0x260>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005dc4:	78a2      	ldrb	r2, [r4, #2]
 8005dc6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8005dca:	d04f      	beq.n	8005e6c <protocol_execute_realtime+0x38c>
 8005dcc:	f005 0140 	and.w	r1, r5, #64	; 0x40
 8005dd0:	f005 0208 	and.w	r2, r5, #8
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005dd4:	2900      	cmp	r1, #0
 8005dd6:	f43f aeaf 	beq.w	8005b38 <protocol_execute_realtime+0x58>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005dda:	069f      	lsls	r7, r3, #26
 8005ddc:	f53f aeac 	bmi.w	8005b38 <protocol_execute_realtime+0x58>
 8005de0:	78a1      	ldrb	r1, [r4, #2]
 8005de2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005de6:	70a1      	strb	r1, [r4, #2]
 8005de8:	e6a6      	b.n	8005b38 <protocol_execute_realtime+0x58>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005dea:	78a3      	ldrb	r3, [r4, #2]
 8005dec:	f013 0220 	ands.w	r2, r3, #32
 8005df0:	f47f aed9 	bne.w	8005ba6 <protocol_execute_realtime+0xc6>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005df4:	06df      	lsls	r7, r3, #27
 8005df6:	d551      	bpl.n	8005e9c <protocol_execute_realtime+0x3bc>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005df8:	7022      	strb	r2, [r4, #0]
 8005dfa:	e6c7      	b.n	8005b8c <protocol_execute_realtime+0xac>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005dfc:	7823      	ldrb	r3, [r4, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d103      	bne.n	8005e0a <protocol_execute_realtime+0x32a>
 8005e02:	78a3      	ldrb	r3, [r4, #2]
 8005e04:	f043 0305 	orr.w	r3, r3, #5
 8005e08:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 8005e0a:	2380      	movs	r3, #128	; 0x80
 8005e0c:	7023      	strb	r3, [r4, #0]
 8005e0e:	e6ae      	b.n	8005b6e <protocol_execute_realtime+0x8e>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005e10:	07c8      	lsls	r0, r1, #31
 8005e12:	d502      	bpl.n	8005e1a <protocol_execute_realtime+0x33a>
 8005e14:	f041 0104 	orr.w	r1, r1, #4
 8005e18:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005e1a:	2a00      	cmp	r2, #0
 8005e1c:	f47f af33 	bne.w	8005c86 <protocol_execute_realtime+0x1a6>
 8005e20:	e712      	b.n	8005c48 <protocol_execute_realtime+0x168>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005e22:	2a00      	cmp	r2, #0
 8005e24:	f43f ae8d 	beq.w	8005b42 <protocol_execute_realtime+0x62>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005e28:	2310      	movs	r3, #16
 8005e2a:	7023      	strb	r3, [r4, #0]
 8005e2c:	e689      	b.n	8005b42 <protocol_execute_realtime+0x62>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005e2e:	06da      	lsls	r2, r3, #27
 8005e30:	f57f aeb9 	bpl.w	8005ba6 <protocol_execute_realtime+0xc6>
 8005e34:	78a2      	ldrb	r2, [r4, #2]
 8005e36:	07d0      	lsls	r0, r2, #31
 8005e38:	f57f aeb5 	bpl.w	8005ba6 <protocol_execute_realtime+0xc6>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005e3c:	2b10      	cmp	r3, #16
 8005e3e:	f47f aea5 	bne.w	8005b8c <protocol_execute_realtime+0xac>
 8005e42:	7ae3      	ldrb	r3, [r4, #11]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f43f aea1 	beq.w	8005b8c <protocol_execute_realtime+0xac>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005e4a:	f043 0308 	orr.w	r3, r3, #8
 8005e4e:	72e3      	strb	r3, [r4, #11]
 8005e50:	e6a9      	b.n	8005ba6 <protocol_execute_realtime+0xc6>
        plan_cycle_reinitialize();
 8005e52:	f7fe fdef 	bl	8004a34 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005e56:	7923      	ldrb	r3, [r4, #4]
 8005e58:	079a      	lsls	r2, r3, #30
 8005e5a:	d503      	bpl.n	8005e64 <protocol_execute_realtime+0x384>
 8005e5c:	78a2      	ldrb	r2, [r4, #2]
 8005e5e:	f042 0201 	orr.w	r2, r2, #1
 8005e62:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005e64:	f023 0306 	bic.w	r3, r3, #6
 8005e68:	7123      	strb	r3, [r4, #4]
 8005e6a:	e773      	b.n	8005d54 <protocol_execute_realtime+0x274>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005e6c:	f002 fc8c 	bl	8008788 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005e70:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005e72:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005e74:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	f47f ae50 	bne.w	8005b1c <protocol_execute_realtime+0x3c>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005e7c:	2e00      	cmp	r6, #0
 8005e7e:	f6ff ae60 	blt.w	8005b42 <protocol_execute_realtime+0x62>
 8005e82:	78a3      	ldrb	r3, [r4, #2]
 8005e84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e88:	70a3      	strb	r3, [r4, #2]
 8005e8a:	e65a      	b.n	8005b42 <protocol_execute_realtime+0x62>
              sys.state = STATE_CYCLE;
 8005e8c:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005e8e:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005e90:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8005e92:	f002 fc8f 	bl	80087b4 <st_prep_buffer>
              st_wake_up();
 8005e96:	f002 f90b 	bl	80080b0 <st_wake_up>
 8005e9a:	e684      	b.n	8005ba6 <protocol_execute_realtime+0xc6>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005e9c:	075e      	lsls	r6, r3, #29
 8005e9e:	f57f ae82 	bpl.w	8005ba6 <protocol_execute_realtime+0xc6>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005ea2:	f043 0308 	orr.w	r3, r3, #8
 8005ea6:	70a3      	strb	r3, [r4, #2]
 8005ea8:	e67d      	b.n	8005ba6 <protocol_execute_realtime+0xc6>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005eaa:	071a      	lsls	r2, r3, #28
 8005eac:	f57f ae57 	bpl.w	8005b5e <protocol_execute_realtime+0x7e>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005eb0:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005eb4:	f043 0302 	orr.w	r3, r3, #2
 8005eb8:	e651      	b.n	8005b5e <protocol_execute_realtime+0x7e>
 8005eba:	bf00      	nop

08005ebc <protocol_buffer_synchronize>:
{
 8005ebc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8005ec0:	f7fe fa52 	bl	8004368 <plan_get_current_block>
 8005ec4:	b110      	cbz	r0, 8005ecc <protocol_buffer_synchronize+0x10>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8005ec6:	2002      	movs	r0, #2
 8005ec8:	f003 fd0e 	bl	80098e8 <system_set_exec_state_flag>
 8005ecc:	4ebd      	ldr	r6, [pc, #756]	; (80061c4 <protocol_buffer_synchronize+0x308>)
 8005ece:	4cbe      	ldr	r4, [pc, #760]	; (80061c8 <protocol_buffer_synchronize+0x30c>)
 8005ed0:	4dbe      	ldr	r5, [pc, #760]	; (80061cc <protocol_buffer_synchronize+0x310>)
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005ed2:	f8df 8300 	ldr.w	r8, [pc, #768]	; 80061d4 <protocol_buffer_synchronize+0x318>
  rt_exec = sys_rt_exec_accessory_override;
 8005ed6:	4fbe      	ldr	r7, [pc, #760]	; (80061d0 <protocol_buffer_synchronize+0x314>)
        uint8_t coolant_state = gc_state.modal.coolant;
 8005ed8:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 80061d8 <protocol_buffer_synchronize+0x31c>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005edc:	7833      	ldrb	r3, [r6, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005ede:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f040 80a5 	bne.w	8006032 <protocol_buffer_synchronize+0x176>
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005ee8:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8005eea:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d079      	beq.n	8005fe6 <protocol_buffer_synchronize+0x12a>
    if (rt_exec & EXEC_RESET) {
 8005ef2:	f01a 0f10 	tst.w	sl, #16
 8005ef6:	f040 8094 	bne.w	8006022 <protocol_buffer_synchronize+0x166>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005efa:	f01a 0f01 	tst.w	sl, #1
 8005efe:	f040 8148 	bne.w	8006192 <protocol_buffer_synchronize+0x2d6>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005f02:	f01a 0fe8 	tst.w	sl, #232	; 0xe8
 8005f06:	d033      	beq.n	8005f70 <protocol_buffer_synchronize+0xb4>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005f08:	7823      	ldrb	r3, [r4, #0]
 8005f0a:	fa4f fb8a 	sxtb.w	fp, sl
 8005f0e:	079a      	lsls	r2, r3, #30
 8005f10:	d127      	bne.n	8005f62 <protocol_buffer_synchronize+0xa6>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005f12:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005f16:	f000 816e 	beq.w	80061f6 <protocol_buffer_synchronize+0x33a>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005f1a:	78a2      	ldrb	r2, [r4, #2]
 8005f1c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8005f20:	f000 8162 	beq.w	80061e8 <protocol_buffer_synchronize+0x32c>
 8005f24:	f00a 0240 	and.w	r2, sl, #64	; 0x40
 8005f28:	f00a 0108 	and.w	r1, sl, #8
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005f2c:	2a00      	cmp	r2, #0
 8005f2e:	f040 81ab 	bne.w	8006288 <protocol_buffer_synchronize+0x3cc>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005f32:	b119      	cbz	r1, 8005f3c <protocol_buffer_synchronize+0x80>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005f34:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005f38:	f000 816a 	beq.w	8006210 <protocol_buffer_synchronize+0x354>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005f3c:	f01a 0f20 	tst.w	sl, #32
 8005f40:	d00f      	beq.n	8005f62 <protocol_buffer_synchronize+0xa6>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005f42:	2006      	movs	r0, #6
 8005f44:	f000 fac8 	bl	80064d8 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005f48:	78a3      	ldrb	r3, [r4, #2]
 8005f4a:	061a      	lsls	r2, r3, #24
 8005f4c:	d406      	bmi.n	8005f5c <protocol_buffer_synchronize+0xa0>
            if (sys.state == STATE_SAFETY_DOOR) {
 8005f4e:	7822      	ldrb	r2, [r4, #0]
 8005f50:	2a40      	cmp	r2, #64	; 0x40
 8005f52:	f000 81a9 	beq.w	80062a8 <protocol_buffer_synchronize+0x3ec>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005f56:	2a80      	cmp	r2, #128	; 0x80
 8005f58:	f040 81ac 	bne.w	80062b4 <protocol_buffer_synchronize+0x3f8>
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005f5c:	f043 0320 	orr.w	r3, r3, #32
 8005f60:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 8005f62:	f1bb 0f00 	cmp.w	fp, #0
 8005f66:	f2c0 8139 	blt.w	80061dc <protocol_buffer_synchronize+0x320>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005f6a:	20e8      	movs	r0, #232	; 0xe8
 8005f6c:	f003 fcc6 	bl	80098fc <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 8005f70:	f01a 0f02 	tst.w	sl, #2
 8005f74:	d019      	beq.n	8005faa <protocol_buffer_synchronize+0xee>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005f76:	f01a 0f68 	tst.w	sl, #104	; 0x68
 8005f7a:	d113      	bne.n	8005fa4 <protocol_buffer_synchronize+0xe8>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005f7c:	7823      	ldrb	r3, [r4, #0]
 8005f7e:	2b40      	cmp	r3, #64	; 0x40
 8005f80:	f000 8157 	beq.w	8006232 <protocol_buffer_synchronize+0x376>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f040 8198 	bne.w	80062ba <protocol_buffer_synchronize+0x3fe>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005f8e:	f7fe f9eb 	bl	8004368 <plan_get_current_block>
 8005f92:	b120      	cbz	r0, 8005f9e <protocol_buffer_synchronize+0xe2>
 8005f94:	78a3      	ldrb	r3, [r4, #2]
 8005f96:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005f9a:	f000 817d 	beq.w	8006298 <protocol_buffer_synchronize+0x3dc>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005fa2:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005fa4:	2002      	movs	r0, #2
 8005fa6:	f003 fca9 	bl	80098fc <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005faa:	f01a 0f04 	tst.w	sl, #4
 8005fae:	d01a      	beq.n	8005fe6 <protocol_buffer_synchronize+0x12a>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005fb0:	7822      	ldrb	r2, [r4, #0]
 8005fb2:	78a3      	ldrb	r3, [r4, #2]
 8005fb4:	f012 0fd0 	tst.w	r2, #208	; 0xd0
 8005fb8:	b259      	sxtb	r1, r3
 8005fba:	d003      	beq.n	8005fc4 <protocol_buffer_synchronize+0x108>
 8005fbc:	78e2      	ldrb	r2, [r4, #3]
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	f000 8129 	beq.w	8006216 <protocol_buffer_synchronize+0x35a>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005fc4:	2900      	cmp	r1, #0
 8005fc6:	f2c0 8128 	blt.w	800621a <protocol_buffer_synchronize+0x35e>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005fca:	f013 0220 	ands.w	r2, r3, #32
 8005fce:	f000 80f0 	beq.w	80061b2 <protocol_buffer_synchronize+0x2f6>
          sys.state = STATE_SAFETY_DOOR;
 8005fd2:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005fde:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005fe0:	2004      	movs	r0, #4
 8005fe2:	f003 fc8b 	bl	80098fc <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005fe6:	f898 3000 	ldrb.w	r3, [r8]
  if (rt_exec) {
 8005fea:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f040 808f 	bne.w	8006112 <protocol_buffer_synchronize+0x256>
  rt_exec = sys_rt_exec_accessory_override;
 8005ff4:	783b      	ldrb	r3, [r7, #0]
  if (rt_exec) {
 8005ff6:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005ffa:	bb4b      	cbnz	r3, 8006050 <protocol_buffer_synchronize+0x194>
 8005ffc:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005ffe:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8006002:	d162      	bne.n	80060ca <protocol_buffer_synchronize+0x20e>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006004:	78a3      	ldrb	r3, [r4, #2]
 8006006:	b98b      	cbnz	r3, 800602c <protocol_buffer_synchronize+0x170>
    if (sys.abort) { return; } // Check for system abort
 8006008:	7863      	ldrb	r3, [r4, #1]
 800600a:	b943      	cbnz	r3, 800601e <protocol_buffer_synchronize+0x162>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 800600c:	f7fe f9ac 	bl	8004368 <plan_get_current_block>
 8006010:	2800      	cmp	r0, #0
 8006012:	f47f af63 	bne.w	8005edc <protocol_buffer_synchronize+0x20>
 8006016:	7823      	ldrb	r3, [r4, #0]
 8006018:	2b08      	cmp	r3, #8
 800601a:	f43f af5f 	beq.w	8005edc <protocol_buffer_synchronize+0x20>
}
 800601e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      sys.abort = true;  // Only place this is set true.
 8006022:	2201      	movs	r2, #1
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006024:	78a3      	ldrb	r3, [r4, #2]
      sys.abort = true;  // Only place this is set true.
 8006026:	7062      	strb	r2, [r4, #1]
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0f8      	beq.n	800601e <protocol_buffer_synchronize+0x162>
 800602c:	f7ff fa40 	bl	80054b0 <protocol_exec_rt_suspend>
 8006030:	e7ea      	b.n	8006008 <protocol_buffer_synchronize+0x14c>
    sys.state = STATE_ALARM; // Set system alarm state
 8006032:	f04f 0b01 	mov.w	fp, #1
    report_alarm_message(rt_exec);
 8006036:	4650      	mov	r0, sl
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8006038:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    sys.state = STATE_ALARM; // Set system alarm state
 800603c:	f884 b000 	strb.w	fp, [r4]
    report_alarm_message(rt_exec);
 8006040:	f000 fa34 	bl	80064ac <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8006044:	45da      	cmp	sl, fp
 8006046:	f240 80aa 	bls.w	800619e <protocol_buffer_synchronize+0x2e2>
    system_clear_exec_alarm(); // Clear alarm
 800604a:	f003 fc69 	bl	8009920 <system_clear_exec_alarm>
 800604e:	e74b      	b.n	8005ee8 <protocol_buffer_synchronize+0x2c>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8006050:	f003 fc8a 	bl	8009968 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8006054:	f01a 0f01 	tst.w	sl, #1
 8006058:	bf18      	it	ne
 800605a:	2364      	movne	r3, #100	; 0x64
 800605c:	7aa2      	ldrb	r2, [r4, #10]
 800605e:	bf08      	it	eq
 8006060:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8006062:	f01a 0f02 	tst.w	sl, #2
 8006066:	bf1c      	itt	ne
 8006068:	330a      	addne	r3, #10
 800606a:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 800606c:	f01a 0f04 	tst.w	sl, #4
 8006070:	bf1c      	itt	ne
 8006072:	3b0a      	subne	r3, #10
 8006074:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8006076:	f01a 0f08 	tst.w	sl, #8
 800607a:	bf1c      	itt	ne
 800607c:	3301      	addne	r3, #1
 800607e:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8006080:	f01a 0f10 	tst.w	sl, #16
 8006084:	bf1c      	itt	ne
 8006086:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800608a:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 800608c:	2bc8      	cmp	r3, #200	; 0xc8
 800608e:	bf28      	it	cs
 8006090:	23c8      	movcs	r3, #200	; 0xc8
 8006092:	2b0a      	cmp	r3, #10
 8006094:	bf38      	it	cc
 8006096:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8006098:	429a      	cmp	r2, r3
 800609a:	d006      	beq.n	80060aa <protocol_buffer_synchronize+0x1ee>
      sys.report_ovr_counter = 0; // Set to report change immediately
 800609c:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800609e:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 80060a0:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80060a2:	f042 0308 	orr.w	r3, r2, #8
 80060a6:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80060a8:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80060aa:	f01a 0f20 	tst.w	sl, #32
 80060ae:	7823      	ldrb	r3, [r4, #0]
 80060b0:	f00a 02c0 	and.w	r2, sl, #192	; 0xc0
 80060b4:	d00c      	beq.n	80060d0 <protocol_buffer_synchronize+0x214>
      if (sys.state == STATE_HOLD) {
 80060b6:	2b10      	cmp	r3, #16
 80060b8:	d10a      	bne.n	80060d0 <protocol_buffer_synchronize+0x214>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 80060ba:	7ae1      	ldrb	r1, [r4, #11]
 80060bc:	2900      	cmp	r1, #0
 80060be:	f040 80c1 	bne.w	8006244 <protocol_buffer_synchronize+0x388>
 80060c2:	2102      	movs	r1, #2
 80060c4:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	d176      	bne.n	80061b8 <protocol_buffer_synchronize+0x2fc>
    st_prep_buffer();
 80060ca:	f002 fb73 	bl	80087b4 <st_prep_buffer>
 80060ce:	e799      	b.n	8006004 <protocol_buffer_synchronize+0x148>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	d094      	beq.n	8005ffe <protocol_buffer_synchronize+0x142>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d16f      	bne.n	80061b8 <protocol_buffer_synchronize+0x2fc>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80060d8:	f01a 0f80 	tst.w	sl, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 80060dc:	f899 b008 	ldrb.w	fp, [r9, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80060e0:	d006      	beq.n	80060f0 <protocol_buffer_synchronize+0x234>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 80060e2:	f01b 0f80 	tst.w	fp, #128	; 0x80
 80060e6:	bf14      	ite	ne
 80060e8:	f00b 0b7f 	andne.w	fp, fp, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 80060ec:	f04b 0b80 	orreq.w	fp, fp, #128	; 0x80
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 80060f0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80060f4:	d006      	beq.n	8006104 <protocol_buffer_synchronize+0x248>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 80060f6:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80060fa:	bf14      	ite	ne
 80060fc:	f00b 0bbf 	andne.w	fp, fp, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8006100:	f04b 0b40 	orreq.w	fp, fp, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8006104:	4658      	mov	r0, fp
 8006106:	f7fb fc81 	bl	8001a0c <coolant_set_state>
 800610a:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 800610c:	f889 b008 	strb.w	fp, [r9, #8]
 8006110:	e775      	b.n	8005ffe <protocol_buffer_synchronize+0x142>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8006112:	f003 fc21 	bl	8009958 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8006116:	f01a 0f01 	tst.w	sl, #1
 800611a:	bf18      	it	ne
 800611c:	2364      	movne	r3, #100	; 0x64
 800611e:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 8006120:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 8006122:	bf08      	it	eq
 8006124:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8006126:	f01a 0f02 	tst.w	sl, #2
 800612a:	bf1c      	itt	ne
 800612c:	330a      	addne	r3, #10
 800612e:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8006130:	f01a 0f04 	tst.w	sl, #4
 8006134:	bf1c      	itt	ne
 8006136:	3b0a      	subne	r3, #10
 8006138:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 800613a:	f01a 0f08 	tst.w	sl, #8
 800613e:	bf1c      	itt	ne
 8006140:	3301      	addne	r3, #1
 8006142:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8006144:	f01a 0f10 	tst.w	sl, #16
 8006148:	bf1c      	itt	ne
 800614a:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800614e:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8006150:	2bc8      	cmp	r3, #200	; 0xc8
 8006152:	bf28      	it	cs
 8006154:	23c8      	movcs	r3, #200	; 0xc8
 8006156:	2b0a      	cmp	r3, #10
 8006158:	bf38      	it	cc
 800615a:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 800615c:	f01a 0f20 	tst.w	sl, #32
 8006160:	bf14      	ite	ne
 8006162:	2164      	movne	r1, #100	; 0x64
 8006164:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8006166:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800616a:	bf18      	it	ne
 800616c:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 800616e:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8006172:	bf18      	it	ne
 8006174:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8006176:	429a      	cmp	r2, r3
 8006178:	d102      	bne.n	8006180 <protocol_buffer_synchronize+0x2c4>
 800617a:	4288      	cmp	r0, r1
 800617c:	f43f af3a 	beq.w	8005ff4 <protocol_buffer_synchronize+0x138>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006180:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 8006182:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8006184:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006186:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 8006188:	f7fe f960 	bl	800444c <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 800618c:	f7fe fc52 	bl	8004a34 <plan_cycle_reinitialize>
 8006190:	e730      	b.n	8005ff4 <protocol_buffer_synchronize+0x138>
      report_realtime_status();
 8006192:	f000 feeb 	bl	8006f6c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8006196:	2001      	movs	r0, #1
 8006198:	f003 fbb0 	bl	80098fc <system_clear_exec_state_flag>
 800619c:	e6b1      	b.n	8005f02 <protocol_buffer_synchronize+0x46>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 800619e:	4658      	mov	r0, fp
 80061a0:	f000 f99a 	bl	80064d8 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 80061a4:	2010      	movs	r0, #16
 80061a6:	f003 fba9 	bl	80098fc <system_clear_exec_state_flag>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 80061aa:	782b      	ldrb	r3, [r5, #0]
 80061ac:	06d9      	lsls	r1, r3, #27
 80061ae:	d5fc      	bpl.n	80061aa <protocol_buffer_synchronize+0x2ee>
 80061b0:	e74b      	b.n	800604a <protocol_buffer_synchronize+0x18e>
          sys.suspend = SUSPEND_DISABLE;
 80061b2:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 80061b4:	7022      	strb	r2, [r4, #0]
 80061b6:	e713      	b.n	8005fe0 <protocol_buffer_synchronize+0x124>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80061b8:	f013 0f18 	tst.w	r3, #24
 80061bc:	f43f af1f 	beq.w	8005ffe <protocol_buffer_synchronize+0x142>
 80061c0:	e78a      	b.n	80060d8 <protocol_buffer_synchronize+0x21c>
 80061c2:	bf00      	nop
 80061c4:	20001428 	.word	0x20001428
 80061c8:	200013f0 	.word	0x200013f0
 80061cc:	20001405 	.word	0x20001405
 80061d0:	20001404 	.word	0x20001404
 80061d4:	200013ec 	.word	0x200013ec
 80061d8:	20001354 	.word	0x20001354
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80061dc:	7823      	ldrb	r3, [r4, #0]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d03e      	beq.n	8006260 <protocol_buffer_synchronize+0x3a4>
        sys.state = STATE_SLEEP; 
 80061e2:	2380      	movs	r3, #128	; 0x80
 80061e4:	7023      	strb	r3, [r4, #0]
 80061e6:	e6c0      	b.n	8005f6a <protocol_buffer_synchronize+0xae>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 80061e8:	f002 face 	bl	8008788 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80061ec:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80061ee:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80061f0:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80061f2:	2b20      	cmp	r3, #32
 80061f4:	d07d      	beq.n	80062f2 <protocol_buffer_synchronize+0x436>
 80061f6:	f00a 0240 	and.w	r2, sl, #64	; 0x40
 80061fa:	f00a 0108 	and.w	r1, sl, #8
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f47f ae94 	bne.w	8005f2c <protocol_buffer_synchronize+0x70>
 8006204:	2001      	movs	r0, #1
 8006206:	70a0      	strb	r0, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8006208:	bb3a      	cbnz	r2, 800625a <protocol_buffer_synchronize+0x39e>
        if (rt_exec & EXEC_FEED_HOLD) {
 800620a:	2900      	cmp	r1, #0
 800620c:	f43f ae96 	beq.w	8005f3c <protocol_buffer_synchronize+0x80>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8006210:	2310      	movs	r3, #16
 8006212:	7023      	strb	r3, [r4, #0]
 8006214:	e692      	b.n	8005f3c <protocol_buffer_synchronize+0x80>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8006216:	2900      	cmp	r1, #0
 8006218:	da29      	bge.n	800626e <protocol_buffer_synchronize+0x3b2>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 800621a:	2300      	movs	r3, #0
 800621c:	7123      	strb	r3, [r4, #4]
          plan_reset();
 800621e:	f7fe f85f 	bl	80042e0 <plan_reset>
          st_reset();
 8006222:	f002 f95f 	bl	80084e4 <st_reset>
          gc_sync_position();
 8006226:	f7fb fcf3 	bl	8001c10 <gc_sync_position>
          plan_sync_position();
 800622a:	f7fe fbdf 	bl	80049ec <plan_sync_position>
 800622e:	78a3      	ldrb	r3, [r4, #2]
 8006230:	e6cb      	b.n	8005fca <protocol_buffer_synchronize+0x10e>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8006232:	78a3      	ldrb	r3, [r4, #2]
 8006234:	f013 0220 	ands.w	r2, r3, #32
 8006238:	f47f aeb4 	bne.w	8005fa4 <protocol_buffer_synchronize+0xe8>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 800623c:	06d9      	lsls	r1, r3, #27
 800623e:	d551      	bpl.n	80062e4 <protocol_buffer_synchronize+0x428>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8006240:	7022      	strb	r2, [r4, #0]
 8006242:	e6a2      	b.n	8005f8a <protocol_buffer_synchronize+0xce>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8006244:	07c8      	lsls	r0, r1, #31
 8006246:	d502      	bpl.n	800624e <protocol_buffer_synchronize+0x392>
 8006248:	f041 0104 	orr.w	r1, r1, #4
 800624c:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 800624e:	2a00      	cmp	r2, #0
 8006250:	f47f af42 	bne.w	80060d8 <protocol_buffer_synchronize+0x21c>
    st_prep_buffer();
 8006254:	f002 faae 	bl	80087b4 <st_prep_buffer>
 8006258:	e6d4      	b.n	8006004 <protocol_buffer_synchronize+0x148>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 800625a:	2241      	movs	r2, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 800625c:	70a2      	strb	r2, [r4, #2]
 800625e:	e668      	b.n	8005f32 <protocol_buffer_synchronize+0x76>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8006260:	78a3      	ldrb	r3, [r4, #2]
 8006262:	f043 0305 	orr.w	r3, r3, #5
 8006266:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 8006268:	2380      	movs	r3, #128	; 0x80
 800626a:	7023      	strb	r3, [r4, #0]
 800626c:	e67d      	b.n	8005f6a <protocol_buffer_synchronize+0xae>
        plan_cycle_reinitialize();
 800626e:	f7fe fbe1 	bl	8004a34 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8006272:	7923      	ldrb	r3, [r4, #4]
 8006274:	079a      	lsls	r2, r3, #30
 8006276:	d503      	bpl.n	8006280 <protocol_buffer_synchronize+0x3c4>
 8006278:	78a2      	ldrb	r2, [r4, #2]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8006280:	f023 0306 	bic.w	r3, r3, #6
 8006284:	7123      	strb	r3, [r4, #4]
 8006286:	e6ab      	b.n	8005fe0 <protocol_buffer_synchronize+0x124>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8006288:	0698      	lsls	r0, r3, #26
 800628a:	f53f ae52 	bmi.w	8005f32 <protocol_buffer_synchronize+0x76>
 800628e:	78a2      	ldrb	r2, [r4, #2]
 8006290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006294:	70a2      	strb	r2, [r4, #2]
 8006296:	e64c      	b.n	8005f32 <protocol_buffer_synchronize+0x76>
              sys.state = STATE_CYCLE;
 8006298:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 800629a:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 800629c:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 800629e:	f002 fa89 	bl	80087b4 <st_prep_buffer>
              st_wake_up();
 80062a2:	f001 ff05 	bl	80080b0 <st_wake_up>
 80062a6:	e67d      	b.n	8005fa4 <protocol_buffer_synchronize+0xe8>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 80062a8:	0718      	lsls	r0, r3, #28
 80062aa:	d503      	bpl.n	80062b4 <protocol_buffer_synchronize+0x3f8>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 80062ac:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 80062b0:	f043 0302 	orr.w	r3, r3, #2
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 80062b4:	2240      	movs	r2, #64	; 0x40
 80062b6:	7022      	strb	r2, [r4, #0]
 80062b8:	e650      	b.n	8005f5c <protocol_buffer_synchronize+0xa0>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80062ba:	06da      	lsls	r2, r3, #27
 80062bc:	f57f ae72 	bpl.w	8005fa4 <protocol_buffer_synchronize+0xe8>
 80062c0:	78a2      	ldrb	r2, [r4, #2]
 80062c2:	07d1      	lsls	r1, r2, #31
 80062c4:	f57f ae6e 	bpl.w	8005fa4 <protocol_buffer_synchronize+0xe8>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	f47f ae5e 	bne.w	8005f8a <protocol_buffer_synchronize+0xce>
 80062ce:	7ae3      	ldrb	r3, [r4, #11]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f43f ae5a 	beq.w	8005f8a <protocol_buffer_synchronize+0xce>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 80062d6:	f043 0308 	orr.w	r3, r3, #8
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80062da:	2002      	movs	r0, #2
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 80062dc:	72e3      	strb	r3, [r4, #11]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80062de:	f003 fb0d 	bl	80098fc <system_clear_exec_state_flag>
 80062e2:	e662      	b.n	8005faa <protocol_buffer_synchronize+0xee>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80062e4:	0758      	lsls	r0, r3, #29
 80062e6:	f57f ae5d 	bpl.w	8005fa4 <protocol_buffer_synchronize+0xe8>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 80062ea:	f043 0308 	orr.w	r3, r3, #8
 80062ee:	70a3      	strb	r3, [r4, #2]
 80062f0:	e658      	b.n	8005fa4 <protocol_buffer_synchronize+0xe8>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 80062f2:	f1bb 0f00 	cmp.w	fp, #0
 80062f6:	f6ff ae21 	blt.w	8005f3c <protocol_buffer_synchronize+0x80>
 80062fa:	78a3      	ldrb	r3, [r4, #2]
 80062fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006300:	70a3      	strb	r3, [r4, #2]
 8006302:	e61b      	b.n	8005f3c <protocol_buffer_synchronize+0x80>

08006304 <protocol_main_loop>:
{
 8006304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 8006308:	4b58      	ldr	r3, [pc, #352]	; (800646c <protocol_main_loop+0x168>)
 800630a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800630e:	071a      	lsls	r2, r3, #28
 8006310:	f100 8092 	bmi.w	8006438 <protocol_main_loop+0x134>
 8006314:	4e56      	ldr	r6, [pc, #344]	; (8006470 <protocol_main_loop+0x16c>)
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 8006316:	7833      	ldrb	r3, [r6, #0]
 8006318:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 800631c:	d075      	beq.n	800640a <protocol_main_loop+0x106>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 800631e:	2002      	movs	r0, #2
 8006320:	f000 f8da 	bl	80064d8 <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 8006324:	2301      	movs	r3, #1
 8006326:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 8006328:	2500      	movs	r5, #0
 800632a:	462c      	mov	r4, r5
        line[char_counter] = 0; // Set string termination character.
 800632c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8006474 <protocol_main_loop+0x170>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8006330:	f001 f84a 	bl	80073c8 <serial_read>
 8006334:	28ff      	cmp	r0, #255	; 0xff
 8006336:	d00f      	beq.n	8006358 <protocol_main_loop+0x54>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 8006338:	280a      	cmp	r0, #10
 800633a:	d01d      	beq.n	8006378 <protocol_main_loop+0x74>
 800633c:	280d      	cmp	r0, #13
 800633e:	d01b      	beq.n	8006378 <protocol_main_loop+0x74>
        if (line_flags) {
 8006340:	2c00      	cmp	r4, #0
 8006342:	d035      	beq.n	80063b0 <protocol_main_loop+0xac>
          if (c == ')') {
 8006344:	2829      	cmp	r0, #41	; 0x29
 8006346:	d1f3      	bne.n	8006330 <protocol_main_loop+0x2c>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8006348:	07a3      	lsls	r3, r4, #30
 800634a:	d5f1      	bpl.n	8006330 <protocol_main_loop+0x2c>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 800634c:	f001 f83c 	bl	80073c8 <serial_read>
 8006350:	28ff      	cmp	r0, #255	; 0xff
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8006352:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8006356:	d1ef      	bne.n	8006338 <protocol_main_loop+0x34>
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8006358:	f7fe f806 	bl	8004368 <plan_get_current_block>
 800635c:	b110      	cbz	r0, 8006364 <protocol_main_loop+0x60>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 800635e:	2002      	movs	r0, #2
 8006360:	f003 fac2 	bl	80098e8 <system_set_exec_state_flag>
  protocol_exec_rt_system();
 8006364:	f7fe febe 	bl	80050e4 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006368:	78b3      	ldrb	r3, [r6, #2]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d13a      	bne.n	80063e4 <protocol_main_loop+0xe0>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 800636e:	7873      	ldrb	r3, [r6, #1]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0dd      	beq.n	8006330 <protocol_main_loop+0x2c>
}
 8006374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  protocol_exec_rt_system();
 8006378:	f7fe feb4 	bl	80050e4 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800637c:	78b3      	ldrb	r3, [r6, #2]
 800637e:	bb1b      	cbnz	r3, 80063c8 <protocol_main_loop+0xc4>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 8006380:	7877      	ldrb	r7, [r6, #1]
 8006382:	2f00      	cmp	r7, #0
 8006384:	d1f6      	bne.n	8006374 <protocol_main_loop+0x70>
        line[char_counter] = 0; // Set string termination character.
 8006386:	f808 7005 	strb.w	r7, [r8, r5]
				LedBlink();
 800638a:	f7fd f9cd 	bl	8003728 <LedBlink>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 800638e:	f014 0401 	ands.w	r4, r4, #1
 8006392:	d11c      	bne.n	80063ce <protocol_main_loop+0xca>
        } else if (line[0] == 0) {
 8006394:	f898 0000 	ldrb.w	r0, [r8]
 8006398:	b1f8      	cbz	r0, 80063da <protocol_main_loop+0xd6>
        } else if (line[0] == '$') {
 800639a:	2824      	cmp	r0, #36	; 0x24
 800639c:	d02c      	beq.n	80063f8 <protocol_main_loop+0xf4>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 800639e:	7833      	ldrb	r3, [r6, #0]
 80063a0:	f013 0521 	ands.w	r5, r3, #33	; 0x21
 80063a4:	d021      	beq.n	80063ea <protocol_main_loop+0xe6>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 80063a6:	2009      	movs	r0, #9
        char_counter = 0;
 80063a8:	4625      	mov	r5, r4
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 80063aa:	f000 f867 	bl	800647c <report_status_message>
 80063ae:	e7bf      	b.n	8006330 <protocol_main_loop+0x2c>
          if (c <= ' ') {
 80063b0:	2820      	cmp	r0, #32
 80063b2:	d9bd      	bls.n	8006330 <protocol_main_loop+0x2c>
          } else if (c == '/') {
 80063b4:	282f      	cmp	r0, #47	; 0x2f
 80063b6:	d0bb      	beq.n	8006330 <protocol_main_loop+0x2c>
          } else if (c == '(') {
 80063b8:	2828      	cmp	r0, #40	; 0x28
 80063ba:	d024      	beq.n	8006406 <protocol_main_loop+0x102>
          } else if (c == ';') {
 80063bc:	283b      	cmp	r0, #59	; 0x3b
 80063be:	d039      	beq.n	8006434 <protocol_main_loop+0x130>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 80063c0:	2d4e      	cmp	r5, #78	; 0x4e
 80063c2:	d92a      	bls.n	800641a <protocol_main_loop+0x116>
            line_flags |= LINE_FLAG_OVERFLOW;
 80063c4:	2401      	movs	r4, #1
 80063c6:	e7b3      	b.n	8006330 <protocol_main_loop+0x2c>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80063c8:	f7ff f872 	bl	80054b0 <protocol_exec_rt_suspend>
 80063cc:	e7d8      	b.n	8006380 <protocol_main_loop+0x7c>
          report_status_message(STATUS_OVERFLOW);
 80063ce:	200b      	movs	r0, #11
        char_counter = 0;
 80063d0:	463d      	mov	r5, r7
        line_flags = 0;
 80063d2:	463c      	mov	r4, r7
          report_status_message(STATUS_OVERFLOW);
 80063d4:	f000 f852 	bl	800647c <report_status_message>
 80063d8:	e7aa      	b.n	8006330 <protocol_main_loop+0x2c>
        char_counter = 0;
 80063da:	4605      	mov	r5, r0
          report_status_message(STATUS_OK);
 80063dc:	f000 f84e 	bl	800647c <report_status_message>
        line_flags = 0;
 80063e0:	462c      	mov	r4, r5
 80063e2:	e7a5      	b.n	8006330 <protocol_main_loop+0x2c>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80063e4:	f7ff f864 	bl	80054b0 <protocol_exec_rt_suspend>
 80063e8:	e7c1      	b.n	800636e <protocol_main_loop+0x6a>
          report_status_message(gc_execute_line(line));
 80063ea:	4640      	mov	r0, r8
 80063ec:	f7fb fc18 	bl	8001c20 <gc_execute_line>
 80063f0:	f000 f844 	bl	800647c <report_status_message>
        line_flags = 0;
 80063f4:	462c      	mov	r4, r5
 80063f6:	e79b      	b.n	8006330 <protocol_main_loop+0x2c>
          report_status_message(system_execute_line(line));
 80063f8:	4640      	mov	r0, r8
        char_counter = 0;
 80063fa:	4625      	mov	r5, r4
          report_status_message(system_execute_line(line));
 80063fc:	f003 f866 	bl	80094cc <system_execute_line>
 8006400:	f000 f83c 	bl	800647c <report_status_message>
 8006404:	e794      	b.n	8006330 <protocol_main_loop+0x2c>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 8006406:	2402      	movs	r4, #2
 8006408:	e792      	b.n	8006330 <protocol_main_loop+0x2c>
    sys.state = STATE_IDLE;
 800640a:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 800640c:	f003 f83a 	bl	8009484 <system_check_safety_door_ajar>
 8006410:	b9f0      	cbnz	r0, 8006450 <protocol_main_loop+0x14c>
    system_execute_startup(line); // Execute startup script.
 8006412:	4818      	ldr	r0, [pc, #96]	; (8006474 <protocol_main_loop+0x170>)
 8006414:	f003 f838 	bl	8009488 <system_execute_startup>
 8006418:	e786      	b.n	8006328 <protocol_main_loop+0x24>
 800641a:	4629      	mov	r1, r5
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 800641c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b19      	cmp	r3, #25
 8006424:	f105 0201 	add.w	r2, r5, #1
            line[char_counter++] = c-'a'+'A';
 8006428:	bf98      	it	ls
 800642a:	3820      	subls	r0, #32
 800642c:	b2d5      	uxtb	r5, r2
            line[char_counter++] = c;
 800642e:	f808 0001 	strb.w	r0, [r8, r1]
 8006432:	e77d      	b.n	8006330 <protocol_main_loop+0x2c>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 8006434:	2404      	movs	r4, #4
 8006436:	e77b      	b.n	8006330 <protocol_main_loop+0x2c>
      if (limits_get_state()) {
 8006438:	f7fc fdee 	bl	8003018 <limits_get_state>
 800643c:	2800      	cmp	r0, #0
 800643e:	f43f af69 	beq.w	8006314 <protocol_main_loop+0x10>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8006442:	2301      	movs	r3, #1
 8006444:	4e0a      	ldr	r6, [pc, #40]	; (8006470 <protocol_main_loop+0x16c>)
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8006446:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8006448:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 800644a:	f000 f845 	bl	80064d8 <report_feedback_message>
 800644e:	e762      	b.n	8006316 <protocol_main_loop+0x12>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8006450:	4a09      	ldr	r2, [pc, #36]	; (8006478 <protocol_main_loop+0x174>)
 8006452:	7813      	ldrb	r3, [r2, #0]
 8006454:	f043 0320 	orr.w	r3, r3, #32
 8006458:	7013      	strb	r3, [r2, #0]
  protocol_exec_rt_system();
 800645a:	f7fe fe43 	bl	80050e4 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800645e:	78b3      	ldrb	r3, [r6, #2]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0d6      	beq.n	8006412 <protocol_main_loop+0x10e>
 8006464:	f7ff f824 	bl	80054b0 <protocol_exec_rt_suspend>
 8006468:	e7d3      	b.n	8006412 <protocol_main_loop+0x10e>
 800646a:	bf00      	nop
 800646c:	200015ac 	.word	0x200015ac
 8006470:	200013f0 	.word	0x200013f0
 8006474:	20000d48 	.word	0x20000d48
 8006478:	20001405 	.word	0x20001405

0800647c <report_status_message>:
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
  switch(status_code) {
 800647c:	b160      	cbz	r0, 8006498 <report_status_message+0x1c>
{
 800647e:	b510      	push	{r4, lr}
 8006480:	4604      	mov	r4, r0
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); break;
    default:
      printPgmString(PSTR("error:"));
 8006482:	4807      	ldr	r0, [pc, #28]	; (80064a0 <report_status_message+0x24>)
 8006484:	f7fe fae6 	bl	8004a54 <printString>
      print_uint8_base10(status_code);
 8006488:	4620      	mov	r0, r4
 800648a:	f7fe faef 	bl	8004a6c <print_uint8_base10>
      report_util_line_feed();
  }
}
 800648e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006492:	4804      	ldr	r0, [pc, #16]	; (80064a4 <report_status_message+0x28>)
 8006494:	f7fe bade 	b.w	8004a54 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 8006498:	4803      	ldr	r0, [pc, #12]	; (80064a8 <report_status_message+0x2c>)
 800649a:	f7fe badb 	b.w	8004a54 <printString>
 800649e:	bf00      	nop
 80064a0:	0800c304 	.word	0x0800c304
 80064a4:	0800c30c 	.word	0x0800c30c
 80064a8:	0800c2fc 	.word	0x0800c2fc

080064ac <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 80064ac:	b510      	push	{r4, lr}
 80064ae:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 80064b0:	4807      	ldr	r0, [pc, #28]	; (80064d0 <report_alarm_message+0x24>)
 80064b2:	f7fe facf 	bl	8004a54 <printString>
  print_uint8_base10(alarm_code);
 80064b6:	4620      	mov	r0, r4
 80064b8:	f7fe fad8 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80064bc:	4805      	ldr	r0, [pc, #20]	; (80064d4 <report_alarm_message+0x28>)
 80064be:	f7fe fac9 	bl	8004a54 <printString>
  report_util_line_feed();
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
}
 80064c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 80064c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064ca:	f7fd bd2f 	b.w	8003f2c <delay_ms>
 80064ce:	bf00      	nop
 80064d0:	0800c0f8 	.word	0x0800c0f8
 80064d4:	0800c30c 	.word	0x0800c30c

080064d8 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 80064d8:	b510      	push	{r4, lr}
 80064da:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 80064dc:	4820      	ldr	r0, [pc, #128]	; (8006560 <report_feedback_message+0x88>)
 80064de:	f7fe fab9 	bl	8004a54 <printString>
  switch(message_code) {
 80064e2:	1e60      	subs	r0, r4, #1
 80064e4:	280a      	cmp	r0, #10
 80064e6:	d80a      	bhi.n	80064fe <report_feedback_message+0x26>
 80064e8:	e8df f000 	tbb	[pc, r0]
 80064ec:	1d191511 	.word	0x1d191511
 80064f0:	2d292521 	.word	0x2d292521
 80064f4:	3531      	.short	0x3531
 80064f6:	06          	.byte	0x06
 80064f7:	00          	.byte	0x00
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 80064f8:	481a      	ldr	r0, [pc, #104]	; (8006564 <report_feedback_message+0x8c>)
 80064fa:	f7fe faab 	bl	8004a54 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80064fe:	205d      	movs	r0, #93	; 0x5d
 8006500:	f000 ff38 	bl	8007374 <serial_write>
  }
  report_util_feedback_line_feed();
}
 8006504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006508:	4817      	ldr	r0, [pc, #92]	; (8006568 <report_feedback_message+0x90>)
 800650a:	f7fe baa3 	b.w	8004a54 <printString>
      printPgmString(PSTR("Reset to continue")); break;
 800650e:	4817      	ldr	r0, [pc, #92]	; (800656c <report_feedback_message+0x94>)
 8006510:	f7fe faa0 	bl	8004a54 <printString>
 8006514:	e7f3      	b.n	80064fe <report_feedback_message+0x26>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 8006516:	4816      	ldr	r0, [pc, #88]	; (8006570 <report_feedback_message+0x98>)
 8006518:	f7fe fa9c 	bl	8004a54 <printString>
 800651c:	e7ef      	b.n	80064fe <report_feedback_message+0x26>
      printPgmString(PSTR("Caution: Unlocked")); break;
 800651e:	4815      	ldr	r0, [pc, #84]	; (8006574 <report_feedback_message+0x9c>)
 8006520:	f7fe fa98 	bl	8004a54 <printString>
 8006524:	e7eb      	b.n	80064fe <report_feedback_message+0x26>
      printPgmString(PSTR("Enabled")); break;
 8006526:	4814      	ldr	r0, [pc, #80]	; (8006578 <report_feedback_message+0xa0>)
 8006528:	f7fe fa94 	bl	8004a54 <printString>
 800652c:	e7e7      	b.n	80064fe <report_feedback_message+0x26>
      printPgmString(PSTR("Disabled")); break;
 800652e:	4813      	ldr	r0, [pc, #76]	; (800657c <report_feedback_message+0xa4>)
 8006530:	f7fe fa90 	bl	8004a54 <printString>
 8006534:	e7e3      	b.n	80064fe <report_feedback_message+0x26>
      printPgmString(PSTR("Check Door")); break;
 8006536:	4812      	ldr	r0, [pc, #72]	; (8006580 <report_feedback_message+0xa8>)
 8006538:	f7fe fa8c 	bl	8004a54 <printString>
 800653c:	e7df      	b.n	80064fe <report_feedback_message+0x26>
      printPgmString(PSTR("Check Limits")); break;
 800653e:	4811      	ldr	r0, [pc, #68]	; (8006584 <report_feedback_message+0xac>)
 8006540:	f7fe fa88 	bl	8004a54 <printString>
 8006544:	e7db      	b.n	80064fe <report_feedback_message+0x26>
      printPgmString(PSTR("Pgm End")); break;
 8006546:	4810      	ldr	r0, [pc, #64]	; (8006588 <report_feedback_message+0xb0>)
 8006548:	f7fe fa84 	bl	8004a54 <printString>
 800654c:	e7d7      	b.n	80064fe <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring defaults")); break;
 800654e:	480f      	ldr	r0, [pc, #60]	; (800658c <report_feedback_message+0xb4>)
 8006550:	f7fe fa80 	bl	8004a54 <printString>
 8006554:	e7d3      	b.n	80064fe <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring spindle")); break;
 8006556:	480e      	ldr	r0, [pc, #56]	; (8006590 <report_feedback_message+0xb8>)
 8006558:	f7fe fa7c 	bl	8004a54 <printString>
 800655c:	e7cf      	b.n	80064fe <report_feedback_message+0x26>
 800655e:	bf00      	nop
 8006560:	0800c11c 	.word	0x0800c11c
 8006564:	0800c1c0 	.word	0x0800c1c0
 8006568:	0800c30c 	.word	0x0800c30c
 800656c:	0800c124 	.word	0x0800c124
 8006570:	0800c138 	.word	0x0800c138
 8006574:	0800c14c 	.word	0x0800c14c
 8006578:	0800c160 	.word	0x0800c160
 800657c:	0800c168 	.word	0x0800c168
 8006580:	0800c174 	.word	0x0800c174
 8006584:	0800c180 	.word	0x0800c180
 8006588:	0800c190 	.word	0x0800c190
 800658c:	0800c198 	.word	0x0800c198
 8006590:	0800c1ac 	.word	0x0800c1ac

08006594 <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <report_init_message+0x8>)
 8006596:	f7fe ba5d 	b.w	8004a54 <printString>
 800659a:	bf00      	nop
 800659c:	0800c238 	.word	0x0800c238

080065a0 <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 80065a0:	4801      	ldr	r0, [pc, #4]	; (80065a8 <report_grbl_help+0x8>)
 80065a2:	f7fe ba57 	b.w	8004a54 <printString>
 80065a6:	bf00      	nop
 80065a8:	0800c1ec 	.word	0x0800c1ec

080065ac <report_grbl_settings>:
}


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 80065ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 80065b0:	4cc5      	ldr	r4, [pc, #788]	; (80068c8 <report_grbl_settings+0x31c>)
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065b2:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(0,settings.pulse_microseconds);
 80065b4:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065b8:	f000 fedc 	bl	8007374 <serial_write>
 80065bc:	2000      	movs	r0, #0
 80065be:	f7fe fa55 	bl	8004a6c <print_uint8_base10>
 80065c2:	203d      	movs	r0, #61	; 0x3d
 80065c4:	f000 fed6 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 80065c8:	4628      	mov	r0, r5
 80065ca:	f7fe fa4f 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80065ce:	48bf      	ldr	r0, [pc, #764]	; (80068cc <report_grbl_settings+0x320>)
 80065d0:	f7fe fa40 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065d4:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 80065d6:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065da:	f000 fecb 	bl	8007374 <serial_write>
 80065de:	2001      	movs	r0, #1
 80065e0:	f7fe fa44 	bl	8004a6c <print_uint8_base10>
 80065e4:	203d      	movs	r0, #61	; 0x3d
 80065e6:	f000 fec5 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 80065ea:	4628      	mov	r0, r5
 80065ec:	f7fe fa3e 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80065f0:	48b6      	ldr	r0, [pc, #728]	; (80068cc <report_grbl_settings+0x320>)
 80065f2:	f7fe fa2f 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065f6:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(2,settings.step_invert_mask);
 80065f8:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065fc:	f000 feba 	bl	8007374 <serial_write>
 8006600:	2002      	movs	r0, #2
 8006602:	f7fe fa33 	bl	8004a6c <print_uint8_base10>
 8006606:	203d      	movs	r0, #61	; 0x3d
 8006608:	f000 feb4 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 800660c:	b2e8      	uxtb	r0, r5
 800660e:	f7fe fa2d 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006612:	48ae      	ldr	r0, [pc, #696]	; (80068cc <report_grbl_settings+0x320>)
 8006614:	f7fe fa1e 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006618:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(3,settings.dir_invert_mask);
 800661a:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800661e:	f000 fea9 	bl	8007374 <serial_write>
 8006622:	2003      	movs	r0, #3
 8006624:	f7fe fa22 	bl	8004a6c <print_uint8_base10>
 8006628:	203d      	movs	r0, #61	; 0x3d
 800662a:	f000 fea3 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 800662e:	b2e8      	uxtb	r0, r5
 8006630:	f7fe fa1c 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006634:	48a5      	ldr	r0, [pc, #660]	; (80068cc <report_grbl_settings+0x320>)
 8006636:	f7fe fa0d 	bl	8004a54 <printString>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 800663a:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800663e:	2024      	movs	r0, #36	; 0x24
 8006640:	f000 fe98 	bl	8007374 <serial_write>
 8006644:	2004      	movs	r0, #4
 8006646:	f7fe fa11 	bl	8004a6c <print_uint8_base10>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 800664a:	f3c5 0580 	ubfx	r5, r5, #2, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800664e:	203d      	movs	r0, #61	; 0x3d
 8006650:	f000 fe90 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 8006654:	4628      	mov	r0, r5
 8006656:	f7fe fa09 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800665a:	489c      	ldr	r0, [pc, #624]	; (80068cc <report_grbl_settings+0x320>)
 800665c:	f7fe f9fa 	bl	8004a54 <printString>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8006660:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006664:	2024      	movs	r0, #36	; 0x24
 8006666:	f000 fe85 	bl	8007374 <serial_write>
 800666a:	2005      	movs	r0, #5
 800666c:	f7fe f9fe 	bl	8004a6c <print_uint8_base10>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8006670:	f3c5 1580 	ubfx	r5, r5, #6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006674:	203d      	movs	r0, #61	; 0x3d
 8006676:	f000 fe7d 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 800667a:	4628      	mov	r0, r5
 800667c:	f7fe f9f6 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006680:	4892      	ldr	r0, [pc, #584]	; (80068cc <report_grbl_settings+0x320>)
 8006682:	f7fe f9e7 	bl	8004a54 <printString>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8006686:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800668a:	2024      	movs	r0, #36	; 0x24
 800668c:	f000 fe72 	bl	8007374 <serial_write>
 8006690:	2006      	movs	r0, #6
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8006692:	09ed      	lsrs	r5, r5, #7
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006694:	f7fe f9ea 	bl	8004a6c <print_uint8_base10>
 8006698:	203d      	movs	r0, #61	; 0x3d
 800669a:	f000 fe6b 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 800669e:	4628      	mov	r0, r5
 80066a0:	f7fe f9e4 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80066a4:	4889      	ldr	r0, [pc, #548]	; (80068cc <report_grbl_settings+0x320>)
 80066a6:	f7fe f9d5 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066aa:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(10,settings.status_report_mask);
 80066ac:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066b0:	f000 fe60 	bl	8007374 <serial_write>
 80066b4:	200a      	movs	r0, #10
 80066b6:	f7fe f9d9 	bl	8004a6c <print_uint8_base10>
 80066ba:	203d      	movs	r0, #61	; 0x3d
 80066bc:	f000 fe5a 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 80066c0:	4628      	mov	r0, r5
 80066c2:	f7fe f9d3 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80066c6:	4881      	ldr	r0, [pc, #516]	; (80068cc <report_grbl_settings+0x320>)
 80066c8:	f7fe f9c4 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066cc:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 80066ce:	6ca5      	ldr	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066d0:	f000 fe50 	bl	8007374 <serial_write>
 80066d4:	200b      	movs	r0, #11
 80066d6:	f7fe f9c9 	bl	8004a6c <print_uint8_base10>
 80066da:	203d      	movs	r0, #61	; 0x3d
 80066dc:	f000 fe4a 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 80066e0:	2103      	movs	r1, #3
 80066e2:	4628      	mov	r0, r5
 80066e4:	f7fe fa04 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80066e8:	4878      	ldr	r0, [pc, #480]	; (80068cc <report_grbl_settings+0x320>)
 80066ea:	f7fe f9b3 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066ee:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 80066f0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066f2:	f000 fe3f 	bl	8007374 <serial_write>
 80066f6:	200c      	movs	r0, #12
 80066f8:	f7fe f9b8 	bl	8004a6c <print_uint8_base10>
 80066fc:	203d      	movs	r0, #61	; 0x3d
 80066fe:	f000 fe39 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006702:	2103      	movs	r1, #3
 8006704:	4628      	mov	r0, r5
 8006706:	f7fe f9f3 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800670a:	4870      	ldr	r0, [pc, #448]	; (80068cc <report_grbl_settings+0x320>)
 800670c:	f7fe f9a2 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006710:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 8006712:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006716:	f000 fe2d 	bl	8007374 <serial_write>
 800671a:	200d      	movs	r0, #13
 800671c:	f7fe f9a6 	bl	8004a6c <print_uint8_base10>
 8006720:	203d      	movs	r0, #61	; 0x3d
 8006722:	f000 fe27 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 8006726:	f005 0001 	and.w	r0, r5, #1
 800672a:	f7fe f99f 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800672e:	4867      	ldr	r0, [pc, #412]	; (80068cc <report_grbl_settings+0x320>)
 8006730:	f7fe f990 	bl	8004a54 <printString>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8006734:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006738:	2024      	movs	r0, #36	; 0x24
 800673a:	f000 fe1b 	bl	8007374 <serial_write>
 800673e:	2014      	movs	r0, #20
 8006740:	f7fe f994 	bl	8004a6c <print_uint8_base10>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8006744:	f3c5 1540 	ubfx	r5, r5, #5, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006748:	203d      	movs	r0, #61	; 0x3d
 800674a:	f000 fe13 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 800674e:	4628      	mov	r0, r5
 8006750:	f7fe f98c 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006754:	485d      	ldr	r0, [pc, #372]	; (80068cc <report_grbl_settings+0x320>)
 8006756:	f7fe f97d 	bl	8004a54 <printString>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 800675a:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800675e:	2024      	movs	r0, #36	; 0x24
 8006760:	f000 fe08 	bl	8007374 <serial_write>
 8006764:	2015      	movs	r0, #21
 8006766:	f7fe f981 	bl	8004a6c <print_uint8_base10>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 800676a:	f3c5 05c0 	ubfx	r5, r5, #3, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800676e:	203d      	movs	r0, #61	; 0x3d
 8006770:	f000 fe00 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 8006774:	4628      	mov	r0, r5
 8006776:	f7fe f979 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800677a:	4854      	ldr	r0, [pc, #336]	; (80068cc <report_grbl_settings+0x320>)
 800677c:	f7fe f96a 	bl	8004a54 <printString>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006780:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006784:	2024      	movs	r0, #36	; 0x24
 8006786:	f000 fdf5 	bl	8007374 <serial_write>
 800678a:	2016      	movs	r0, #22
 800678c:	f7fe f96e 	bl	8004a6c <print_uint8_base10>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006790:	f3c5 1500 	ubfx	r5, r5, #4, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006794:	203d      	movs	r0, #61	; 0x3d
 8006796:	f000 fded 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 800679a:	4628      	mov	r0, r5
 800679c:	f7fe f966 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067a0:	484a      	ldr	r0, [pc, #296]	; (80068cc <report_grbl_settings+0x320>)
 80067a2:	f7fe f957 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067a6:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(23,settings.homing_dir_mask);
 80067a8:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067ac:	f000 fde2 	bl	8007374 <serial_write>
 80067b0:	2017      	movs	r0, #23
 80067b2:	f7fe f95b 	bl	8004a6c <print_uint8_base10>
 80067b6:	203d      	movs	r0, #61	; 0x3d
 80067b8:	f000 fddc 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 80067bc:	b2e8      	uxtb	r0, r5
 80067be:	f7fe f955 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067c2:	4842      	ldr	r0, [pc, #264]	; (80068cc <report_grbl_settings+0x320>)
 80067c4:	f7fe f946 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067c8:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 80067ca:	6de5      	ldr	r5, [r4, #92]	; 0x5c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067cc:	f000 fdd2 	bl	8007374 <serial_write>
 80067d0:	2018      	movs	r0, #24
 80067d2:	f7fe f94b 	bl	8004a6c <print_uint8_base10>
 80067d6:	203d      	movs	r0, #61	; 0x3d
 80067d8:	f000 fdcc 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 80067dc:	2103      	movs	r1, #3
 80067de:	4628      	mov	r0, r5
 80067e0:	f7fe f986 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067e4:	4839      	ldr	r0, [pc, #228]	; (80068cc <report_grbl_settings+0x320>)
 80067e6:	f7fe f935 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067ea:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 80067ec:	6e25      	ldr	r5, [r4, #96]	; 0x60
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067ee:	f000 fdc1 	bl	8007374 <serial_write>
 80067f2:	2019      	movs	r0, #25
 80067f4:	f7fe f93a 	bl	8004a6c <print_uint8_base10>
 80067f8:	203d      	movs	r0, #61	; 0x3d
 80067fa:	f000 fdbb 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 80067fe:	2103      	movs	r1, #3
 8006800:	4628      	mov	r0, r5
 8006802:	f7fe f975 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006806:	4831      	ldr	r0, [pc, #196]	; (80068cc <report_grbl_settings+0x320>)
 8006808:	f7fe f924 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800680c:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 800680e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006812:	f000 fdaf 	bl	8007374 <serial_write>
 8006816:	201a      	movs	r0, #26
 8006818:	f7fe f928 	bl	8004a6c <print_uint8_base10>
 800681c:	203d      	movs	r0, #61	; 0x3d
 800681e:	f000 fda9 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 8006822:	b2e8      	uxtb	r0, r5
 8006824:	f7fe f922 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006828:	4828      	ldr	r0, [pc, #160]	; (80068cc <report_grbl_settings+0x320>)
 800682a:	f7fe f913 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800682e:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 8006830:	6ea5      	ldr	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006832:	f000 fd9f 	bl	8007374 <serial_write>
 8006836:	201b      	movs	r0, #27
 8006838:	f7fe f918 	bl	8004a6c <print_uint8_base10>
 800683c:	203d      	movs	r0, #61	; 0x3d
 800683e:	f000 fd99 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006842:	2103      	movs	r1, #3
 8006844:	4628      	mov	r0, r5
 8006846:	f7fe f953 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800684a:	4820      	ldr	r0, [pc, #128]	; (80068cc <report_grbl_settings+0x320>)
 800684c:	f7fe f902 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006850:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 8006852:	6d25      	ldr	r5, [r4, #80]	; 0x50
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006854:	f000 fd8e 	bl	8007374 <serial_write>
 8006858:	201e      	movs	r0, #30
 800685a:	f7fe f907 	bl	8004a6c <print_uint8_base10>
 800685e:	203d      	movs	r0, #61	; 0x3d
 8006860:	f000 fd88 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006864:	2100      	movs	r1, #0
 8006866:	4628      	mov	r0, r5
 8006868:	f7fe f942 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800686c:	4817      	ldr	r0, [pc, #92]	; (80068cc <report_grbl_settings+0x320>)
 800686e:	f7fe f8f1 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006872:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 8006874:	6d65      	ldr	r5, [r4, #84]	; 0x54
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006876:	f000 fd7d 	bl	8007374 <serial_write>
 800687a:	201f      	movs	r0, #31
 800687c:	f7fe f8f6 	bl	8004a6c <print_uint8_base10>
 8006880:	203d      	movs	r0, #61	; 0x3d
 8006882:	f000 fd77 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006886:	2100      	movs	r1, #0
 8006888:	4628      	mov	r0, r5
 800688a:	f7fe f931 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800688e:	480f      	ldr	r0, [pc, #60]	; (80068cc <report_grbl_settings+0x320>)
 8006890:	f7fe f8e0 	bl	8004a54 <printString>
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8006894:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006898:	2024      	movs	r0, #36	; 0x24
 800689a:	f000 fd6b 	bl	8007374 <serial_write>
 800689e:	2020      	movs	r0, #32
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 80068a0:	f3c5 0540 	ubfx	r5, r5, #1, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068a4:	f7fe f8e2 	bl	8004a6c <print_uint8_base10>
 80068a8:	203d      	movs	r0, #61	; 0x3d
 80068aa:	f000 fd63 	bl	8007374 <serial_write>
  print_uint8_base10(val);
 80068ae:	4628      	mov	r0, r5
 80068b0:	f7fe f8dc 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80068b4:	4805      	ldr	r0, [pc, #20]	; (80068cc <report_grbl_settings+0x320>)
 80068b6:	f7fe f8cd 	bl	8004a54 <printString>
 80068ba:	f04f 0a00 	mov.w	sl, #0
  #else
    report_util_uint8_setting(32,0);
  #endif
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
 80068be:	2564      	movs	r5, #100	; 0x64
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80068c0:	f8df 9008 	ldr.w	r9, [pc, #8]	; 80068cc <report_grbl_settings+0x320>
 80068c4:	e004      	b.n	80068d0 <report_grbl_settings+0x324>
 80068c6:	bf00      	nop
 80068c8:	200015ac 	.word	0x200015ac
 80068cc:	0800c30c 	.word	0x0800c30c
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
 80068d0:	fa5f fb8a 	uxtb.w	fp, sl
 80068d4:	f105 0801 	add.w	r8, r5, #1
 80068d8:	1caf      	adds	r7, r5, #2
 80068da:	1cee      	adds	r6, r5, #3
 80068dc:	f1bb 0f02 	cmp.w	fp, #2
 80068e0:	fa5f f888 	uxtb.w	r8, r8
 80068e4:	b2ff      	uxtb	r7, r7
 80068e6:	b2f6      	uxtb	r6, r6
 80068e8:	f000 80a5 	beq.w	8006a36 <report_grbl_settings+0x48a>
 80068ec:	f1bb 0f03 	cmp.w	fp, #3
 80068f0:	d053      	beq.n	800699a <report_grbl_settings+0x3ee>
 80068f2:	f1bb 0f01 	cmp.w	fp, #1
 80068f6:	f000 80e4 	beq.w	8006ac2 <report_grbl_settings+0x516>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068fa:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 80068fc:	f8d4 b000 	ldr.w	fp, [r4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006900:	f000 fd38 	bl	8007374 <serial_write>
 8006904:	4628      	mov	r0, r5
 8006906:	f7fe f8b1 	bl	8004a6c <print_uint8_base10>
 800690a:	203d      	movs	r0, #61	; 0x3d
 800690c:	f000 fd32 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006910:	2103      	movs	r1, #3
 8006912:	4658      	mov	r0, fp
 8006914:	f7fe f8ec 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006918:	4648      	mov	r0, r9
 800691a:	f7fe f89b 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800691e:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006920:	f8d4 b004 	ldr.w	fp, [r4, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006924:	f000 fd26 	bl	8007374 <serial_write>
 8006928:	4640      	mov	r0, r8
 800692a:	f7fe f89f 	bl	8004a6c <print_uint8_base10>
 800692e:	203d      	movs	r0, #61	; 0x3d
 8006930:	f000 fd20 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006934:	2103      	movs	r1, #3
 8006936:	4658      	mov	r0, fp
 8006938:	f7fe f8da 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800693c:	4648      	mov	r0, r9
 800693e:	f7fe f889 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006942:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006944:	f8d4 8008 	ldr.w	r8, [r4, #8]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006948:	f000 fd14 	bl	8007374 <serial_write>
 800694c:	4638      	mov	r0, r7
 800694e:	f7fe f88d 	bl	8004a6c <print_uint8_base10>
 8006952:	203d      	movs	r0, #61	; 0x3d
 8006954:	f000 fd0e 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006958:	4640      	mov	r0, r8
 800695a:	2103      	movs	r1, #3
 800695c:	f7fe f8c8 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006960:	4648      	mov	r0, r9
 8006962:	f7fe f877 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006966:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006968:	68e7      	ldr	r7, [r4, #12]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800696a:	f000 fd03 	bl	8007374 <serial_write>
 800696e:	4630      	mov	r0, r6
 8006970:	f7fe f87c 	bl	8004a6c <print_uint8_base10>
 8006974:	203d      	movs	r0, #61	; 0x3d
 8006976:	f000 fcfd 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 800697a:	4638      	mov	r0, r7
 800697c:	2103      	movs	r1, #3
 800697e:	f7fe f8b7 	bl	8004af0 <printFloat>
 8006982:	f10a 0a01 	add.w	sl, sl, #1
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006986:	4648      	mov	r0, r9
 8006988:	f7fe f864 	bl	8004a54 <printString>
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
 800698c:	350a      	adds	r5, #10
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 800698e:	f1ba 0f04 	cmp.w	sl, #4
    val += AXIS_SETTINGS_INCREMENT;
 8006992:	b2ed      	uxtb	r5, r5
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8006994:	d19c      	bne.n	80068d0 <report_grbl_settings+0x324>
  }
}
 8006996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 800699a:	6b23      	ldr	r3, [r4, #48]	; 0x30
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800699c:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 800699e:	f103 4900 	add.w	r9, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069a2:	f000 fce7 	bl	8007374 <serial_write>
 80069a6:	4628      	mov	r0, r5
 80069a8:	f7fe f860 	bl	8004a6c <print_uint8_base10>
 80069ac:	203d      	movs	r0, #61	; 0x3d
 80069ae:	f000 fce1 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 80069b2:	4659      	mov	r1, fp
 80069b4:	4648      	mov	r0, r9
 80069b6:	f7fe f89b 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069ba:	485e      	ldr	r0, [pc, #376]	; (8006b34 <report_grbl_settings+0x588>)
 80069bc:	f7fe f84a 	bl	8004a54 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 80069c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069c2:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 80069c4:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069c8:	f000 fcd4 	bl	8007374 <serial_write>
 80069cc:	4640      	mov	r0, r8
 80069ce:	f7fe f84d 	bl	8004a6c <print_uint8_base10>
 80069d2:	203d      	movs	r0, #61	; 0x3d
 80069d4:	f000 fcce 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 80069d8:	4659      	mov	r1, fp
 80069da:	4628      	mov	r0, r5
 80069dc:	f7fe f888 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069e0:	4854      	ldr	r0, [pc, #336]	; (8006b34 <report_grbl_settings+0x588>)
 80069e2:	f7fe f837 	bl	8004a54 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 80069e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069e8:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 80069ea:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069ee:	f000 fcc1 	bl	8007374 <serial_write>
 80069f2:	4638      	mov	r0, r7
 80069f4:	f7fe f83a 	bl	8004a6c <print_uint8_base10>
 80069f8:	203d      	movs	r0, #61	; 0x3d
 80069fa:	f000 fcbb 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 80069fe:	4659      	mov	r1, fp
 8006a00:	4628      	mov	r0, r5
 8006a02:	f7fe f875 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a06:	484b      	ldr	r0, [pc, #300]	; (8006b34 <report_grbl_settings+0x588>)
 8006a08:	f7fe f824 	bl	8004a54 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a0c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a0e:	2024      	movs	r0, #36	; 0x24
 8006a10:	f000 fcb0 	bl	8007374 <serial_write>
 8006a14:	4630      	mov	r0, r6
 8006a16:	f7fe f829 	bl	8004a6c <print_uint8_base10>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a1a:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a1e:	203d      	movs	r0, #61	; 0x3d
 8006a20:	f000 fca8 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006a24:	4620      	mov	r0, r4
 8006a26:	4659      	mov	r1, fp
 8006a28:	f7fe f862 	bl	8004af0 <printFloat>
}
 8006a2c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a30:	4840      	ldr	r0, [pc, #256]	; (8006b34 <report_grbl_settings+0x588>)
 8006a32:	f7fe b80f 	b.w	8004a54 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006a36:	4940      	ldr	r1, [pc, #256]	; (8006b38 <report_grbl_settings+0x58c>)
 8006a38:	6a20      	ldr	r0, [r4, #32]
 8006a3a:	f7fa f93d 	bl	8000cb8 <__aeabi_fmul>
 8006a3e:	4683      	mov	fp, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a40:	2024      	movs	r0, #36	; 0x24
 8006a42:	f000 fc97 	bl	8007374 <serial_write>
 8006a46:	4628      	mov	r0, r5
 8006a48:	f7fe f810 	bl	8004a6c <print_uint8_base10>
 8006a4c:	203d      	movs	r0, #61	; 0x3d
 8006a4e:	f000 fc91 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006a52:	4658      	mov	r0, fp
 8006a54:	2103      	movs	r1, #3
 8006a56:	f7fe f84b 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a5a:	4648      	mov	r0, r9
 8006a5c:	f7fd fffa 	bl	8004a54 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006a60:	4935      	ldr	r1, [pc, #212]	; (8006b38 <report_grbl_settings+0x58c>)
 8006a62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a64:	f7fa f928 	bl	8000cb8 <__aeabi_fmul>
 8006a68:	4683      	mov	fp, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a6a:	2024      	movs	r0, #36	; 0x24
 8006a6c:	f000 fc82 	bl	8007374 <serial_write>
 8006a70:	4640      	mov	r0, r8
 8006a72:	f7fd fffb 	bl	8004a6c <print_uint8_base10>
 8006a76:	203d      	movs	r0, #61	; 0x3d
 8006a78:	f000 fc7c 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006a7c:	2103      	movs	r1, #3
 8006a7e:	4658      	mov	r0, fp
 8006a80:	f7fe f836 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a84:	4648      	mov	r0, r9
 8006a86:	f7fd ffe5 	bl	8004a54 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006a8a:	492b      	ldr	r1, [pc, #172]	; (8006b38 <report_grbl_settings+0x58c>)
 8006a8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006a8e:	f7fa f913 	bl	8000cb8 <__aeabi_fmul>
 8006a92:	4680      	mov	r8, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a94:	2024      	movs	r0, #36	; 0x24
 8006a96:	f000 fc6d 	bl	8007374 <serial_write>
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	f7fd ffe6 	bl	8004a6c <print_uint8_base10>
 8006aa0:	203d      	movs	r0, #61	; 0x3d
 8006aa2:	f000 fc67 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006aa6:	2103      	movs	r1, #3
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	f7fe f821 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006aae:	4648      	mov	r0, r9
 8006ab0:	f7fd ffd0 	bl	8004a54 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006ab4:	4920      	ldr	r1, [pc, #128]	; (8006b38 <report_grbl_settings+0x58c>)
 8006ab6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006ab8:	f7fa f8fe 	bl	8000cb8 <__aeabi_fmul>
 8006abc:	4607      	mov	r7, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006abe:	2024      	movs	r0, #36	; 0x24
 8006ac0:	e753      	b.n	800696a <report_grbl_settings+0x3be>
 8006ac2:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006ac4:	f8d4 b010 	ldr.w	fp, [r4, #16]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ac8:	f000 fc54 	bl	8007374 <serial_write>
 8006acc:	4628      	mov	r0, r5
 8006ace:	f7fd ffcd 	bl	8004a6c <print_uint8_base10>
 8006ad2:	203d      	movs	r0, #61	; 0x3d
 8006ad4:	f000 fc4e 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006ad8:	2103      	movs	r1, #3
 8006ada:	4658      	mov	r0, fp
 8006adc:	f7fe f808 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ae0:	4648      	mov	r0, r9
 8006ae2:	f7fd ffb7 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ae6:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006ae8:	f8d4 b014 	ldr.w	fp, [r4, #20]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006aec:	f000 fc42 	bl	8007374 <serial_write>
 8006af0:	4640      	mov	r0, r8
 8006af2:	f7fd ffbb 	bl	8004a6c <print_uint8_base10>
 8006af6:	203d      	movs	r0, #61	; 0x3d
 8006af8:	f000 fc3c 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006afc:	2103      	movs	r1, #3
 8006afe:	4658      	mov	r0, fp
 8006b00:	f7fd fff6 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b04:	4648      	mov	r0, r9
 8006b06:	f7fd ffa5 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b0a:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006b0c:	f8d4 8018 	ldr.w	r8, [r4, #24]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b10:	f000 fc30 	bl	8007374 <serial_write>
 8006b14:	4638      	mov	r0, r7
 8006b16:	f7fd ffa9 	bl	8004a6c <print_uint8_base10>
 8006b1a:	203d      	movs	r0, #61	; 0x3d
 8006b1c:	f000 fc2a 	bl	8007374 <serial_write>
  printFloat(val, n_decimal);
 8006b20:	4640      	mov	r0, r8
 8006b22:	2103      	movs	r1, #3
 8006b24:	f7fd ffe4 	bl	8004af0 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b28:	4648      	mov	r0, r9
 8006b2a:	f7fd ff93 	bl	8004a54 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b2e:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006b30:	69e7      	ldr	r7, [r4, #28]
 8006b32:	e71a      	b.n	800696a <report_grbl_settings+0x3be>
 8006b34:	0800c30c 	.word	0x0800c30c
 8006b38:	3991a2b4 	.word	0x3991a2b4

08006b3c <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 8006b3c:	b500      	push	{lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 8006b3e:	4816      	ldr	r0, [pc, #88]	; (8006b98 <report_probe_parameters+0x5c>)
{
 8006b40:	b085      	sub	sp, #20
  printPgmString(PSTR("[PRB:"));
 8006b42:	f7fd ff87 	bl	8004a54 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006b46:	4915      	ldr	r1, [pc, #84]	; (8006b9c <report_probe_parameters+0x60>)
 8006b48:	4668      	mov	r0, sp
 8006b4a:	f002 fe6f 	bl	800982c <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006b4e:	9800      	ldr	r0, [sp, #0]
 8006b50:	f7fe f8be 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b54:	202c      	movs	r0, #44	; 0x2c
 8006b56:	f000 fc0d 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006b5a:	9801      	ldr	r0, [sp, #4]
 8006b5c:	f7fe f8b8 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b60:	202c      	movs	r0, #44	; 0x2c
 8006b62:	f000 fc07 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006b66:	9802      	ldr	r0, [sp, #8]
 8006b68:	f7fe f8b2 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b6c:	202c      	movs	r0, #44	; 0x2c
 8006b6e:	f000 fc01 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006b72:	9803      	ldr	r0, [sp, #12]
 8006b74:	f7fe f8ac 	bl	8004cd0 <printFloat_CoordValue>
  report_util_axis_values(print_position);
  serial_write(':');
 8006b78:	203a      	movs	r0, #58	; 0x3a
 8006b7a:	f000 fbfb 	bl	8007374 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <report_probe_parameters+0x64>)
 8006b80:	7958      	ldrb	r0, [r3, #5]
 8006b82:	f7fd ff73 	bl	8004a6c <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006b86:	205d      	movs	r0, #93	; 0x5d
 8006b88:	f000 fbf4 	bl	8007374 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b8c:	4805      	ldr	r0, [pc, #20]	; (8006ba4 <report_probe_parameters+0x68>)
 8006b8e:	f7fd ff61 	bl	8004a54 <printString>
  report_util_feedback_line_feed();
}
 8006b92:	b005      	add	sp, #20
 8006b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b98:	0800c274 	.word	0x0800c274
 8006b9c:	20001408 	.word	0x20001408
 8006ba0:	200013f0 	.word	0x200013f0
 8006ba4:	0800c30c 	.word	0x0800c30c

08006ba8 <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 8006ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bac:	2500      	movs	r5, #0
 8006bae:	b088      	sub	sp, #32
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 8006bb0:	4e51      	ldr	r6, [pc, #324]	; (8006cf8 <report_ngc_parameters+0x150>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 8006bb2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8006d20 <report_ngc_parameters+0x178>
      case 7: printPgmString(PSTR("30")); break;
 8006bb6:	4f51      	ldr	r7, [pc, #324]	; (8006cfc <report_ngc_parameters+0x154>)
 8006bb8:	e025      	b.n	8006c06 <report_ngc_parameters+0x5e>
    switch (coord_select) {
 8006bba:	2c07      	cmp	r4, #7
 8006bbc:	d133      	bne.n	8006c26 <report_ngc_parameters+0x7e>
      case 7: printPgmString(PSTR("30")); break;
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	f7fd ff48 	bl	8004a54 <printString>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
    }
    serial_write(':');
 8006bc4:	203a      	movs	r0, #58	; 0x3a
 8006bc6:	f000 fbd5 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006bca:	9800      	ldr	r0, [sp, #0]
 8006bcc:	f7fe f880 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006bd0:	202c      	movs	r0, #44	; 0x2c
 8006bd2:	f000 fbcf 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006bd6:	9801      	ldr	r0, [sp, #4]
 8006bd8:	f7fe f87a 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006bdc:	202c      	movs	r0, #44	; 0x2c
 8006bde:	f000 fbc9 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006be2:	9802      	ldr	r0, [sp, #8]
 8006be4:	f7fe f874 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006be8:	202c      	movs	r0, #44	; 0x2c
 8006bea:	f000 fbc3 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006bee:	9803      	ldr	r0, [sp, #12]
 8006bf0:	f7fe f86e 	bl	8004cd0 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006bf4:	205d      	movs	r0, #93	; 0x5d
 8006bf6:	f000 fbbd 	bl	8007374 <serial_write>
 8006bfa:	3501      	adds	r5, #1
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006bfc:	4840      	ldr	r0, [pc, #256]	; (8006d00 <report_ngc_parameters+0x158>)
 8006bfe:	f7fd ff29 	bl	8004a54 <printString>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8006c02:	2d08      	cmp	r5, #8
 8006c04:	d015      	beq.n	8006c32 <report_ngc_parameters+0x8a>
 8006c06:	b2ec      	uxtb	r4, r5
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8006c08:	4620      	mov	r0, r4
 8006c0a:	4669      	mov	r1, sp
 8006c0c:	f000 fdd2 	bl	80077b4 <settings_read_coord_data>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d065      	beq.n	8006ce0 <report_ngc_parameters+0x138>
    printPgmString(PSTR("[G"));
 8006c14:	4630      	mov	r0, r6
 8006c16:	f7fd ff1d 	bl	8004a54 <printString>
    switch (coord_select) {
 8006c1a:	2c06      	cmp	r4, #6
 8006c1c:	d1cd      	bne.n	8006bba <report_ngc_parameters+0x12>
      case 6: printPgmString(PSTR("28")); break;
 8006c1e:	4640      	mov	r0, r8
 8006c20:	f7fd ff18 	bl	8004a54 <printString>
 8006c24:	e7ce      	b.n	8006bc4 <report_ngc_parameters+0x1c>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8006c26:	f104 0036 	add.w	r0, r4, #54	; 0x36
 8006c2a:	b2c0      	uxtb	r0, r0
 8006c2c:	f7fd ff1e 	bl	8004a6c <print_uint8_base10>
 8006c30:	e7c8      	b.n	8006bc4 <report_ngc_parameters+0x1c>
    printFloat_CoordValue(axis_value[idx]);
 8006c32:	4c34      	ldr	r4, [pc, #208]	; (8006d04 <report_ngc_parameters+0x15c>)
    report_util_axis_values(coord_data);
    report_util_feedback_line_feed();
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8006c34:	4834      	ldr	r0, [pc, #208]	; (8006d08 <report_ngc_parameters+0x160>)
 8006c36:	f7fd ff0d 	bl	8004a54 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8006c3a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006c3c:	f7fe f848 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c40:	202c      	movs	r0, #44	; 0x2c
 8006c42:	f000 fb97 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006c46:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006c48:	f7fe f842 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c4c:	202c      	movs	r0, #44	; 0x2c
 8006c4e:	f000 fb91 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006c52:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006c54:	f7fe f83c 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c58:	202c      	movs	r0, #44	; 0x2c
 8006c5a:	f000 fb8b 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006c5e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006c60:	f7fe f836 	bl	8004cd0 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006c64:	205d      	movs	r0, #93	; 0x5d
 8006c66:	f000 fb85 	bl	8007374 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c6a:	4825      	ldr	r0, [pc, #148]	; (8006d00 <report_ngc_parameters+0x158>)
 8006c6c:	f7fd fef2 	bl	8004a54 <printString>
  report_util_axis_values(gc_state.coord_offset);
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8006c70:	4826      	ldr	r0, [pc, #152]	; (8006d0c <report_ngc_parameters+0x164>)
 8006c72:	f7fd feef 	bl	8004a54 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8006c76:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006c78:	f7fe f82a 	bl	8004cd0 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006c7c:	205d      	movs	r0, #93	; 0x5d
 8006c7e:	f000 fb79 	bl	8007374 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c82:	481f      	ldr	r0, [pc, #124]	; (8006d00 <report_ngc_parameters+0x158>)
 8006c84:	f7fd fee6 	bl	8004a54 <printString>
  printPgmString(PSTR("[PRB:"));
 8006c88:	4821      	ldr	r0, [pc, #132]	; (8006d10 <report_ngc_parameters+0x168>)
 8006c8a:	f7fd fee3 	bl	8004a54 <printString>
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006c8e:	4921      	ldr	r1, [pc, #132]	; (8006d14 <report_ngc_parameters+0x16c>)
 8006c90:	a804      	add	r0, sp, #16
 8006c92:	f002 fdcb 	bl	800982c <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006c96:	9804      	ldr	r0, [sp, #16]
 8006c98:	f7fe f81a 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c9c:	202c      	movs	r0, #44	; 0x2c
 8006c9e:	f000 fb69 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006ca2:	9805      	ldr	r0, [sp, #20]
 8006ca4:	f7fe f814 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006ca8:	202c      	movs	r0, #44	; 0x2c
 8006caa:	f000 fb63 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006cae:	9806      	ldr	r0, [sp, #24]
 8006cb0:	f7fe f80e 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006cb4:	202c      	movs	r0, #44	; 0x2c
 8006cb6:	f000 fb5d 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006cba:	9807      	ldr	r0, [sp, #28]
 8006cbc:	f7fe f808 	bl	8004cd0 <printFloat_CoordValue>
  serial_write(':');
 8006cc0:	203a      	movs	r0, #58	; 0x3a
 8006cc2:	f000 fb57 	bl	8007374 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <report_ngc_parameters+0x170>)
 8006cc8:	7958      	ldrb	r0, [r3, #5]
 8006cca:	f7fd fecf 	bl	8004a6c <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006cce:	205d      	movs	r0, #93	; 0x5d
 8006cd0:	f000 fb50 	bl	8007374 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006cd4:	480a      	ldr	r0, [pc, #40]	; (8006d00 <report_ngc_parameters+0x158>)
 8006cd6:	f7fd febd 	bl	8004a54 <printString>
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 8006cda:	b008      	add	sp, #32
 8006cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      printPgmString(PSTR("error:"));
 8006ce0:	480e      	ldr	r0, [pc, #56]	; (8006d1c <report_ngc_parameters+0x174>)
 8006ce2:	f7fd feb7 	bl	8004a54 <printString>
      print_uint8_base10(status_code);
 8006ce6:	2007      	movs	r0, #7
 8006ce8:	f7fd fec0 	bl	8004a6c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006cec:	4804      	ldr	r0, [pc, #16]	; (8006d00 <report_ngc_parameters+0x158>)
 8006cee:	f7fd feb1 	bl	8004a54 <printString>
}
 8006cf2:	b008      	add	sp, #32
 8006cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cf8:	0800c258 	.word	0x0800c258
 8006cfc:	0800c260 	.word	0x0800c260
 8006d00:	0800c30c 	.word	0x0800c30c
 8006d04:	20001354 	.word	0x20001354
 8006d08:	0800c264 	.word	0x0800c264
 8006d0c:	0800c26c 	.word	0x0800c26c
 8006d10:	0800c274 	.word	0x0800c274
 8006d14:	20001408 	.word	0x20001408
 8006d18:	200013f0 	.word	0x200013f0
 8006d1c:	0800c304 	.word	0x0800c304
 8006d20:	0800c25c 	.word	0x0800c25c

08006d24 <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8006d24:	b510      	push	{r4, lr}
  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006d26:	4c51      	ldr	r4, [pc, #324]	; (8006e6c <report_gcode_modes+0x148>)
  printPgmString(PSTR("[GC:G"));
 8006d28:	4851      	ldr	r0, [pc, #324]	; (8006e70 <report_gcode_modes+0x14c>)
 8006d2a:	f7fd fe93 	bl	8004a54 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006d2e:	7820      	ldrb	r0, [r4, #0]
 8006d30:	288b      	cmp	r0, #139	; 0x8b
 8006d32:	d95e      	bls.n	8006df2 <report_gcode_modes+0xce>
    printPgmString(PSTR("38."));
 8006d34:	484f      	ldr	r0, [pc, #316]	; (8006e74 <report_gcode_modes+0x150>)
 8006d36:	f7fd fe8d 	bl	8004a54 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8006d3a:	7820      	ldrb	r0, [r4, #0]
 8006d3c:	3076      	adds	r0, #118	; 0x76
 8006d3e:	b2c0      	uxtb	r0, r0
 8006d40:	f7fd fe94 	bl	8004a6c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006d44:	484c      	ldr	r0, [pc, #304]	; (8006e78 <report_gcode_modes+0x154>)
 8006d46:	f7fd fe85 	bl	8004a54 <printString>
  } else {
    print_uint8_base10(gc_state.modal.motion);
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 8006d4a:	79a0      	ldrb	r0, [r4, #6]
 8006d4c:	3036      	adds	r0, #54	; 0x36
 8006d4e:	b2c0      	uxtb	r0, r0
 8006d50:	f7fd fe8c 	bl	8004a6c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006d54:	4848      	ldr	r0, [pc, #288]	; (8006e78 <report_gcode_modes+0x154>)
 8006d56:	f7fd fe7d 	bl	8004a54 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 8006d5a:	7920      	ldrb	r0, [r4, #4]
 8006d5c:	3011      	adds	r0, #17
 8006d5e:	b2c0      	uxtb	r0, r0
 8006d60:	f7fd fe84 	bl	8004a6c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006d64:	4844      	ldr	r0, [pc, #272]	; (8006e78 <report_gcode_modes+0x154>)
 8006d66:	f7fd fe75 	bl	8004a54 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 8006d6a:	78a0      	ldrb	r0, [r4, #2]
 8006d6c:	f1c0 0015 	rsb	r0, r0, #21
 8006d70:	b2c0      	uxtb	r0, r0
 8006d72:	f7fd fe7b 	bl	8004a6c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006d76:	4840      	ldr	r0, [pc, #256]	; (8006e78 <report_gcode_modes+0x154>)
 8006d78:	f7fd fe6c 	bl	8004a54 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 8006d7c:	78e0      	ldrb	r0, [r4, #3]
 8006d7e:	305a      	adds	r0, #90	; 0x5a
 8006d80:	b2c0      	uxtb	r0, r0
 8006d82:	f7fd fe73 	bl	8004a6c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006d86:	483c      	ldr	r0, [pc, #240]	; (8006e78 <report_gcode_modes+0x154>)
 8006d88:	f7fd fe64 	bl	8004a54 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8006d8c:	7860      	ldrb	r0, [r4, #1]
 8006d8e:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 8006d92:	b2c0      	uxtb	r0, r0
 8006d94:	f7fd fe6a 	bl	8004a6c <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8006d98:	79e3      	ldrb	r3, [r4, #7]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d140      	bne.n	8006e20 <report_gcode_modes+0xfc>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006d9e:	4837      	ldr	r0, [pc, #220]	; (8006e7c <report_gcode_modes+0x158>)
 8006da0:	f7fd fe58 	bl	8004a54 <printString>
        break;
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 8006da4:	7a63      	ldrb	r3, [r4, #9]
 8006da6:	2b10      	cmp	r3, #16
 8006da8:	d04c      	beq.n	8006e44 <report_gcode_modes+0x120>
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d04e      	beq.n	8006e4c <report_gcode_modes+0x128>
 8006dae:	b353      	cbz	r3, 8006e06 <report_gcode_modes+0xe2>
    case SPINDLE_DISABLE : serial_write('5'); break;
  }

  //report_util_gcode_modes_M();
  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8006db0:	7a23      	ldrb	r3, [r4, #8]
 8006db2:	b373      	cbz	r3, 8006e12 <report_gcode_modes+0xee>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8006db4:	061a      	lsls	r2, r3, #24
 8006db6:	d44d      	bmi.n	8006e54 <report_gcode_modes+0x130>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8006db8:	065b      	lsls	r3, r3, #25
 8006dba:	d41d      	bmi.n	8006df8 <report_gcode_modes+0xd4>
			report_util_gcode_modes_M();
			print_uint8_base10(56);
		}
	#endif

  printPgmString(PSTR(" T"));
 8006dbc:	4830      	ldr	r0, [pc, #192]	; (8006e80 <report_gcode_modes+0x15c>)
 8006dbe:	f7fd fe49 	bl	8004a54 <printString>
  print_uint8_base10(gc_state.tool);
 8006dc2:	7d20      	ldrb	r0, [r4, #20]
 8006dc4:	f7fd fe52 	bl	8004a6c <print_uint8_base10>

  printPgmString(PSTR(" F"));
 8006dc8:	482e      	ldr	r0, [pc, #184]	; (8006e84 <report_gcode_modes+0x160>)
 8006dca:	f7fd fe43 	bl	8004a54 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 8006dce:	6920      	ldr	r0, [r4, #16]
 8006dd0:	f7fe f86e 	bl	8004eb0 <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 8006dd4:	482c      	ldr	r0, [pc, #176]	; (8006e88 <report_gcode_modes+0x164>)
 8006dd6:	f7fd fe3d 	bl	8004a54 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 8006dda:	68e0      	ldr	r0, [r4, #12]
 8006ddc:	2100      	movs	r1, #0
 8006dde:	f7fd fe87 	bl	8004af0 <printFloat>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006de2:	205d      	movs	r0, #93	; 0x5d
 8006de4:	f000 fac6 	bl	8007374 <serial_write>
  #endif

  report_util_feedback_line_feed();
}
 8006de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006dec:	4827      	ldr	r0, [pc, #156]	; (8006e8c <report_gcode_modes+0x168>)
 8006dee:	f7fd be31 	b.w	8004a54 <printString>
    print_uint8_base10(gc_state.modal.motion);
 8006df2:	f7fd fe3b 	bl	8004a6c <print_uint8_base10>
 8006df6:	e7a5      	b.n	8006d44 <report_gcode_modes+0x20>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006df8:	4820      	ldr	r0, [pc, #128]	; (8006e7c <report_gcode_modes+0x158>)
 8006dfa:	f7fd fe2b 	bl	8004a54 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8006dfe:	2038      	movs	r0, #56	; 0x38
 8006e00:	f000 fab8 	bl	8007374 <serial_write>
 8006e04:	e7da      	b.n	8006dbc <report_gcode_modes+0x98>
    case SPINDLE_DISABLE : serial_write('5'); break;
 8006e06:	2035      	movs	r0, #53	; 0x35
 8006e08:	f000 fab4 	bl	8007374 <serial_write>
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8006e0c:	7a23      	ldrb	r3, [r4, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1d0      	bne.n	8006db4 <report_gcode_modes+0x90>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006e12:	481a      	ldr	r0, [pc, #104]	; (8006e7c <report_gcode_modes+0x158>)
 8006e14:	f7fd fe1e 	bl	8004a54 <printString>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 8006e18:	2039      	movs	r0, #57	; 0x39
 8006e1a:	f000 faab 	bl	8007374 <serial_write>
 8006e1e:	e7cd      	b.n	8006dbc <report_gcode_modes+0x98>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006e20:	4816      	ldr	r0, [pc, #88]	; (8006e7c <report_gcode_modes+0x158>)
 8006e22:	f7fd fe17 	bl	8004a54 <printString>
    switch (gc_state.modal.program_flow) {
 8006e26:	79e0      	ldrb	r0, [r4, #7]
 8006e28:	2803      	cmp	r0, #3
 8006e2a:	d01b      	beq.n	8006e64 <report_gcode_modes+0x140>
 8006e2c:	281e      	cmp	r0, #30
 8006e2e:	d001      	beq.n	8006e34 <report_gcode_modes+0x110>
 8006e30:	2802      	cmp	r0, #2
 8006e32:	d1b4      	bne.n	8006d9e <report_gcode_modes+0x7a>
        print_uint8_base10(gc_state.modal.program_flow);
 8006e34:	f7fd fe1a 	bl	8004a6c <print_uint8_base10>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006e38:	4810      	ldr	r0, [pc, #64]	; (8006e7c <report_gcode_modes+0x158>)
 8006e3a:	f7fd fe0b 	bl	8004a54 <printString>
  switch (gc_state.modal.spindle) {
 8006e3e:	7a63      	ldrb	r3, [r4, #9]
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d1b2      	bne.n	8006daa <report_gcode_modes+0x86>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 8006e44:	2033      	movs	r0, #51	; 0x33
 8006e46:	f000 fa95 	bl	8007374 <serial_write>
 8006e4a:	e7b1      	b.n	8006db0 <report_gcode_modes+0x8c>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 8006e4c:	2034      	movs	r0, #52	; 0x34
 8006e4e:	f000 fa91 	bl	8007374 <serial_write>
 8006e52:	e7ad      	b.n	8006db0 <report_gcode_modes+0x8c>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006e54:	4809      	ldr	r0, [pc, #36]	; (8006e7c <report_gcode_modes+0x158>)
 8006e56:	f7fd fdfd 	bl	8004a54 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8006e5a:	2037      	movs	r0, #55	; 0x37
 8006e5c:	f000 fa8a 	bl	8007374 <serial_write>
 8006e60:	7a23      	ldrb	r3, [r4, #8]
 8006e62:	e7a9      	b.n	8006db8 <report_gcode_modes+0x94>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 8006e64:	2030      	movs	r0, #48	; 0x30
 8006e66:	f000 fa85 	bl	8007374 <serial_write>
 8006e6a:	e798      	b.n	8006d9e <report_gcode_modes+0x7a>
 8006e6c:	20001354 	.word	0x20001354
 8006e70:	0800c1cc 	.word	0x0800c1cc
 8006e74:	0800c1d4 	.word	0x0800c1d4
 8006e78:	0800c1d8 	.word	0x0800c1d8
 8006e7c:	0800c1dc 	.word	0x0800c1dc
 8006e80:	0800c1e0 	.word	0x0800c1e0
 8006e84:	0800c1e4 	.word	0x0800c1e4
 8006e88:	0800c1e8 	.word	0x0800c1e8
 8006e8c:	0800c30c 	.word	0x0800c30c

08006e90 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4605      	mov	r5, r0
 8006e94:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 8006e96:	4808      	ldr	r0, [pc, #32]	; (8006eb8 <report_startup_line+0x28>)
 8006e98:	f7fd fddc 	bl	8004a54 <printString>
  print_uint8_base10(n);
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f7fd fde5 	bl	8004a6c <print_uint8_base10>
  serial_write('=');
 8006ea2:	203d      	movs	r0, #61	; 0x3d
 8006ea4:	f000 fa66 	bl	8007374 <serial_write>
  printString(line);
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f7fd fdd3 	bl	8004a54 <printString>
  report_util_line_feed();
}
 8006eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006eb2:	4802      	ldr	r0, [pc, #8]	; (8006ebc <report_startup_line+0x2c>)
 8006eb4:	f7fd bdce 	b.w	8004a54 <printString>
 8006eb8:	0800c2f8 	.word	0x0800c2f8
 8006ebc:	0800c30c 	.word	0x0800c30c

08006ec0 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	460c      	mov	r4, r1
  serial_write('>');
 8006ec6:	203e      	movs	r0, #62	; 0x3e
 8006ec8:	f000 fa54 	bl	8007374 <serial_write>
  printString(line);
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f7fd fdc1 	bl	8004a54 <printString>
  serial_write(':');
 8006ed2:	203a      	movs	r0, #58	; 0x3a
 8006ed4:	f000 fa4e 	bl	8007374 <serial_write>
  switch(status_code) {
 8006ed8:	b154      	cbz	r4, 8006ef0 <report_execute_startup_message+0x30>
      printPgmString(PSTR("error:"));
 8006eda:	4808      	ldr	r0, [pc, #32]	; (8006efc <report_execute_startup_message+0x3c>)
 8006edc:	f7fd fdba 	bl	8004a54 <printString>
      print_uint8_base10(status_code);
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f7fd fdc3 	bl	8004a6c <print_uint8_base10>
  report_status_message(status_code);
}
 8006ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006eea:	4805      	ldr	r0, [pc, #20]	; (8006f00 <report_execute_startup_message+0x40>)
 8006eec:	f7fd bdb2 	b.w	8004a54 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 8006ef0:	4804      	ldr	r0, [pc, #16]	; (8006f04 <report_execute_startup_message+0x44>)
}
 8006ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      printPgmString(PSTR("ok\r\n")); break;
 8006ef6:	f7fd bdad 	b.w	8004a54 <printString>
 8006efa:	bf00      	nop
 8006efc:	0800c304 	.word	0x0800c304
 8006f00:	0800c30c 	.word	0x0800c30c
 8006f04:	0800c2fc 	.word	0x0800c2fc

08006f08 <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 8006f0c:	4814      	ldr	r0, [pc, #80]	; (8006f60 <report_build_info+0x58>)
 8006f0e:	f7fd fda1 	bl	8004a54 <printString>
  printString(line);
 8006f12:	4620      	mov	r0, r4
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f14:	4c13      	ldr	r4, [pc, #76]	; (8006f64 <report_build_info+0x5c>)
  printString(line);
 8006f16:	f7fd fd9d 	bl	8004a54 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006f1a:	205d      	movs	r0, #93	; 0x5d
 8006f1c:	f000 fa2a 	bl	8007374 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f20:	4620      	mov	r0, r4
 8006f22:	f7fd fd97 	bl	8004a54 <printString>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 8006f26:	4810      	ldr	r0, [pc, #64]	; (8006f68 <report_build_info+0x60>)
 8006f28:	f7fd fd94 	bl	8004a54 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 8006f2c:	2056      	movs	r0, #86	; 0x56
 8006f2e:	f000 fa21 	bl	8007374 <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 8006f32:	204d      	movs	r0, #77	; 0x4d
 8006f34:	f000 fa1e 	bl	8007374 <serial_write>
	#ifndef HOMING_INIT_LOCK
		serial_write('L');
	#endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
	serial_write(',');
 8006f38:	202c      	movs	r0, #44	; 0x2c
 8006f3a:	f000 fa1b 	bl	8007374 <serial_write>
	print_uint8_base10(BLOCK_BUFFER_SIZE - 1);
 8006f3e:	2023      	movs	r0, #35	; 0x23
 8006f40:	f7fd fd94 	bl	8004a6c <print_uint8_base10>
	serial_write(',');
 8006f44:	202c      	movs	r0, #44	; 0x2c
 8006f46:	f000 fa15 	bl	8007374 <serial_write>
	print_uint8_base10(RX_BUFFER_SIZE);
 8006f4a:	20fe      	movs	r0, #254	; 0xfe
 8006f4c:	f7fd fd8e 	bl	8004a6c <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006f50:	205d      	movs	r0, #93	; 0x5d
 8006f52:	f000 fa0f 	bl	8007374 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f56:	4620      	mov	r0, r4

	report_util_feedback_line_feed();
}
 8006f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f5c:	f7fd bd7a 	b.w	8004a54 <printString>
 8006f60:	0800c100 	.word	0x0800c100
 8006f64:	0800c30c 	.word	0x0800c30c
 8006f68:	0800c114 	.word	0x0800c114

08006f6c <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8006f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6e:	b08d      	sub	sp, #52	; 0x34
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006f70:	466d      	mov	r5, sp
 8006f72:	4baf      	ldr	r3, [pc, #700]	; (8007230 <report_realtime_status+0x2c4>)
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position, current_position);

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 8006f74:	4caf      	ldr	r4, [pc, #700]	; (8007234 <report_realtime_status+0x2c8>)
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f78:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  system_convert_array_steps_to_mpos(print_position, current_position);
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	a804      	add	r0, sp, #16
 8006f80:	f002 fc54 	bl	800982c <system_convert_array_steps_to_mpos>
  serial_write('<');
 8006f84:	203c      	movs	r0, #60	; 0x3c
 8006f86:	f000 f9f5 	bl	8007374 <serial_write>
  switch (sys.state) {
 8006f8a:	7823      	ldrb	r3, [r4, #0]
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	f000 81a0 	beq.w	80072d2 <report_realtime_status+0x366>
 8006f92:	d946      	bls.n	8007022 <report_realtime_status+0xb6>
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	f000 8190 	beq.w	80072ba <report_realtime_status+0x34e>
 8006f9a:	f240 8187 	bls.w	80072ac <report_realtime_status+0x340>
 8006f9e:	2b40      	cmp	r3, #64	; 0x40
 8006fa0:	f000 80e4 	beq.w	800716c <report_realtime_status+0x200>
 8006fa4:	2b80      	cmp	r3, #128	; 0x80
 8006fa6:	d149      	bne.n	800703c <report_realtime_status+0xd0>
    break;
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006fa8:	4ea3      	ldr	r6, [pc, #652]	; (8007238 <report_realtime_status+0x2cc>)
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8006faa:	48a4      	ldr	r0, [pc, #656]	; (800723c <report_realtime_status+0x2d0>)
 8006fac:	f7fd fd52 	bl	8004a54 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006fb0:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 8006fb4:	07dd      	lsls	r5, r3, #31
 8006fb6:	d446      	bmi.n	8007046 <report_realtime_status+0xda>
    (sys.report_wco_counter == 0)) {
    for (idx = 0; idx< N_AXIS; idx++) {
      // Apply work coordinate offsets and tool length offset to current position.
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006fb8:	4da1      	ldr	r5, [pc, #644]	; (8007240 <report_realtime_status+0x2d4>)
 8006fba:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8006fbc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006fbe:	f7f9 fd73 	bl	8000aa8 <__addsf3>
 8006fc2:	4603      	mov	r3, r0
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
      if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
        print_position[idx] -= wco[idx];
 8006fc4:	9804      	ldr	r0, [sp, #16]
 8006fc6:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006fc8:	9308      	str	r3, [sp, #32]
        print_position[idx] -= wco[idx];
 8006fca:	f7f9 fd6b 	bl	8000aa4 <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006fce:	6c29      	ldr	r1, [r5, #64]	; 0x40
        print_position[idx] -= wco[idx];
 8006fd0:	9004      	str	r0, [sp, #16]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006fd2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8006fd4:	f7f9 fd68 	bl	8000aa8 <__addsf3>
 8006fd8:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 8006fda:	9805      	ldr	r0, [sp, #20]
 8006fdc:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006fde:	9309      	str	r3, [sp, #36]	; 0x24
        print_position[idx] -= wco[idx];
 8006fe0:	f7f9 fd60 	bl	8000aa4 <__aeabi_fsub>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006fe4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
        print_position[idx] -= wco[idx];
 8006fe6:	9005      	str	r0, [sp, #20]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006fe8:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8006fea:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8006fec:	f7f9 fd5c 	bl	8000aa8 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	f7f9 fd59 	bl	8000aa8 <__addsf3>
 8006ff6:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 8006ff8:	9806      	ldr	r0, [sp, #24]
 8006ffa:	4619      	mov	r1, r3
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006ffc:	930a      	str	r3, [sp, #40]	; 0x28
        print_position[idx] -= wco[idx];
 8006ffe:	f7f9 fd51 	bl	8000aa4 <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007002:	6ca9      	ldr	r1, [r5, #72]	; 0x48
        print_position[idx] -= wco[idx];
 8007004:	9006      	str	r0, [sp, #24]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007006:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007008:	f7f9 fd4e 	bl	8000aa8 <__addsf3>
 800700c:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 800700e:	9807      	ldr	r0, [sp, #28]
 8007010:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007012:	930b      	str	r3, [sp, #44]	; 0x2c
        print_position[idx] -= wco[idx];
 8007014:	f7f9 fd46 	bl	8000aa4 <__aeabi_fsub>
 8007018:	9007      	str	r0, [sp, #28]
  // Report machine position
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
    printPgmString(PSTR("|MPos:"));
  }
  else {
    printPgmString(PSTR("|WPos:"));
 800701a:	488a      	ldr	r0, [pc, #552]	; (8007244 <report_realtime_status+0x2d8>)
 800701c:	f7fd fd1a 	bl	8004a54 <printString>
 8007020:	e02f      	b.n	8007082 <report_realtime_status+0x116>
  switch (sys.state) {
 8007022:	2b01      	cmp	r3, #1
 8007024:	f000 8151 	beq.w	80072ca <report_realtime_status+0x35e>
 8007028:	f0c0 814b 	bcc.w	80072c2 <report_realtime_status+0x356>
 800702c:	2b02      	cmp	r3, #2
 800702e:	f000 80ae 	beq.w	800718e <report_realtime_status+0x222>
 8007032:	2b04      	cmp	r3, #4
 8007034:	d102      	bne.n	800703c <report_realtime_status+0xd0>
  case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8007036:	4884      	ldr	r0, [pc, #528]	; (8007248 <report_realtime_status+0x2dc>)
 8007038:	f7fd fd0c 	bl	8004a54 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 800703c:	4e7e      	ldr	r6, [pc, #504]	; (8007238 <report_realtime_status+0x2cc>)
 800703e:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 8007042:	07dd      	lsls	r5, r3, #31
 8007044:	d5b8      	bpl.n	8006fb8 <report_realtime_status+0x4c>
 8007046:	7b63      	ldrb	r3, [r4, #13]
 8007048:	b9c3      	cbnz	r3, 800707c <report_realtime_status+0x110>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800704a:	4d7d      	ldr	r5, [pc, #500]	; (8007240 <report_realtime_status+0x2d4>)
 800704c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800704e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007050:	f7f9 fd2a 	bl	8000aa8 <__addsf3>
 8007054:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8007056:	9008      	str	r0, [sp, #32]
 8007058:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800705a:	f7f9 fd25 	bl	8000aa8 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800705e:	6cef      	ldr	r7, [r5, #76]	; 0x4c
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007060:	9009      	str	r0, [sp, #36]	; 0x24
 8007062:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8007064:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8007066:	f7f9 fd1f 	bl	8000aa8 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800706a:	4639      	mov	r1, r7
 800706c:	f7f9 fd1c 	bl	8000aa8 <__addsf3>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007070:	6ca9      	ldr	r1, [r5, #72]	; 0x48
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007072:	900a      	str	r0, [sp, #40]	; 0x28
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007074:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007076:	f7f9 fd17 	bl	8000aa8 <__addsf3>
 800707a:	900b      	str	r0, [sp, #44]	; 0x2c
    printPgmString(PSTR("|MPos:"));
 800707c:	4873      	ldr	r0, [pc, #460]	; (800724c <report_realtime_status+0x2e0>)
 800707e:	f7fd fce9 	bl	8004a54 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8007082:	9804      	ldr	r0, [sp, #16]
 8007084:	f7fd fe24 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007088:	202c      	movs	r0, #44	; 0x2c
 800708a:	f000 f973 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 800708e:	9805      	ldr	r0, [sp, #20]
 8007090:	f7fd fe1e 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007094:	202c      	movs	r0, #44	; 0x2c
 8007096:	f000 f96d 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 800709a:	9806      	ldr	r0, [sp, #24]
 800709c:	f7fd fe18 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80070a0:	202c      	movs	r0, #44	; 0x2c
 80070a2:	f000 f967 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80070a6:	9807      	ldr	r0, [sp, #28]
 80070a8:	f7fd fe12 	bl	8004cd0 <printFloat_CoordValue>
  }
  report_util_axis_values(print_position);

  // Returns planner and serial read buffer states.
#ifdef REPORT_FIELD_BUFFER_STATE
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_BUFFER_STATE)) {
 80070ac:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 80070b0:	0798      	lsls	r0, r3, #30
 80070b2:	f100 80dd 	bmi.w	8007270 <report_realtime_status+0x304>
#endif

  // Report realtime feed speed
#ifdef REPORT_FIELD_CURRENT_FEED_SPEED
#ifdef VARIABLE_SPINDLE
  printPgmString(PSTR("|FS:"));
 80070b6:	4866      	ldr	r0, [pc, #408]	; (8007250 <report_realtime_status+0x2e4>)
 80070b8:	f7fd fccc 	bl	8004a54 <printString>
  printFloat_RateValue(st_get_realtime_rate());
 80070bc:	f002 f94a 	bl	8009354 <st_get_realtime_rate>
 80070c0:	f7fd fef6 	bl	8004eb0 <printFloat_RateValue>
  serial_write(',');
 80070c4:	202c      	movs	r0, #44	; 0x2c
 80070c6:	f000 f955 	bl	8007374 <serial_write>
  printFloat(sys.spindle_speed, N_DECIMAL_RPMVALUE);
 80070ca:	2100      	movs	r1, #0
 80070cc:	6920      	ldr	r0, [r4, #16]
 80070ce:	f7fd fd0f 	bl	8004af0 <printFloat>
  printFloat_RateValue(st_get_realtime_rate());
#endif      
#endif

#ifdef REPORT_FIELD_PIN_STATE
  uint8_t lim_pin_state = limits_get_state();
 80070d2:	f7fb ffa1 	bl	8003018 <limits_get_state>
 80070d6:	4605      	mov	r5, r0
  uint8_t ctrl_pin_state = system_control_get_state();
 80070d8:	f002 f98e 	bl	80093f8 <system_control_get_state>
 80070dc:	4606      	mov	r6, r0
  uint8_t prb_pin_state = probe_get_state();
 80070de:	f7fd ffc3 	bl	8005068 <probe_get_state>
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 80070e2:	ea45 0306 	orr.w	r3, r5, r6
 80070e6:	4303      	orrs	r3, r0
 80070e8:	f013 0fff 	tst.w	r3, #255	; 0xff
  uint8_t prb_pin_state = probe_get_state();
 80070ec:	4607      	mov	r7, r0
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 80070ee:	d17b      	bne.n	80071e8 <report_realtime_status+0x27c>
    }
  }
#endif

#ifdef REPORT_FIELD_WORK_COORD_OFFSET
  if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 80070f0:	7b63      	ldrb	r3, [r4, #13]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d04f      	beq.n	8007196 <report_realtime_status+0x22a>
 80070f6:	3b01      	subs	r3, #1
 80070f8:	7363      	strb	r3, [r4, #13]
    report_util_axis_values(wco);
  }
#endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 80070fa:	7b23      	ldrb	r3, [r4, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d170      	bne.n	80071e2 <report_realtime_status+0x276>
    else {
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8007100:	7823      	ldrb	r3, [r4, #0]
        sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT - 1); // Reset counter for slow refresh
      }
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
      printPgmString(PSTR("|Ov:"));
 8007102:	4854      	ldr	r0, [pc, #336]	; (8007254 <report_realtime_status+0x2e8>)
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
 8007104:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 8007108:	bf14      	ite	ne
 800710a:	2313      	movne	r3, #19
 800710c:	2309      	moveq	r3, #9
 800710e:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|Ov:"));
 8007110:	f7fd fca0 	bl	8004a54 <printString>
      print_uint8_base10(sys.f_override);
 8007114:	7a20      	ldrb	r0, [r4, #8]
 8007116:	f7fd fca9 	bl	8004a6c <print_uint8_base10>
      serial_write(',');
 800711a:	202c      	movs	r0, #44	; 0x2c
 800711c:	f000 f92a 	bl	8007374 <serial_write>
      print_uint8_base10(sys.r_override);
 8007120:	7a60      	ldrb	r0, [r4, #9]
 8007122:	f7fd fca3 	bl	8004a6c <print_uint8_base10>
      serial_write(',');
 8007126:	202c      	movs	r0, #44	; 0x2c
 8007128:	f000 f924 	bl	8007374 <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 800712c:	7aa0      	ldrb	r0, [r4, #10]
 800712e:	f7fd fc9d 	bl	8004a6c <print_uint8_base10>

      uint8_t sp_state = spindle_get_state();
 8007132:	f000 fe03 	bl	8007d3c <spindle_get_state>
 8007136:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 8007138:	f7fa fc48 	bl	80019cc <coolant_get_state>
 800713c:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 800713e:	2d00      	cmp	r5, #0
 8007140:	f040 80a5 	bne.w	800728e <report_realtime_status+0x322>
 8007144:	b150      	cbz	r0, 800715c <report_realtime_status+0x1f0>
        printPgmString(PSTR("|A:"));
 8007146:	4844      	ldr	r0, [pc, #272]	; (8007258 <report_realtime_status+0x2ec>)
 8007148:	f7fd fc84 	bl	8004a54 <printString>
          #else
            if (sp_state & SPINDLE_STATE_CW) { serial_write('S'); } // CW
            else { serial_write('C'); } // CCW
          #endif
        }
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 800714c:	07e2      	lsls	r2, r4, #31
 800714e:	f100 80a9 	bmi.w	80072a4 <report_realtime_status+0x338>
        #ifdef ENABLE_M7
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 8007152:	07a3      	lsls	r3, r4, #30
 8007154:	d502      	bpl.n	800715c <report_realtime_status+0x1f0>
 8007156:	204d      	movs	r0, #77	; 0x4d
 8007158:	f000 f90c 	bl	8007374 <serial_write>
        #endif
      }
    }
  #endif

  serial_write('>');
 800715c:	203e      	movs	r0, #62	; 0x3e
 800715e:	f000 f909 	bl	8007374 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8007162:	483e      	ldr	r0, [pc, #248]	; (800725c <report_realtime_status+0x2f0>)
 8007164:	f7fd fc76 	bl	8004a54 <printString>
  report_util_line_feed();
}
 8007168:	b00d      	add	sp, #52	; 0x34
 800716a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printPgmString(PSTR("Door:"));
 800716c:	483c      	ldr	r0, [pc, #240]	; (8007260 <report_realtime_status+0x2f4>)
 800716e:	f7fd fc71 	bl	8004a54 <printString>
    if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8007172:	78a3      	ldrb	r3, [r4, #2]
 8007174:	071a      	lsls	r2, r3, #28
 8007176:	f100 80d7 	bmi.w	8007328 <report_realtime_status+0x3bc>
      if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 800717a:	075f      	lsls	r7, r3, #29
 800717c:	f140 80d0 	bpl.w	8007320 <report_realtime_status+0x3b4>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 8007180:	069e      	lsls	r6, r3, #26
 8007182:	f140 80c9 	bpl.w	8007318 <report_realtime_status+0x3ac>
      else { serial_write('1'); } // Actively holding
 8007186:	2031      	movs	r0, #49	; 0x31
 8007188:	f000 f8f4 	bl	8007374 <serial_write>
 800718c:	e756      	b.n	800703c <report_realtime_status+0xd0>
  case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 800718e:	4835      	ldr	r0, [pc, #212]	; (8007264 <report_realtime_status+0x2f8>)
 8007190:	f7fd fc60 	bl	8004a54 <printString>
 8007194:	e752      	b.n	800703c <report_realtime_status+0xd0>
    if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8007196:	7822      	ldrb	r2, [r4, #0]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8007198:	7b23      	ldrb	r3, [r4, #12]
    else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT - 1); }
 800719a:	f012 0f7c 	tst.w	r2, #124	; 0x7c
 800719e:	bf14      	ite	ne
 80071a0:	221d      	movne	r2, #29
 80071a2:	2209      	moveq	r2, #9
 80071a4:	7362      	strb	r2, [r4, #13]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 80071a6:	b90b      	cbnz	r3, 80071ac <report_realtime_status+0x240>
 80071a8:	2301      	movs	r3, #1
 80071aa:	7323      	strb	r3, [r4, #12]
    printPgmString(PSTR("|WCO:"));
 80071ac:	482e      	ldr	r0, [pc, #184]	; (8007268 <report_realtime_status+0x2fc>)
 80071ae:	f7fd fc51 	bl	8004a54 <printString>
    printFloat_CoordValue(axis_value[idx]);
 80071b2:	9808      	ldr	r0, [sp, #32]
 80071b4:	f7fd fd8c 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80071b8:	202c      	movs	r0, #44	; 0x2c
 80071ba:	f000 f8db 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80071be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071c0:	f7fd fd86 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80071c4:	202c      	movs	r0, #44	; 0x2c
 80071c6:	f000 f8d5 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80071ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071cc:	f7fd fd80 	bl	8004cd0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80071d0:	202c      	movs	r0, #44	; 0x2c
 80071d2:	f000 f8cf 	bl	8007374 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80071d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071d8:	f7fd fd7a 	bl	8004cd0 <printFloat_CoordValue>
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 80071dc:	7b23      	ldrb	r3, [r4, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d08e      	beq.n	8007100 <report_realtime_status+0x194>
 80071e2:	3b01      	subs	r3, #1
 80071e4:	7323      	strb	r3, [r4, #12]
 80071e6:	e7b9      	b.n	800715c <report_realtime_status+0x1f0>
    printPgmString(PSTR("|Pn:"));
 80071e8:	4820      	ldr	r0, [pc, #128]	; (800726c <report_realtime_status+0x300>)
 80071ea:	f7fd fc33 	bl	8004a54 <printString>
    if (prb_pin_state) { serial_write('P'); }
 80071ee:	b9bf      	cbnz	r7, 8007220 <report_realtime_status+0x2b4>
    if (lim_pin_state) {
 80071f0:	b145      	cbz	r5, 8007204 <report_realtime_status+0x298>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 80071f2:	07e9      	lsls	r1, r5, #31
 80071f4:	f100 8085 	bmi.w	8007302 <report_realtime_status+0x396>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 80071f8:	07aa      	lsls	r2, r5, #30
 80071fa:	d47e      	bmi.n	80072fa <report_realtime_status+0x38e>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 80071fc:	076b      	lsls	r3, r5, #29
 80071fe:	d470      	bmi.n	80072e2 <report_realtime_status+0x376>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 8007200:	072f      	lsls	r7, r5, #28
 8007202:	d411      	bmi.n	8007228 <report_realtime_status+0x2bc>
    if (ctrl_pin_state) {
 8007204:	2e00      	cmp	r6, #0
 8007206:	f43f af73 	beq.w	80070f0 <report_realtime_status+0x184>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 800720a:	07f5      	lsls	r5, r6, #31
 800720c:	d471      	bmi.n	80072f2 <report_realtime_status+0x386>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 800720e:	07b0      	lsls	r0, r6, #30
 8007210:	d46b      	bmi.n	80072ea <report_realtime_status+0x37e>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 8007212:	0771      	lsls	r1, r6, #29
 8007214:	f57f af6c 	bpl.w	80070f0 <report_realtime_status+0x184>
 8007218:	2053      	movs	r0, #83	; 0x53
 800721a:	f000 f8ab 	bl	8007374 <serial_write>
 800721e:	e767      	b.n	80070f0 <report_realtime_status+0x184>
    if (prb_pin_state) { serial_write('P'); }
 8007220:	2050      	movs	r0, #80	; 0x50
 8007222:	f000 f8a7 	bl	8007374 <serial_write>
 8007226:	e7e3      	b.n	80071f0 <report_realtime_status+0x284>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 8007228:	2041      	movs	r0, #65	; 0x41
 800722a:	f000 f8a3 	bl	8007374 <serial_write>
 800722e:	e7e9      	b.n	8007204 <report_realtime_status+0x298>
 8007230:	20001418 	.word	0x20001418
 8007234:	200013f0 	.word	0x200013f0
 8007238:	200015ac 	.word	0x200015ac
 800723c:	0800c2b4 	.word	0x0800c2b4
 8007240:	20001354 	.word	0x20001354
 8007244:	0800c2f0 	.word	0x0800c2f0
 8007248:	0800c294 	.word	0x0800c294
 800724c:	0800c2bc 	.word	0x0800c2bc
 8007250:	0800c2cc 	.word	0x0800c2cc
 8007254:	0800c2e4 	.word	0x0800c2e4
 8007258:	0800c2ec 	.word	0x0800c2ec
 800725c:	0800c30c 	.word	0x0800c30c
 8007260:	0800c2ac 	.word	0x0800c2ac
 8007264:	0800c2a4 	.word	0x0800c2a4
 8007268:	0800c2dc 	.word	0x0800c2dc
 800726c:	0800c2d4 	.word	0x0800c2d4
    printPgmString(PSTR("|Bf:"));
 8007270:	482f      	ldr	r0, [pc, #188]	; (8007330 <report_realtime_status+0x3c4>)
 8007272:	f7fd fbef 	bl	8004a54 <printString>
    print_uint8_base10(plan_get_block_buffer_available());
 8007276:	f7fd fbcb 	bl	8004a10 <plan_get_block_buffer_available>
 800727a:	f7fd fbf7 	bl	8004a6c <print_uint8_base10>
    serial_write(',');
 800727e:	202c      	movs	r0, #44	; 0x2c
 8007280:	f000 f878 	bl	8007374 <serial_write>
    print_uint8_base10(serial_get_rx_buffer_available());
 8007284:	f000 f862 	bl	800734c <serial_get_rx_buffer_available>
 8007288:	f7fd fbf0 	bl	8004a6c <print_uint8_base10>
 800728c:	e713      	b.n	80070b6 <report_realtime_status+0x14a>
        printPgmString(PSTR("|A:"));
 800728e:	4829      	ldr	r0, [pc, #164]	; (8007334 <report_realtime_status+0x3c8>)
 8007290:	f7fd fbe0 	bl	8004a54 <printString>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8007294:	2d01      	cmp	r5, #1
 8007296:	d020      	beq.n	80072da <report_realtime_status+0x36e>
              else { serial_write('C'); } // CCW
 8007298:	2043      	movs	r0, #67	; 0x43
 800729a:	f000 f86b 	bl	8007374 <serial_write>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 800729e:	07e2      	lsls	r2, r4, #31
 80072a0:	f57f af57 	bpl.w	8007152 <report_realtime_status+0x1e6>
 80072a4:	2046      	movs	r0, #70	; 0x46
 80072a6:	f000 f865 	bl	8007374 <serial_write>
 80072aa:	e752      	b.n	8007152 <report_realtime_status+0x1e6>
  switch (sys.state) {
 80072ac:	2b10      	cmp	r3, #16
 80072ae:	f47f aec5 	bne.w	800703c <report_realtime_status+0xd0>
    if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80072b2:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	da27      	bge.n	800730a <report_realtime_status+0x39e>
  case STATE_JOG: printPgmString(PSTR("Jog")); break;
 80072ba:	481f      	ldr	r0, [pc, #124]	; (8007338 <report_realtime_status+0x3cc>)
 80072bc:	f7fd fbca 	bl	8004a54 <printString>
 80072c0:	e6bc      	b.n	800703c <report_realtime_status+0xd0>
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 80072c2:	481e      	ldr	r0, [pc, #120]	; (800733c <report_realtime_status+0x3d0>)
 80072c4:	f7fd fbc6 	bl	8004a54 <printString>
 80072c8:	e6b8      	b.n	800703c <report_realtime_status+0xd0>
  case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 80072ca:	481d      	ldr	r0, [pc, #116]	; (8007340 <report_realtime_status+0x3d4>)
 80072cc:	f7fd fbc2 	bl	8004a54 <printString>
 80072d0:	e6b4      	b.n	800703c <report_realtime_status+0xd0>
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 80072d2:	481c      	ldr	r0, [pc, #112]	; (8007344 <report_realtime_status+0x3d8>)
 80072d4:	f7fd fbbe 	bl	8004a54 <printString>
 80072d8:	e6b0      	b.n	800703c <report_realtime_status+0xd0>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 80072da:	2053      	movs	r0, #83	; 0x53
 80072dc:	f000 f84a 	bl	8007374 <serial_write>
 80072e0:	e734      	b.n	800714c <report_realtime_status+0x1e0>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 80072e2:	205a      	movs	r0, #90	; 0x5a
 80072e4:	f000 f846 	bl	8007374 <serial_write>
 80072e8:	e78a      	b.n	8007200 <report_realtime_status+0x294>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 80072ea:	2048      	movs	r0, #72	; 0x48
 80072ec:	f000 f842 	bl	8007374 <serial_write>
 80072f0:	e78f      	b.n	8007212 <report_realtime_status+0x2a6>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 80072f2:	2052      	movs	r0, #82	; 0x52
 80072f4:	f000 f83e 	bl	8007374 <serial_write>
 80072f8:	e789      	b.n	800720e <report_realtime_status+0x2a2>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 80072fa:	2059      	movs	r0, #89	; 0x59
 80072fc:	f000 f83a 	bl	8007374 <serial_write>
 8007300:	e77c      	b.n	80071fc <report_realtime_status+0x290>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 8007302:	2058      	movs	r0, #88	; 0x58
 8007304:	f000 f836 	bl	8007374 <serial_write>
 8007308:	e776      	b.n	80071f8 <report_realtime_status+0x28c>
      printPgmString(PSTR("Hold:"));
 800730a:	480f      	ldr	r0, [pc, #60]	; (8007348 <report_realtime_status+0x3dc>)
 800730c:	f7fd fba2 	bl	8004a54 <printString>
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 8007310:	78a3      	ldrb	r3, [r4, #2]
 8007312:	07d9      	lsls	r1, r3, #31
 8007314:	f57f af37 	bpl.w	8007186 <report_realtime_status+0x21a>
 8007318:	2030      	movs	r0, #48	; 0x30
 800731a:	f000 f82b 	bl	8007374 <serial_write>
 800731e:	e68d      	b.n	800703c <report_realtime_status+0xd0>
        serial_write('2'); // Retracting
 8007320:	2032      	movs	r0, #50	; 0x32
 8007322:	f000 f827 	bl	8007374 <serial_write>
 8007326:	e689      	b.n	800703c <report_realtime_status+0xd0>
      serial_write('3'); // Restoring
 8007328:	2033      	movs	r0, #51	; 0x33
 800732a:	f000 f823 	bl	8007374 <serial_write>
 800732e:	e685      	b.n	800703c <report_realtime_status+0xd0>
 8007330:	0800c2c4 	.word	0x0800c2c4
 8007334:	0800c2ec 	.word	0x0800c2ec
 8007338:	0800c290 	.word	0x0800c290
 800733c:	0800c27c 	.word	0x0800c27c
 8007340:	0800c29c 	.word	0x0800c29c
 8007344:	0800c284 	.word	0x0800c284
 8007348:	0800c288 	.word	0x0800c288

0800734c <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 800734c:	4b06      	ldr	r3, [pc, #24]	; (8007368 <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 800734e:	4a07      	ldr	r2, [pc, #28]	; (800736c <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007350:	781b      	ldrb	r3, [r3, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8007352:	7812      	ldrb	r2, [r2, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007354:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8007356:	429a      	cmp	r2, r3
 8007358:	bf2c      	ite	cs
 800735a:	1e98      	subcs	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 800735c:	f103 30ff 	addcc.w	r0, r3, #4294967295	; 0xffffffff
 8007360:	1a80      	subs	r0, r0, r2
 8007362:	b2c0      	uxtb	r0, r0
}
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20000d99 	.word	0x20000d99
 800736c:	20000d98 	.word	0x20000d98

08007370 <serial_init>:
  // defaults to 8-bit, no parity, 1 stop bit
#endif
#ifdef WIN32
  InitializeCriticalSectionAndSpinCount(&CriticalSection,0x00000400);
#endif
}
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop

08007374 <serial_write>:
}
#endif


// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data) {
 8007374:	b470      	push	{r4, r5, r6}
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
 8007376:	4e0f      	ldr	r6, [pc, #60]	; (80073b4 <serial_write+0x40>)
 8007378:	490f      	ldr	r1, [pc, #60]	; (80073b8 <serial_write+0x44>)
 800737a:	7835      	ldrb	r5, [r6, #0]
  if (next_head == TX_RING_BUFFER) { next_head = 0; }

  // Wait until there is space in the buffer
  while (next_head == serial_tx_buffer_tail) {
    // TODO: Restructure st_prep_buffer() calls to be executed here during a long print.
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 800737c:	4c0f      	ldr	r4, [pc, #60]	; (80073bc <serial_write+0x48>)
  uint8_t next_head = serial_tx_buffer_head + 1;
 800737e:	1c6a      	adds	r2, r5, #1
 8007380:	b2d2      	uxtb	r2, r2
  if (next_head == TX_RING_BUFFER) { next_head = 0; }
 8007382:	2a80      	cmp	r2, #128	; 0x80
 8007384:	bf08      	it	eq
 8007386:	2200      	moveq	r2, #0
 8007388:	e002      	b.n	8007390 <serial_write+0x1c>
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 800738a:	7823      	ldrb	r3, [r4, #0]
 800738c:	06db      	lsls	r3, r3, #27
 800738e:	d40e      	bmi.n	80073ae <serial_write+0x3a>
  while (next_head == serial_tx_buffer_tail) {
 8007390:	780b      	ldrb	r3, [r1, #0]
 8007392:	4293      	cmp	r3, r2
 8007394:	d0f9      	beq.n	800738a <serial_write+0x16>
     Sleep(1);
#endif
  }

  // Store data and advance head
  serial_tx_buffer[serial_tx_buffer_head] = data;
 8007396:	4b0a      	ldr	r3, [pc, #40]	; (80073c0 <serial_write+0x4c>)
 8007398:	490a      	ldr	r1, [pc, #40]	; (80073c4 <serial_write+0x50>)
 800739a:	5558      	strb	r0, [r3, r5]
#ifdef USB_CHANGED_DEBUG
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 800739c:	4807      	ldr	r0, [pc, #28]	; (80073bc <serial_write+0x48>)
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 800739e:	e002      	b.n	80073a6 <serial_write+0x32>
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 80073a0:	7803      	ldrb	r3, [r0, #0]
 80073a2:	06db      	lsls	r3, r3, #27
 80073a4:	d403      	bmi.n	80073ae <serial_write+0x3a>
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 80073a6:	780b      	ldrb	r3, [r1, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1f9      	bne.n	80073a0 <serial_write+0x2c>
  }
#endif
  serial_tx_buffer_head = next_head;
 80073ac:	7032      	strb	r2, [r6, #0]

#ifdef AVRTARGET
  // Enable Data Register Empty Interrupt to make sure tx-streaming is running
  UCSR0B |=  (1 << UDRIE0);
#endif
}
 80073ae:	bc70      	pop	{r4, r5, r6}
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20000d9a 	.word	0x20000d9a
 80073b8:	20000d9b 	.word	0x20000d9b
 80073bc:	20001405 	.word	0x20001405
 80073c0:	2000142c 	.word	0x2000142c
 80073c4:	20000f4c 	.word	0x20000f4c

080073c8 <serial_read>:
#endif

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 80073c8:	4908      	ldr	r1, [pc, #32]	; (80073ec <serial_read+0x24>)
  if (serial_rx_buffer_head == tail) {
 80073ca:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <serial_read+0x28>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 80073cc:	780a      	ldrb	r2, [r1, #0]
  if (serial_rx_buffer_head == tail) {
 80073ce:	781b      	ldrb	r3, [r3, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 80073d0:	b2d2      	uxtb	r2, r2
  if (serial_rx_buffer_head == tail) {
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d008      	beq.n	80073e8 <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];

    tail++;
 80073d6:	1c53      	adds	r3, r2, #1
 80073d8:	b2db      	uxtb	r3, r3
    if (tail == RX_RING_BUFFER) { tail = 0; }
 80073da:	2bfe      	cmp	r3, #254	; 0xfe
 80073dc:	bf08      	it	eq
 80073de:	2300      	moveq	r3, #0
    uint8_t data = serial_rx_buffer[tail];
 80073e0:	4804      	ldr	r0, [pc, #16]	; (80073f4 <serial_read+0x2c>)
    serial_rx_buffer_tail = tail;
 80073e2:	700b      	strb	r3, [r1, #0]
    uint8_t data = serial_rx_buffer[tail];
 80073e4:	5c80      	ldrb	r0, [r0, r2]

    return data;
 80073e6:	4770      	bx	lr
    return SERIAL_NO_DATA;
 80073e8:	20ff      	movs	r0, #255	; 0xff
  }
}
 80073ea:	4770      	bx	lr
 80073ec:	20000d99 	.word	0x20000d99
 80073f0:	20000d98 	.word	0x20000d98
 80073f4:	200014ac 	.word	0x200014ac

080073f8 <OnUsbDataRx>:
	//lcd_write_char(*dataIn);
	uint8_t next_head;
    uint8_t data;

	// Write data to buffer unless it is full.
	while (length != 0)
 80073f8:	2900      	cmp	r1, #0
 80073fa:	d07b      	beq.n	80074f4 <OnUsbDataRx+0xfc>
{
 80073fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007400:	1e4d      	subs	r5, r1, #1
 8007402:	b2ed      	uxtb	r5, r5
 8007404:	3501      	adds	r5, #1
 8007406:	4604      	mov	r4, r0
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
          #endif
        }
        // Throw away any unfound extended-ASCII character by not passing it to the serial buffer.
      } else { // Write character to buffer
        next_head = serial_rx_buffer_head + 1;
 8007408:	4e61      	ldr	r6, [pc, #388]	; (8007590 <OnUsbDataRx+0x198>)
        if (next_head == RX_RING_BUFFER) { next_head = 0; }

        // Write data to buffer unless it is full.
        if (next_head != serial_rx_buffer_tail) {
 800740a:	4f62      	ldr	r7, [pc, #392]	; (8007594 <OnUsbDataRx+0x19c>)
          serial_rx_buffer[serial_rx_buffer_head] = data;
 800740c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800759c <OnUsbDataRx+0x1a4>
 8007410:	4405      	add	r5, r0
 8007412:	e008      	b.n	8007426 <OnUsbDataRx+0x2e>
  switch (data) {
 8007414:	2b3f      	cmp	r3, #63	; 0x3f
 8007416:	d026      	beq.n	8007466 <OnUsbDataRx+0x6e>
 8007418:	2b7e      	cmp	r3, #126	; 0x7e
 800741a:	d115      	bne.n	8007448 <OnUsbDataRx+0x50>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 800741c:	2002      	movs	r0, #2
 800741e:	f002 fa63 	bl	80098e8 <system_set_exec_state_flag>
	while (length != 0)
 8007422:	42ac      	cmp	r4, r5
 8007424:	d00a      	beq.n	800743c <OnUsbDataRx+0x44>
        data = *dataIn ++;
 8007426:	f814 3b01 	ldrb.w	r3, [r4], #1
  switch (data) {
 800742a:	2b21      	cmp	r3, #33	; 0x21
 800742c:	d008      	beq.n	8007440 <OnUsbDataRx+0x48>
 800742e:	d8f1      	bhi.n	8007414 <OnUsbDataRx+0x1c>
 8007430:	2b18      	cmp	r3, #24
 8007432:	d109      	bne.n	8007448 <OnUsbDataRx+0x50>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 8007434:	f7fc fc8c 	bl	8003d50 <mc_reset>
	while (length != 0)
 8007438:	42ac      	cmp	r4, r5
 800743a:	d1f4      	bne.n	8007426 <OnUsbDataRx+0x2e>
#else
    length--;
#endif
   }
#endif
}
 800743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 8007440:	2008      	movs	r0, #8
 8007442:	f002 fa51 	bl	80098e8 <system_set_exec_state_flag>
 8007446:	e7ec      	b.n	8007422 <OnUsbDataRx+0x2a>
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 8007448:	061a      	lsls	r2, r3, #24
 800744a:	d410      	bmi.n	800746e <OnUsbDataRx+0x76>
        next_head = serial_rx_buffer_head + 1;
 800744c:	7831      	ldrb	r1, [r6, #0]
        if (next_head != serial_rx_buffer_tail) {
 800744e:	7838      	ldrb	r0, [r7, #0]
        next_head = serial_rx_buffer_head + 1;
 8007450:	1c4a      	adds	r2, r1, #1
 8007452:	b2d2      	uxtb	r2, r2
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 8007454:	2afe      	cmp	r2, #254	; 0xfe
 8007456:	bf08      	it	eq
 8007458:	2200      	moveq	r2, #0
        if (next_head != serial_rx_buffer_tail) {
 800745a:	4290      	cmp	r0, r2
          serial_rx_buffer[serial_rx_buffer_head] = data;
 800745c:	bf1c      	itt	ne
 800745e:	f808 3001 	strbne.w	r3, [r8, r1]
          serial_rx_buffer_head = next_head;
 8007462:	7032      	strbne	r2, [r6, #0]
 8007464:	e7dd      	b.n	8007422 <OnUsbDataRx+0x2a>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 8007466:	2001      	movs	r0, #1
 8007468:	f002 fa3e 	bl	80098e8 <system_set_exec_state_flag>
 800746c:	e7d9      	b.n	8007422 <OnUsbDataRx+0x2a>
        switch(data) {
 800746e:	3b84      	subs	r3, #132	; 0x84
 8007470:	2b1d      	cmp	r3, #29
 8007472:	d8d6      	bhi.n	8007422 <OnUsbDataRx+0x2a>
 8007474:	a201      	add	r2, pc, #4	; (adr r2, 800747c <OnUsbDataRx+0x84>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	080074ff 	.word	0x080074ff
 8007480:	08007507 	.word	0x08007507
 8007484:	08007423 	.word	0x08007423
 8007488:	08007423 	.word	0x08007423
 800748c:	08007423 	.word	0x08007423
 8007490:	08007423 	.word	0x08007423
 8007494:	08007423 	.word	0x08007423
 8007498:	08007423 	.word	0x08007423
 800749c:	08007423 	.word	0x08007423
 80074a0:	08007423 	.word	0x08007423
 80074a4:	08007423 	.word	0x08007423
 80074a8:	08007423 	.word	0x08007423
 80074ac:	08007517 	.word	0x08007517
 80074b0:	0800751f 	.word	0x0800751f
 80074b4:	08007527 	.word	0x08007527
 80074b8:	0800752f 	.word	0x0800752f
 80074bc:	08007537 	.word	0x08007537
 80074c0:	0800753f 	.word	0x0800753f
 80074c4:	08007547 	.word	0x08007547
 80074c8:	0800754f 	.word	0x0800754f
 80074cc:	08007423 	.word	0x08007423
 80074d0:	08007557 	.word	0x08007557
 80074d4:	0800755f 	.word	0x0800755f
 80074d8:	08007567 	.word	0x08007567
 80074dc:	0800756f 	.word	0x0800756f
 80074e0:	08007577 	.word	0x08007577
 80074e4:	0800757f 	.word	0x0800757f
 80074e8:	08007423 	.word	0x08007423
 80074ec:	08007587 	.word	0x08007587
 80074f0:	080074f7 	.word	0x080074f7
 80074f4:	4770      	bx	lr
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 80074f6:	2080      	movs	r0, #128	; 0x80
 80074f8:	f002 fa24 	bl	8009944 <system_set_exec_accessory_override_flag>
 80074fc:	e791      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 80074fe:	2020      	movs	r0, #32
 8007500:	f002 f9f2 	bl	80098e8 <system_set_exec_state_flag>
 8007504:	e78d      	b.n	8007422 <OnUsbDataRx+0x2a>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 8007506:	4b24      	ldr	r3, [pc, #144]	; (8007598 <OnUsbDataRx+0x1a0>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	069b      	lsls	r3, r3, #26
 800750c:	d589      	bpl.n	8007422 <OnUsbDataRx+0x2a>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL); 
 800750e:	2040      	movs	r0, #64	; 0x40
 8007510:	f002 f9ea 	bl	80098e8 <system_set_exec_state_flag>
 8007514:	e785      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 8007516:	2001      	movs	r0, #1
 8007518:	f002 fa0a 	bl	8009930 <system_set_exec_motion_override_flag>
 800751c:	e781      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 800751e:	2002      	movs	r0, #2
 8007520:	f002 fa06 	bl	8009930 <system_set_exec_motion_override_flag>
 8007524:	e77d      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 8007526:	2004      	movs	r0, #4
 8007528:	f002 fa02 	bl	8009930 <system_set_exec_motion_override_flag>
 800752c:	e779      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 800752e:	2008      	movs	r0, #8
 8007530:	f002 f9fe 	bl	8009930 <system_set_exec_motion_override_flag>
 8007534:	e775      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 8007536:	2010      	movs	r0, #16
 8007538:	f002 f9fa 	bl	8009930 <system_set_exec_motion_override_flag>
 800753c:	e771      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 800753e:	2020      	movs	r0, #32
 8007540:	f002 f9f6 	bl	8009930 <system_set_exec_motion_override_flag>
 8007544:	e76d      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 8007546:	2040      	movs	r0, #64	; 0x40
 8007548:	f002 f9f2 	bl	8009930 <system_set_exec_motion_override_flag>
 800754c:	e769      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 800754e:	2080      	movs	r0, #128	; 0x80
 8007550:	f002 f9ee 	bl	8009930 <system_set_exec_motion_override_flag>
 8007554:	e765      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 8007556:	2001      	movs	r0, #1
 8007558:	f002 f9f4 	bl	8009944 <system_set_exec_accessory_override_flag>
 800755c:	e761      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 800755e:	2002      	movs	r0, #2
 8007560:	f002 f9f0 	bl	8009944 <system_set_exec_accessory_override_flag>
 8007564:	e75d      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 8007566:	2004      	movs	r0, #4
 8007568:	f002 f9ec 	bl	8009944 <system_set_exec_accessory_override_flag>
 800756c:	e759      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 800756e:	2008      	movs	r0, #8
 8007570:	f002 f9e8 	bl	8009944 <system_set_exec_accessory_override_flag>
 8007574:	e755      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 8007576:	2010      	movs	r0, #16
 8007578:	f002 f9e4 	bl	8009944 <system_set_exec_accessory_override_flag>
 800757c:	e751      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 800757e:	2020      	movs	r0, #32
 8007580:	f002 f9e0 	bl	8009944 <system_set_exec_accessory_override_flag>
 8007584:	e74d      	b.n	8007422 <OnUsbDataRx+0x2a>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 8007586:	2040      	movs	r0, #64	; 0x40
 8007588:	f002 f9dc 	bl	8009944 <system_set_exec_accessory_override_flag>
 800758c:	e749      	b.n	8007422 <OnUsbDataRx+0x2a>
 800758e:	bf00      	nop
 8007590:	20000d98 	.word	0x20000d98
 8007594:	20000d99 	.word	0x20000d99
 8007598:	200013f0 	.word	0x200013f0
 800759c:	200014ac 	.word	0x200014ac

080075a0 <serial_reset_read_buffer>:

void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 80075a0:	4a02      	ldr	r2, [pc, #8]	; (80075ac <serial_reset_read_buffer+0xc>)
 80075a2:	4b03      	ldr	r3, [pc, #12]	; (80075b0 <serial_reset_read_buffer+0x10>)
 80075a4:	7812      	ldrb	r2, [r2, #0]
 80075a6:	701a      	strb	r2, [r3, #0]
}
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	20000d98 	.word	0x20000d98
 80075b0:	20000d99 	.word	0x20000d99

080075b4 <settings_store_startup_line>:
settings_t settings;


// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4604      	mov	r4, r0
 80075b8:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 80075ba:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 80075be:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 80075c2:	f7fe fc7b 	bl	8005ebc <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 80075c6:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80075ca:	4629      	mov	r1, r5
}
 80075cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 80075d0:	2250      	movs	r2, #80	; 0x50
 80075d2:	f7fa ba93 	b.w	8001afc <memcpy_to_eeprom_with_checksum>
 80075d6:	bf00      	nop

080075d8 <settings_store_build_info>:
// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 80075d8:	4601      	mov	r1, r0
 80075da:	2250      	movs	r2, #80	; 0x50
 80075dc:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 80075e0:	f7fa ba8c 	b.w	8001afc <memcpy_to_eeprom_with_checksum>

080075e4 <settings_write_coord_data>:
}


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4604      	mov	r4, r0
 80075e8:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 80075ea:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    protocol_buffer_synchronize();
 80075ee:	f7fe fc65 	bl	8005ebc <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 80075f2:	f504 7000 	add.w	r0, r4, #512	; 0x200
 80075f6:	4629      	mov	r1, r5
}
 80075f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 80075fc:	2210      	movs	r2, #16
 80075fe:	f7fa ba7d 	b.w	8001afc <memcpy_to_eeprom_with_checksum>
 8007602:	bf00      	nop

08007604 <settings_restore>:
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
}


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 8007604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007606:	4605      	mov	r5, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8007608:	07c0      	lsls	r0, r0, #31
void settings_restore(uint8_t restore_flag) {
 800760a:	b085      	sub	sp, #20
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 800760c:	d439      	bmi.n	8007682 <settings_restore+0x7e>
	#endif
// ---
    write_global_settings();
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 800760e:	07a9      	lsls	r1, r5, #30
 8007610:	d424      	bmi.n	800765c <settings_restore+0x58>
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 8007612:	076a      	lsls	r2, r5, #29
 8007614:	d40d      	bmi.n	8007632 <settings_restore+0x2e>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 8007616:	072b      	lsls	r3, r5, #28
 8007618:	d509      	bpl.n	800762e <settings_restore+0x2a>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 800761a:	2100      	movs	r1, #0
 800761c:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007620:	f7fa fa66 	bl	8001af0 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8007624:	2100      	movs	r1, #0
 8007626:	f240 30c1 	movw	r0, #961	; 0x3c1
 800762a:	f7fa fa61 	bl	8001af0 <eeprom_put_char>
  }
}
 800762e:	b005      	add	sp, #20
 8007630:	bdf0      	pop	{r4, r5, r6, r7, pc}
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8007632:	2100      	movs	r1, #0
 8007634:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007638:	f7fa fa5a 	bl	8001af0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 800763c:	2100      	movs	r1, #0
 800763e:	f240 3001 	movw	r0, #769	; 0x301
 8007642:	f7fa fa55 	bl	8001af0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8007646:	2100      	movs	r1, #0
 8007648:	f240 3051 	movw	r0, #849	; 0x351
 800764c:	f7fa fa50 	bl	8001af0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8007650:	2100      	movs	r1, #0
 8007652:	f240 3052 	movw	r0, #850	; 0x352
 8007656:	f7fa fa4b 	bl	8001af0 <eeprom_put_char>
 800765a:	e7dc      	b.n	8007616 <settings_restore+0x12>
    memset(&coord_data, 0, sizeof(coord_data));
 800765c:	2300      	movs	r3, #0
 800765e:	f44f 7400 	mov.w	r4, #512	; 0x200
 8007662:	e9cd 3300 	strd	r3, r3, [sp]
 8007666:	e9cd 3302 	strd	r3, r3, [sp, #8]
    protocol_buffer_synchronize();
 800766a:	f7fe fc27 	bl	8005ebc <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 800766e:	4620      	mov	r0, r4
 8007670:	2210      	movs	r2, #16
 8007672:	4669      	mov	r1, sp
 8007674:	3411      	adds	r4, #17
 8007676:	f7fa fa41 	bl	8001afc <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 800767a:	f5b4 7f22 	cmp.w	r4, #648	; 0x288
 800767e:	d1f4      	bne.n	800766a <settings_restore+0x66>
 8007680:	e7c7      	b.n	8007612 <settings_restore+0xe>
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007682:	230a      	movs	r3, #10
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007684:	22fa      	movs	r2, #250	; 0xfa
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007686:	4c23      	ldr	r4, [pc, #140]	; (8007714 <settings_restore+0x110>)
  eeprom_put_char(0, SETTINGS_VERSION);
 8007688:	4619      	mov	r1, r3
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 800768a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 800768e:	4b22      	ldr	r3, [pc, #136]	; (8007718 <settings_restore+0x114>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007690:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007694:	64a3      	str	r3, [r4, #72]	; 0x48
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007696:	4b21      	ldr	r3, [pc, #132]	; (800771c <settings_restore+0x118>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007698:	4a21      	ldr	r2, [pc, #132]	; (8007720 <settings_restore+0x11c>)
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 800769a:	64e3      	str	r3, [r4, #76]	; 0x4c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 800769c:	2300      	movs	r3, #0
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 800769e:	6522      	str	r2, [r4, #80]	; 0x50
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 80076a0:	4a20      	ldr	r2, [pc, #128]	; (8007724 <settings_restore+0x120>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 80076a2:	2603      	movs	r6, #3
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 80076a4:	65e2      	str	r2, [r4, #92]	; 0x5c
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 80076a6:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 80076aa:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 80076ae:	2000      	movs	r0, #0
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 80076b0:	2701      	movs	r7, #1
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 80076b2:	6563      	str	r3, [r4, #84]	; 0x54
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 80076b4:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <settings_restore+0x124>)
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 80076b6:	66a2      	str	r2, [r4, #104]	; 0x68
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 80076b8:	6623      	str	r3, [r4, #96]	; 0x60
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 80076ba:	4b1c      	ldr	r3, [pc, #112]	; (800772c <settings_restore+0x128>)
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 80076bc:	4a1c      	ldr	r2, [pc, #112]	; (8007730 <settings_restore+0x12c>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 80076be:	6323      	str	r3, [r4, #48]	; 0x30
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 80076c0:	4b1c      	ldr	r3, [pc, #112]	; (8007734 <settings_restore+0x130>)
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 80076c2:	6362      	str	r2, [r4, #52]	; 0x34
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 80076c4:	63a3      	str	r3, [r4, #56]	; 0x38
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 80076c6:	4a1c      	ldr	r2, [pc, #112]	; (8007738 <settings_restore+0x134>)
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 80076c8:	4b1c      	ldr	r3, [pc, #112]	; (800773c <settings_restore+0x138>)
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 80076ca:	60e2      	str	r2, [r4, #12]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 80076cc:	61e3      	str	r3, [r4, #28]
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 80076ce:	4a1c      	ldr	r2, [pc, #112]	; (8007740 <settings_restore+0x13c>)
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 80076d0:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <settings_restore+0x140>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 80076d2:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 80076d6:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 80076d8:	4e1b      	ldr	r6, [pc, #108]	; (8007748 <settings_restore+0x144>)
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 80076da:	4a1c      	ldr	r2, [pc, #112]	; (800774c <settings_restore+0x148>)
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 80076dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 80076de:	4b1c      	ldr	r3, [pc, #112]	; (8007750 <settings_restore+0x14c>)
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 80076e0:	f8c4 c042 	str.w	ip, [r4, #66]	; 0x42
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 80076e4:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
    settings.flags = 0;
 80076e8:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 80076ec:	6122      	str	r2, [r4, #16]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 80076ee:	6162      	str	r2, [r4, #20]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 80076f0:	61a2      	str	r2, [r4, #24]
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 80076f2:	f884 7047 	strb.w	r7, [r4, #71]	; 0x47
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 80076f6:	6026      	str	r6, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 80076f8:	6066      	str	r6, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 80076fa:	60a6      	str	r6, [r4, #8]
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 80076fc:	6223      	str	r3, [r4, #32]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 80076fe:	6263      	str	r3, [r4, #36]	; 0x24
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007700:	62a3      	str	r3, [r4, #40]	; 0x28
  eeprom_put_char(0, SETTINGS_VERSION);
 8007702:	f7fa f9f5 	bl	8001af0 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007706:	4621      	mov	r1, r4
 8007708:	4638      	mov	r0, r7
 800770a:	226c      	movs	r2, #108	; 0x6c
 800770c:	f7fa f9f6 	bl	8001afc <memcpy_to_eeprom_with_checksum>
 8007710:	e77d      	b.n	800760e <settings_restore+0xa>
 8007712:	bf00      	nop
 8007714:	200015ac 	.word	0x200015ac
 8007718:	3c23d70a 	.word	0x3c23d70a
 800771c:	3b03126f 	.word	0x3b03126f
 8007720:	461c4000 	.word	0x461c4000
 8007724:	41c80000 	.word	0x41c80000
 8007728:	43fa0000 	.word	0x43fa0000
 800772c:	c3480000 	.word	0xc3480000
 8007730:	c3960000 	.word	0xc3960000
 8007734:	c2a00000 	.word	0xc2a00000
 8007738:	45a00000 	.word	0x45a00000
 800773c:	44fa0000 	.word	0x44fa0000
 8007740:	4bdbba00 	.word	0x4bdbba00
 8007744:	c38c0000 	.word	0xc38c0000
 8007748:	43a00000 	.word	0x43a00000
 800774c:	455ac000 	.word	0x455ac000
 8007750:	4983d600 	.word	0x4983d600

08007754 <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	460e      	mov	r6, r1
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8007758:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800775c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8007760:	f500 7440 	add.w	r4, r0, #768	; 0x300
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 8007764:	4621      	mov	r1, r4
 8007766:	4630      	mov	r0, r6
 8007768:	2250      	movs	r2, #80	; 0x50
 800776a:	f7fa fa17 	bl	8001b9c <memcpy_from_eeprom_with_checksum>
 800776e:	b108      	cbz	r0, 8007774 <settings_read_startup_line+0x20>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_startup_line(n, line);
    return(false);
  }
  return(true);
 8007770:	2001      	movs	r0, #1
}
 8007772:	bd70      	pop	{r4, r5, r6, pc}
 8007774:	4605      	mov	r5, r0
    line[0] = 0; // Empty line
 8007776:	7030      	strb	r0, [r6, #0]
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 8007778:	f7fe fba0 	bl	8005ebc <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 800777c:	4620      	mov	r0, r4
 800777e:	4631      	mov	r1, r6
 8007780:	2250      	movs	r2, #80	; 0x50
 8007782:	f7fa f9bb 	bl	8001afc <memcpy_to_eeprom_with_checksum>
    return(false);
 8007786:	4628      	mov	r0, r5
}
 8007788:	bd70      	pop	{r4, r5, r6, pc}
 800778a:	bf00      	nop

0800778c <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 800778c:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 800778e:	2250      	movs	r2, #80	; 0x50
 8007790:	f44f 7170 	mov.w	r1, #960	; 0x3c0
{
 8007794:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8007796:	f7fa fa01 	bl	8001b9c <memcpy_from_eeprom_with_checksum>
 800779a:	b108      	cbz	r0, 80077a0 <settings_read_build_info+0x14>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_build_info(line);
    return(false);
  }
  return(true);
 800779c:	2001      	movs	r0, #1
}
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	4604      	mov	r4, r0
    line[0] = 0; // Empty line
 80077a2:	7028      	strb	r0, [r5, #0]
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 80077a4:	4629      	mov	r1, r5
 80077a6:	2250      	movs	r2, #80	; 0x50
 80077a8:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 80077ac:	f7fa f9a6 	bl	8001afc <memcpy_to_eeprom_with_checksum>
    return(false);
 80077b0:	4620      	mov	r0, r4
}
 80077b2:	bd38      	pop	{r3, r4, r5, pc}

080077b4 <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	460e      	mov	r6, r1
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 80077b8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80077bc:	f500 7400 	add.w	r4, r0, #512	; 0x200
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 80077c0:	4621      	mov	r1, r4
 80077c2:	4630      	mov	r0, r6
 80077c4:	2210      	movs	r2, #16
 80077c6:	f7fa f9e9 	bl	8001b9c <memcpy_from_eeprom_with_checksum>
 80077ca:	b108      	cbz	r0, 80077d0 <settings_read_coord_data+0x1c>
		#endif
// ---
		settings_write_coord_data(coord_select,coord_data);
    return(false);
  }
  return(true);
 80077cc:	2001      	movs	r0, #1
}
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
		coord_data[X_AXIS] = 0.0f;
 80077d0:	2300      	movs	r3, #0
 80077d2:	4605      	mov	r5, r0
 80077d4:	6033      	str	r3, [r6, #0]
		coord_data[Y_AXIS] = 0.0f;
 80077d6:	6073      	str	r3, [r6, #4]
		coord_data[Z_AXIS] = 0.0f;
 80077d8:	60b3      	str	r3, [r6, #8]
		coord_data[A_AXIS] = 0.0f;
 80077da:	60f3      	str	r3, [r6, #12]
    protocol_buffer_synchronize();
 80077dc:	f7fe fb6e 	bl	8005ebc <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 80077e0:	4620      	mov	r0, r4
 80077e2:	4631      	mov	r1, r6
 80077e4:	2210      	movs	r2, #16
 80077e6:	f7fa f989 	bl	8001afc <memcpy_to_eeprom_with_checksum>
    return(false);
 80077ea:	4628      	mov	r0, r5
}
 80077ec:	bd70      	pop	{r4, r5, r6, pc}
 80077ee:	bf00      	nop

080077f0 <settings_store_global_setting>:
  return(true);
}


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	460d      	mov	r5, r1
 80077f4:	4604      	mov	r4, r0
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 80077f6:	2100      	movs	r1, #0
 80077f8:	4628      	mov	r0, r5
 80077fa:	f7f9 fbfb 	bl	8000ff4 <__aeabi_fcmplt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	d16c      	bne.n	80078dc <settings_store_global_setting+0xec>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 8007802:	2c63      	cmp	r4, #99	; 0x63
 8007804:	d91e      	bls.n	8007844 <settings_store_global_setting+0x54>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 8007806:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
 800780a:	b2db      	uxtb	r3, r3
    uint8_t set_idx = 0;
    while (set_idx < AXIS_N_SETTINGS) {
      if (parameter < N_AXIS) {
 800780c:	2b03      	cmp	r3, #3
 800780e:	f240 8109 	bls.w	8007a24 <settings_store_global_setting+0x234>
        }
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
      } else {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007812:	2b09      	cmp	r3, #9
 8007814:	d914      	bls.n	8007840 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007816:	f1a4 036e 	sub.w	r3, r4, #110	; 0x6e
 800781a:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 800781c:	2b03      	cmp	r3, #3
 800781e:	f240 8105 	bls.w	8007a2c <settings_store_global_setting+0x23c>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007822:	2b09      	cmp	r3, #9
 8007824:	d90c      	bls.n	8007840 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007826:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 800782a:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 800782c:	2b03      	cmp	r3, #3
 800782e:	f240 8102 	bls.w	8007a36 <settings_store_global_setting+0x246>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007832:	2b09      	cmp	r3, #9
 8007834:	d904      	bls.n	8007840 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007836:	347e      	adds	r4, #126	; 0x7e
 8007838:	b2e4      	uxtb	r4, r4
      if (parameter < N_AXIS) {
 800783a:	2c03      	cmp	r4, #3
 800783c:	f240 8105 	bls.w	8007a4a <settings_store_global_setting+0x25a>
        #else
				return(STATUS_SETTING_DISABLED_LASER);
        #endif
        break;
      default:
        return(STATUS_INVALID_STATEMENT);
 8007840:	2003      	movs	r0, #3
    }
  }
  write_global_settings();
  return(STATUS_OK);
}
 8007842:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t int_value = truncf(value);
 8007844:	4628      	mov	r0, r5
 8007846:	f7f9 fc39 	bl	80010bc <__aeabi_f2uiz>
 800784a:	b2c0      	uxtb	r0, r0
    switch(parameter) {
 800784c:	2c20      	cmp	r4, #32
 800784e:	d8f7      	bhi.n	8007840 <settings_store_global_setting+0x50>
 8007850:	a301      	add	r3, pc, #4	; (adr r3, 8007858 <settings_store_global_setting+0x68>)
 8007852:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8007856:	bf00      	nop
 8007858:	0800790b 	.word	0x0800790b
 800785c:	08007919 	.word	0x08007919
 8007860:	08007943 	.word	0x08007943
 8007864:	08007921 	.word	0x08007921
 8007868:	0800792d 	.word	0x0800792d
 800786c:	0800794f 	.word	0x0800794f
 8007870:	08007965 	.word	0x08007965
 8007874:	08007841 	.word	0x08007841
 8007878:	08007841 	.word	0x08007841
 800787c:	08007841 	.word	0x08007841
 8007880:	080079d1 	.word	0x080079d1
 8007884:	080079d9 	.word	0x080079d9
 8007888:	08007995 	.word	0x08007995
 800788c:	08007a0f 	.word	0x08007a0f
 8007890:	08007841 	.word	0x08007841
 8007894:	08007841 	.word	0x08007841
 8007898:	08007841 	.word	0x08007841
 800789c:	08007841 	.word	0x08007841
 80078a0:	08007841 	.word	0x08007841
 80078a4:	08007841 	.word	0x08007841
 80078a8:	080079df 	.word	0x080079df
 80078ac:	080079f7 	.word	0x080079f7
 80078b0:	0800797f 	.word	0x0800797f
 80078b4:	080079c9 	.word	0x080079c9
 80078b8:	080079bd 	.word	0x080079bd
 80078bc:	080079c3 	.word	0x080079c3
 80078c0:	0800799b 	.word	0x0800799b
 80078c4:	080079a3 	.word	0x080079a3
 80078c8:	08007841 	.word	0x08007841
 80078cc:	08007841 	.word	0x08007841
 80078d0:	080079a9 	.word	0x080079a9
 80078d4:	080079b3 	.word	0x080079b3
 80078d8:	080078e1 	.word	0x080078e1
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 80078dc:	2004      	movs	r0, #4
}
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	4a70      	ldr	r2, [pc, #448]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 80078e2:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 80078e6:	2800      	cmp	r0, #0
 80078e8:	f000 80b6 	beq.w	8007a58 <settings_store_global_setting+0x268>
 80078ec:	f043 0302 	orr.w	r3, r3, #2
 80078f0:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  eeprom_put_char(0, SETTINGS_VERSION);
 80078f4:	210a      	movs	r1, #10
 80078f6:	2000      	movs	r0, #0
 80078f8:	f7fa f8fa 	bl	8001af0 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 80078fc:	226c      	movs	r2, #108	; 0x6c
 80078fe:	4969      	ldr	r1, [pc, #420]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007900:	2001      	movs	r0, #1
 8007902:	f7fa f8fb 	bl	8001afc <memcpy_to_eeprom_with_checksum>
  return(STATUS_OK);
 8007906:	2000      	movs	r0, #0
}
 8007908:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 800790a:	2802      	cmp	r0, #2
 800790c:	f240 80c6 	bls.w	8007a9c <settings_store_global_setting+0x2ac>
        settings.pulse_microseconds = int_value; break;
 8007910:	4b64      	ldr	r3, [pc, #400]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007912:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 8007916:	e7ed      	b.n	80078f4 <settings_store_global_setting+0x104>
      case 1: settings.stepper_idle_lock_time = int_value; break;
 8007918:	4b62      	ldr	r3, [pc, #392]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 800791a:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
 800791e:	e7e9      	b.n	80078f4 <settings_store_global_setting+0x104>
        settings.dir_invert_mask = int_value;
 8007920:	4b60      	ldr	r3, [pc, #384]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007922:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007926:	f000 fda9 	bl	800847c <st_generate_step_dir_invert_masks>
        break;
 800792a:	e7e3      	b.n	80078f4 <settings_store_global_setting+0x104>
 800792c:	4a5d      	ldr	r2, [pc, #372]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 800792e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 8007932:	2800      	cmp	r0, #0
 8007934:	f000 80a0 	beq.w	8007a78 <settings_store_global_setting+0x288>
 8007938:	f043 0304 	orr.w	r3, r3, #4
 800793c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007940:	e7d8      	b.n	80078f4 <settings_store_global_setting+0x104>
        settings.step_invert_mask = int_value;
 8007942:	4b58      	ldr	r3, [pc, #352]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007944:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007948:	f000 fd98 	bl	800847c <st_generate_step_dir_invert_masks>
        break;
 800794c:	e7d2      	b.n	80078f4 <settings_store_global_setting+0x104>
 800794e:	4a55      	ldr	r2, [pc, #340]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007950:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007954:	2800      	cmp	r0, #0
 8007956:	f000 808a 	beq.w	8007a6e <settings_store_global_setting+0x27e>
 800795a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800795e:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007962:	e7c7      	b.n	80078f4 <settings_store_global_setting+0x104>
 8007964:	4b4f      	ldr	r3, [pc, #316]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007966:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 800796a:	2800      	cmp	r0, #0
 800796c:	d07c      	beq.n	8007a68 <settings_store_global_setting+0x278>
 800796e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        probe_configure_invert_mask(false);
 8007972:	2000      	movs	r0, #0
 8007974:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007978:	f7fd fb62 	bl	8005040 <probe_configure_invert_mask>
        break;
 800797c:	e7ba      	b.n	80078f4 <settings_store_global_setting+0x104>
 800797e:	4a49      	ldr	r2, [pc, #292]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007980:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 8007984:	2800      	cmp	r0, #0
 8007986:	f000 8081 	beq.w	8007a8c <settings_store_global_setting+0x29c>
 800798a:	f043 0310 	orr.w	r3, r3, #16
 800798e:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007992:	e7af      	b.n	80078f4 <settings_store_global_setting+0x104>
      case 12: settings.arc_tolerance = value; break;
 8007994:	4b43      	ldr	r3, [pc, #268]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007996:	64dd      	str	r5, [r3, #76]	; 0x4c
 8007998:	e7ac      	b.n	80078f4 <settings_store_global_setting+0x104>
      case 26: settings.homing_debounce_delay = int_value; break;
 800799a:	4b42      	ldr	r3, [pc, #264]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 800799c:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
 80079a0:	e7a8      	b.n	80078f4 <settings_store_global_setting+0x104>
      case 27: settings.homing_pulloff = value; break;
 80079a2:	4b40      	ldr	r3, [pc, #256]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 80079a4:	669d      	str	r5, [r3, #104]	; 0x68
 80079a6:	e7a5      	b.n	80078f4 <settings_store_global_setting+0x104>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 80079a8:	4b3e      	ldr	r3, [pc, #248]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 80079aa:	651d      	str	r5, [r3, #80]	; 0x50
 80079ac:	f000 f92e 	bl	8007c0c <spindle_init>
 80079b0:	e7a0      	b.n	80078f4 <settings_store_global_setting+0x104>
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 80079b2:	4b3c      	ldr	r3, [pc, #240]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 80079b4:	655d      	str	r5, [r3, #84]	; 0x54
 80079b6:	f000 f929 	bl	8007c0c <spindle_init>
 80079ba:	e79b      	b.n	80078f4 <settings_store_global_setting+0x104>
      case 24: settings.homing_feed_rate = value; break;
 80079bc:	4b39      	ldr	r3, [pc, #228]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 80079be:	65dd      	str	r5, [r3, #92]	; 0x5c
 80079c0:	e798      	b.n	80078f4 <settings_store_global_setting+0x104>
      case 25: settings.homing_seek_rate = value; break;
 80079c2:	4b38      	ldr	r3, [pc, #224]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 80079c4:	661d      	str	r5, [r3, #96]	; 0x60
 80079c6:	e795      	b.n	80078f4 <settings_store_global_setting+0x104>
      case 23: settings.homing_dir_mask = int_value; break;
 80079c8:	4b36      	ldr	r3, [pc, #216]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 80079ca:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
 80079ce:	e791      	b.n	80078f4 <settings_store_global_setting+0x104>
      case 10: settings.status_report_mask = int_value; break;
 80079d0:	4b34      	ldr	r3, [pc, #208]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 80079d2:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
 80079d6:	e78d      	b.n	80078f4 <settings_store_global_setting+0x104>
      case 11: settings.junction_deviation = value; break;
 80079d8:	4b32      	ldr	r3, [pc, #200]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 80079da:	649d      	str	r5, [r3, #72]	; 0x48
 80079dc:	e78a      	b.n	80078f4 <settings_store_global_setting+0x104>
 80079de:	4a31      	ldr	r2, [pc, #196]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 80079e0:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
        if (int_value) {
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d04c      	beq.n	8007a82 <settings_store_global_setting+0x292>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 80079e8:	06d9      	lsls	r1, r3, #27
 80079ea:	d559      	bpl.n	8007aa0 <settings_store_global_setting+0x2b0>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 80079ec:	f043 0320 	orr.w	r3, r3, #32
 80079f0:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 80079f4:	e77e      	b.n	80078f4 <settings_store_global_setting+0x104>
 80079f6:	4b2b      	ldr	r3, [pc, #172]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 80079f8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d04a      	beq.n	8007a96 <settings_store_global_setting+0x2a6>
 8007a00:	f042 0208 	orr.w	r2, r2, #8
 8007a04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 8007a08:	f7fb faa8 	bl	8002f5c <limits_init>
        break;
 8007a0c:	e772      	b.n	80078f4 <settings_store_global_setting+0x104>
 8007a0e:	4b25      	ldr	r3, [pc, #148]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007a10:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 8007a14:	b328      	cbz	r0, 8007a62 <settings_store_global_setting+0x272>
 8007a16:	f042 0201 	orr.w	r2, r2, #1
 8007a1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 8007a1e:	f001 fefb 	bl	8009818 <system_flag_wco_change>
        break;
 8007a22:	e767      	b.n	80078f4 <settings_store_global_setting+0x104>
            settings.steps_per_mm[parameter] = value;
 8007a24:	4a1f      	ldr	r2, [pc, #124]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007a26:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 8007a2a:	e763      	b.n	80078f4 <settings_store_global_setting+0x104>
            settings.max_rate[parameter] = value;
 8007a2c:	4a1d      	ldr	r2, [pc, #116]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007a2e:	3304      	adds	r3, #4
 8007a30:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 8007a34:	e75e      	b.n	80078f4 <settings_store_global_setting+0x104>
          case 2: settings.acceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 8007a36:	4628      	mov	r0, r5
 8007a38:	491b      	ldr	r1, [pc, #108]	; (8007aa8 <settings_store_global_setting+0x2b8>)
 8007a3a:	f103 0408 	add.w	r4, r3, #8
 8007a3e:	f7f9 f93b 	bl	8000cb8 <__aeabi_fmul>
 8007a42:	4b18      	ldr	r3, [pc, #96]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007a44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007a48:	e754      	b.n	80078f4 <settings_store_global_setting+0x104>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 8007a4a:	4b16      	ldr	r3, [pc, #88]	; (8007aa4 <settings_store_global_setting+0x2b4>)
 8007a4c:	340c      	adds	r4, #12
 8007a4e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8007a52:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 8007a56:	e74d      	b.n	80078f4 <settings_store_global_setting+0x104>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8007a58:	f023 0302 	bic.w	r3, r3, #2
 8007a5c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007a60:	e748      	b.n	80078f4 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8007a62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a66:	e7d8      	b.n	8007a1a <settings_store_global_setting+0x22a>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8007a68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007a6c:	e781      	b.n	8007972 <settings_store_global_setting+0x182>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 8007a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a72:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007a76:	e73d      	b.n	80078f4 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8007a78:	f023 0304 	bic.w	r3, r3, #4
 8007a7c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007a80:	e738      	b.n	80078f4 <settings_store_global_setting+0x104>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 8007a82:	f023 0320 	bic.w	r3, r3, #32
 8007a86:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007a8a:	e733      	b.n	80078f4 <settings_store_global_setting+0x104>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 8007a8c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007a90:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007a94:	e72e      	b.n	80078f4 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 8007a96:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8007a9a:	e7b3      	b.n	8007a04 <settings_store_global_setting+0x214>
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8007a9c:	2006      	movs	r0, #6
}
 8007a9e:	bd38      	pop	{r3, r4, r5, pc}
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8007aa0:	200a      	movs	r0, #10
}
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	200015ac 	.word	0x200015ac
 8007aa8:	45610000 	.word	0x45610000

08007aac <settings_init>:


// Initialize the config subsystem
void settings_init() {
 8007aac:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t version = eeprom_get_char(0);
 8007aae:	2000      	movs	r0, #0
void settings_init() {
 8007ab0:	b085      	sub	sp, #20
  uint8_t version = eeprom_get_char(0);
 8007ab2:	f7fa f817 	bl	8001ae4 <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 8007ab6:	280a      	cmp	r0, #10
 8007ab8:	d07d      	beq.n	8007bb6 <settings_init+0x10a>
  if(!read_global_settings()) {
    report_status_message(STATUS_SETTING_READ_FAIL);
 8007aba:	2007      	movs	r0, #7
 8007abc:	f7fe fcde 	bl	800647c <report_status_message>
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007ac0:	230a      	movs	r3, #10
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007ac2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007ac6:	4c41      	ldr	r4, [pc, #260]	; (8007bcc <settings_init+0x120>)
  eeprom_put_char(0, SETTINGS_VERSION);
 8007ac8:	4619      	mov	r1, r3
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007aca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007ace:	f8c4 2042 	str.w	r2, [r4, #66]	; 0x42
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007ad2:	4b3f      	ldr	r3, [pc, #252]	; (8007bd0 <settings_init+0x124>)
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007ad4:	4a3f      	ldr	r2, [pc, #252]	; (8007bd4 <settings_init+0x128>)
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007ad6:	64e3      	str	r3, [r4, #76]	; 0x4c
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007ad8:	64a2      	str	r2, [r4, #72]	; 0x48
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007ada:	2300      	movs	r3, #0
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007adc:	4a3e      	ldr	r2, [pc, #248]	; (8007bd8 <settings_init+0x12c>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007ade:	20fa      	movs	r0, #250	; 0xfa
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007ae0:	6522      	str	r2, [r4, #80]	; 0x50
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007ae2:	4a3e      	ldr	r2, [pc, #248]	; (8007bdc <settings_init+0x130>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007ae4:	2603      	movs	r6, #3
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007ae6:	65e2      	str	r2, [r4, #92]	; 0x5c
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007ae8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007aec:	2500      	movs	r5, #0
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007aee:	2701      	movs	r7, #1
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007af0:	6563      	str	r3, [r4, #84]	; 0x54
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007af2:	4b3b      	ldr	r3, [pc, #236]	; (8007be0 <settings_init+0x134>)
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007af4:	66a2      	str	r2, [r4, #104]	; 0x68
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007af6:	6623      	str	r3, [r4, #96]	; 0x60
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007af8:	4b3a      	ldr	r3, [pc, #232]	; (8007be4 <settings_init+0x138>)
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007afa:	4a3b      	ldr	r2, [pc, #236]	; (8007be8 <settings_init+0x13c>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007afc:	6323      	str	r3, [r4, #48]	; 0x30
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007afe:	4b3b      	ldr	r3, [pc, #236]	; (8007bec <settings_init+0x140>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007b00:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007b04:	483a      	ldr	r0, [pc, #232]	; (8007bf0 <settings_init+0x144>)
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007b06:	63a2      	str	r2, [r4, #56]	; 0x38
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007b08:	60e3      	str	r3, [r4, #12]
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8007b0a:	4a3a      	ldr	r2, [pc, #232]	; (8007bf4 <settings_init+0x148>)
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8007b0c:	4b3a      	ldr	r3, [pc, #232]	; (8007bf8 <settings_init+0x14c>)
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007b0e:	6360      	str	r0, [r4, #52]	; 0x34
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 8007b10:	483a      	ldr	r0, [pc, #232]	; (8007bfc <settings_init+0x150>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007b12:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8007b16:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007b18:	4e39      	ldr	r6, [pc, #228]	; (8007c00 <settings_init+0x154>)
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007b1a:	4a3a      	ldr	r2, [pc, #232]	; (8007c04 <settings_init+0x158>)
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8007b1c:	63e3      	str	r3, [r4, #60]	; 0x3c
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007b1e:	4b3a      	ldr	r3, [pc, #232]	; (8007c08 <settings_init+0x15c>)
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 8007b20:	61e0      	str	r0, [r4, #28]
  eeprom_put_char(0, SETTINGS_VERSION);
 8007b22:	4628      	mov	r0, r5
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007b24:	6122      	str	r2, [r4, #16]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007b26:	6162      	str	r2, [r4, #20]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8007b28:	61a2      	str	r2, [r4, #24]
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007b2a:	6223      	str	r3, [r4, #32]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007b2c:	6263      	str	r3, [r4, #36]	; 0x24
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007b2e:	62a3      	str	r3, [r4, #40]	; 0x28
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007b30:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
    settings.flags = 0;
 8007b34:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007b38:	f884 7047 	strb.w	r7, [r4, #71]	; 0x47
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007b3c:	6026      	str	r6, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007b3e:	6066      	str	r6, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007b40:	60a6      	str	r6, [r4, #8]
  eeprom_put_char(0, SETTINGS_VERSION);
 8007b42:	f7f9 ffd5 	bl	8001af0 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007b46:	4621      	mov	r1, r4
    memset(&coord_data, 0, sizeof(coord_data));
 8007b48:	f44f 7400 	mov.w	r4, #512	; 0x200
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007b4c:	4638      	mov	r0, r7
 8007b4e:	226c      	movs	r2, #108	; 0x6c
 8007b50:	f7f9 ffd4 	bl	8001afc <memcpy_to_eeprom_with_checksum>
    memset(&coord_data, 0, sizeof(coord_data));
 8007b54:	e9cd 5500 	strd	r5, r5, [sp]
 8007b58:	e9cd 5502 	strd	r5, r5, [sp, #8]
    protocol_buffer_synchronize();
 8007b5c:	f7fe f9ae 	bl	8005ebc <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007b60:	4620      	mov	r0, r4
 8007b62:	2210      	movs	r2, #16
 8007b64:	4669      	mov	r1, sp
 8007b66:	3411      	adds	r4, #17
 8007b68:	f7f9 ffc8 	bl	8001afc <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8007b6c:	f5b4 7f22 	cmp.w	r4, #648	; 0x288
 8007b70:	d1f4      	bne.n	8007b5c <settings_init+0xb0>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8007b72:	2100      	movs	r1, #0
 8007b74:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007b78:	f7f9 ffba 	bl	8001af0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	f240 3001 	movw	r0, #769	; 0x301
 8007b82:	f7f9 ffb5 	bl	8001af0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8007b86:	2100      	movs	r1, #0
 8007b88:	f240 3051 	movw	r0, #849	; 0x351
 8007b8c:	f7f9 ffb0 	bl	8001af0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8007b90:	2100      	movs	r1, #0
 8007b92:	f240 3052 	movw	r0, #850	; 0x352
 8007b96:	f7f9 ffab 	bl	8001af0 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007ba0:	f7f9 ffa6 	bl	8001af0 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	f240 30c1 	movw	r0, #961	; 0x3c1
 8007baa:	f7f9 ffa1 	bl	8001af0 <eeprom_put_char>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
    report_grbl_settings();
 8007bae:	f7fe fcfd 	bl	80065ac <report_grbl_settings>
  }
}
 8007bb2:	b005      	add	sp, #20
 8007bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 8007bb6:	226c      	movs	r2, #108	; 0x6c
 8007bb8:	2101      	movs	r1, #1
 8007bba:	4804      	ldr	r0, [pc, #16]	; (8007bcc <settings_init+0x120>)
 8007bbc:	f7f9 ffee 	bl	8001b9c <memcpy_from_eeprom_with_checksum>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f43f af7a 	beq.w	8007aba <settings_init+0xe>
}
 8007bc6:	b005      	add	sp, #20
 8007bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	200015ac 	.word	0x200015ac
 8007bd0:	3b03126f 	.word	0x3b03126f
 8007bd4:	3c23d70a 	.word	0x3c23d70a
 8007bd8:	461c4000 	.word	0x461c4000
 8007bdc:	41c80000 	.word	0x41c80000
 8007be0:	43fa0000 	.word	0x43fa0000
 8007be4:	c3480000 	.word	0xc3480000
 8007be8:	c2a00000 	.word	0xc2a00000
 8007bec:	45a00000 	.word	0x45a00000
 8007bf0:	c3960000 	.word	0xc3960000
 8007bf4:	4bdbba00 	.word	0x4bdbba00
 8007bf8:	c38c0000 	.word	0xc38c0000
 8007bfc:	44fa0000 	.word	0x44fa0000
 8007c00:	43a00000 	.word	0x43a00000
 8007c04:	455ac000 	.word	0x455ac000
 8007c08:	4983d600 	.word	0x4983d600

08007c0c <spindle_init>:
  static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
#endif


void spindle_init()
{
 8007c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef VARIABLE_SPINDLE
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007c10:	4b41      	ldr	r3, [pc, #260]	; (8007d18 <spindle_init+0x10c>)
{
 8007c12:	b088      	sub	sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007c14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c16:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007c18:	f7f8 ff44 	bl	8000aa4 <__aeabi_fsub>
 8007c1c:	4601      	mov	r1, r0
 8007c1e:	483f      	ldr	r0, [pc, #252]	; (8007d1c <spindle_init+0x110>)
 8007c20:	f7f9 f8fe 	bl	8000e20 <__aeabi_fdiv>
#if defined (STM32F103C8)
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007c24:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007c26:	f04f 0803 	mov.w	r8, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007c2a:	2510      	movs	r5, #16
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);

#ifdef USE_SPINDLE_ENABLE_PIN
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8007c2c:	f04f 0902 	mov.w	r9, #2
#endif

#ifdef VARIABLE_SPINDLE
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
  TIM_TimeBaseInitTypeDef timerInitStructure;
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007c30:	2400      	movs	r4, #0
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007c32:	4b3b      	ldr	r3, [pc, #236]	; (8007d20 <spindle_init+0x114>)
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007c34:	f10d 0a20 	add.w	sl, sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007c38:	6018      	str	r0, [r3, #0]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007c3a:	4f3a      	ldr	r7, [pc, #232]	; (8007d24 <spindle_init+0x118>)
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 8007c3c:	4631      	mov	r1, r6
 8007c3e:	2008      	movs	r0, #8
 8007c40:	f7f9 fda8 	bl	8001794 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007c44:	f82a 6d20 	strh.w	r6, [sl, #-32]!
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007c48:	4651      	mov	r1, sl
 8007c4a:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007c4c:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007c50:	f88d 8002 	strb.w	r8, [sp, #2]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007c54:	f7f9 fbb2 	bl	80013bc <GPIO_Init>
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007c58:	4651      	mov	r1, sl
 8007c5a:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007c5c:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007c60:	f88d 8002 	strb.w	r8, [sp, #2]
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8007c64:	f8ad 9000 	strh.w	r9, [sp]
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007c68:	f7f9 fba8 	bl	80013bc <GPIO_Init>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c72:	f7f9 fd8f 	bl	8001794 <RCC_APB2PeriphClockCmd>
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007c76:	a801      	add	r0, sp, #4
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007c78:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007c7c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007c80:	f7f9 fe3a 	bl	80018f8 <TIM_TimeBaseStructInit>
    timerInitStructure.TIM_Prescaler = F_CPU / TIM_FREQUENCY - 1; 
  #else
    timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; 
  #endif
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8007c84:	f240 32e7 	movw	r2, #999	; 0x3e7
    timerInitStructure.TIM_Prescaler = F_CPU / TIM_FREQUENCY - 1; 
 8007c88:	4b27      	ldr	r3, [pc, #156]	; (8007d28 <spindle_init+0x11c>)
 8007c8a:	4828      	ldr	r0, [pc, #160]	; (8007d2c <spindle_init+0x120>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  timerInitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007c8e:	4d28      	ldr	r5, [pc, #160]	; (8007d30 <spindle_init+0x124>)
    timerInitStructure.TIM_Prescaler = F_CPU / TIM_FREQUENCY - 1; 
 8007c90:	fba0 0303 	umull	r0, r3, r0, r3
 8007c94:	0c9b      	lsrs	r3, r3, #18
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007c96:	a901      	add	r1, sp, #4
    timerInitStructure.TIM_Prescaler = F_CPU / TIM_FREQUENCY - 1; 
 8007c98:	3b01      	subs	r3, #1
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007c9a:	4628      	mov	r0, r5
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8007c9c:	f8ad 2008 	strh.w	r2, [sp, #8]
    timerInitStructure.TIM_Prescaler = F_CPU / TIM_FREQUENCY - 1; 
 8007ca0:	f8ad 3004 	strh.w	r3, [sp, #4]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8007ca4:	f8ad 4006 	strh.w	r4, [sp, #6]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8007ca8:	f8ad 400a 	strh.w	r4, [sp, #10]
  timerInitStructure.TIM_RepetitionCounter = 0;
 8007cac:	f88d 400c 	strb.w	r4, [sp, #12]
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007cb0:	f7f9 fd88 	bl	80017c4 <TIM_TimeBaseInit>

  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8007cb4:	4b1f      	ldr	r3, [pc, #124]	; (8007d34 <spindle_init+0x128>)
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;

  TIM_OC1Init(TIM1, &outputChannelInit);
 8007cb6:	a904      	add	r1, sp, #16
 8007cb8:	4628      	mov	r0, r5
  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8007cba:	9304      	str	r3, [sp, #16]
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
 8007cbc:	f8cd 4016 	str.w	r4, [sp, #22]
  TIM_OC1Init(TIM1, &outputChannelInit);
 8007cc0:	f7f9 fdd6 	bl	8001870 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	2108      	movs	r1, #8
 8007cc8:	f7f9 fe42 	bl	8001950 <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f7f9 fe26 	bl	8001920 <TIM_CtrlPWMOutputs>
  TIM_Cmd(TIM1, ENABLE);
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f7f9 fe16 	bl	8001908 <TIM_Cmd>

  RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
 8007cdc:	4631      	mov	r1, r6
 8007cde:	2004      	movs	r0, #4
 8007ce0:	f7f9 fd58 	bl	8001794 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8007ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8007ce8:	2218      	movs	r2, #24
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8007cea:	4651      	mov	r1, sl
 8007cec:	4812      	ldr	r0, [pc, #72]	; (8007d38 <spindle_init+0x12c>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8007cee:	f88d 2003 	strb.w	r2, [sp, #3]
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8007cf2:	f8ad 3000 	strh.w	r3, [sp]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007cf6:	f88d 8002 	strb.w	r8, [sp, #2]
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8007cfa:	f7f9 fb5f 	bl	80013bc <GPIO_Init>
#endif
#endif

#if defined (STM32F103C8)
	#ifdef VARIABLE_SPINDLE
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4628      	mov	r0, r5
 8007d02:	f7f9 fe0d 	bl	8001920 <TIM_CtrlPWMOutputs>
	#endif
    #ifdef USE_SPINDLE_ENABLE_PIN
      #ifdef INVERT_SPINDLE_ENABLE_PIN
        SetSpindleEnablebit();
      #else
        ResetSpindleEnablebit();
 8007d06:	4622      	mov	r2, r4
 8007d08:	4649      	mov	r1, r9
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	f7f9 fce8 	bl	80016e0 <GPIO_WriteBit>
}
 8007d10:	b008      	add	sp, #32
 8007d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d16:	bf00      	nop
 8007d18:	200015ac 	.word	0x200015ac
 8007d1c:	4479c000 	.word	0x4479c000
 8007d20:	20000d9c 	.word	0x20000d9c
 8007d24:	40010c00 	.word	0x40010c00
 8007d28:	20000004 	.word	0x20000004
 8007d2c:	431bde83 	.word	0x431bde83
 8007d30:	40012c00 	.word	0x40012c00
 8007d34:	00010060 	.word	0x00010060
 8007d38:	40010800 	.word	0x40010800

08007d3c <spindle_get_state>:
{
 8007d3c:	b508      	push	{r3, lr}
  pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
 8007d3e:	4806      	ldr	r0, [pc, #24]	; (8007d58 <spindle_get_state+0x1c>)
 8007d40:	f7f9 fcc2 	bl	80016c8 <GPIO_ReadInputData>
 8007d44:	b2c3      	uxtb	r3, r0
		  if (bit_istrue(pin,(1<<SPINDLE_ENABLE_BIT)))
 8007d46:	f013 0002 	ands.w	r0, r3, #2
 8007d4a:	d004      	beq.n	8007d56 <spindle_get_state+0x1a>
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
 8007d4c:	f013 0f01 	tst.w	r3, #1
		  else { return(SPINDLE_STATE_CW); }
 8007d50:	bf14      	ite	ne
 8007d52:	2002      	movne	r0, #2
 8007d54:	2001      	moveq	r0, #1
}
 8007d56:	bd08      	pop	{r3, pc}
 8007d58:	40010c00 	.word	0x40010c00

08007d5c <spindle_stop>:
{
 8007d5c:	b508      	push	{r3, lr}
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4804      	ldr	r0, [pc, #16]	; (8007d74 <spindle_stop+0x18>)
 8007d62:	f7f9 fddd 	bl	8001920 <TIM_CtrlPWMOutputs>
      #endif
    #endif
#endif
}
 8007d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ResetSpindleEnablebit();
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2102      	movs	r1, #2
 8007d6e:	4802      	ldr	r0, [pc, #8]	; (8007d78 <spindle_stop+0x1c>)
 8007d70:	f7f9 bcb6 	b.w	80016e0 <GPIO_WriteBit>
 8007d74:	40012c00 	.word	0x40012c00
 8007d78:	40010c00 	.word	0x40010c00

08007d7c <spindle_set_speed>:

#ifdef VARIABLE_SPINDLE
  // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
  // and stepper ISR. Keep routine small and efficient.
  void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
  {
 8007d7c:	4601      	mov	r1, r0
#ifdef AVRTARGET
		SPINDLE_OCR_REGISTER = pwm_value; // Set PWM output level.
#endif
#if defined (STM32F103C8)
		TIM1->CCR1 = pwm_value;
 8007d7e:	4803      	ldr	r0, [pc, #12]	; (8007d8c <spindle_set_speed+0x10>)
 8007d80:	8681      	strh	r1, [r0, #52]	; 0x34
					SetSpindleEnablebit();
				  #endif
				#endif
		 }
		#else
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007d82:	b101      	cbz	r1, 8007d86 <spindle_set_speed+0xa>
			} else {
			#ifdef AVRTARGET
      SPINDLE_TCCRA_REGISTER |= (1<<SPINDLE_COMB_BIT); // Ensure PWM output is enabled.
			#endif
			#if defined (STM32F103C8)
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007d84:	2101      	movs	r1, #1
 8007d86:	f7f9 bdcb 	b.w	8001920 <TIM_CtrlPWMOutputs>
 8007d8a:	bf00      	nop
 8007d8c:	40012c00 	.word	0x40012c00

08007d90 <spindle_compute_pwm_value>:
		return(pwm_value);
	}
  #else
	// Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
	SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
	{
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		SPINDLE_PWM_TYPE pwm_value;
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
																					 // Calculate PWM register value based on rpm max/min settings and programmed rpm.
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007d92:	4b1f      	ldr	r3, [pc, #124]	; (8007e10 <spindle_compute_pwm_value+0x80>)
	{
 8007d94:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007d96:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8007d98:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	f7f9 f93d 	bl	800101c <__aeabi_fcmpge>
 8007da2:	4e1c      	ldr	r6, [pc, #112]	; (8007e14 <spindle_compute_pwm_value+0x84>)
 8007da4:	b9e0      	cbnz	r0, 8007de0 <spindle_compute_pwm_value+0x50>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007da6:	7ab0      	ldrb	r0, [r6, #10]
 8007da8:	f7f8 ff32 	bl	8000c10 <__aeabi_i2f>
 8007dac:	4639      	mov	r1, r7
 8007dae:	f7f8 ff83 	bl	8000cb8 <__aeabi_fmul>
 8007db2:	4919      	ldr	r1, [pc, #100]	; (8007e18 <spindle_compute_pwm_value+0x88>)
 8007db4:	f7f8 ff80 	bl	8000cb8 <__aeabi_fmul>
 8007db8:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007dba:	4601      	mov	r1, r0
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f7f9 f923 	bl	8001008 <__aeabi_fcmple>
 8007dc2:	b968      	cbnz	r0, 8007de0 <spindle_compute_pwm_value+0x50>
			// No PWM range possible. Set simple on/off spindle control pin state.
			sys.spindle_speed = settings.rpm_max;
			pwm_value = SPINDLE_PWM_MAX_VALUE;
		}
		else if (rpm <= settings.rpm_min) {
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f7f9 f928 	bl	800101c <__aeabi_fcmpge>
 8007dcc:	b160      	cbz	r0, 8007de8 <spindle_compute_pwm_value+0x58>
			if (rpm == 0.0f) { // S0 disables spindle
 8007dce:	2400      	movs	r4, #0
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	f7f9 f904 	bl	8000fe0 <__aeabi_fcmpeq>
 8007dd8:	b1b0      	cbz	r0, 8007e08 <spindle_compute_pwm_value+0x78>
				sys.spindle_speed = 0.0f;
 8007dda:	6134      	str	r4, [r6, #16]
				pwm_value = SPINDLE_PWM_OFF_VALUE;
 8007ddc:	2000      	movs	r0, #0
			// NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
			sys.spindle_speed = rpm;
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
		}
		return(pwm_value);
	}
 8007dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			sys.spindle_speed = settings.rpm_max;
 8007de0:	6134      	str	r4, [r6, #16]
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007de2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	}
 8007de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007de8:	4629      	mov	r1, r5
			sys.spindle_speed = rpm;
 8007dea:	6137      	str	r7, [r6, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007dec:	4638      	mov	r0, r7
 8007dee:	f7f8 fe59 	bl	8000aa4 <__aeabi_fsub>
 8007df2:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <spindle_compute_pwm_value+0x8c>)
 8007df4:	6819      	ldr	r1, [r3, #0]
 8007df6:	f7f8 ff5f 	bl	8000cb8 <__aeabi_fmul>
 8007dfa:	f003 f949 	bl	800b090 <floorf>
 8007dfe:	f7f9 f95d 	bl	80010bc <__aeabi_f2uiz>
 8007e02:	3001      	adds	r0, #1
 8007e04:	b280      	uxth	r0, r0
	}
 8007e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				sys.spindle_speed = settings.rpm_min;
 8007e08:	6135      	str	r5, [r6, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8007e0a:	2001      	movs	r0, #1
	}
 8007e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	200015ac 	.word	0x200015ac
 8007e14:	200013f0 	.word	0x200013f0
 8007e18:	3c23d70a 	.word	0x3c23d70a
 8007e1c:	20000d9c 	.word	0x20000d9c

08007e20 <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sys.abort) { return; } // Block during abort.
 8007e22:	4c40      	ldr	r4, [pc, #256]	; (8007f24 <spindle_set_state+0x104>)
 8007e24:	7862      	ldrb	r2, [r4, #1]
 8007e26:	2a00      	cmp	r2, #0
 8007e28:	d144      	bne.n	8007eb4 <spindle_set_state+0x94>
 8007e2a:	4605      	mov	r5, r0
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d034      	beq.n	8007e9a <spindle_set_state+0x7a>
    #endif
    spindle_stop();
  
  } else {
    #if !(defined(AVRTARGET) && defined(USE_SPINDLE_DIR_AS_ENABLE_PIN))
      if (state == SPINDLE_ENABLE_CW) {
 8007e30:	2810      	cmp	r0, #16
 8007e32:	460e      	mov	r6, r1
 8007e34:	d052      	beq.n	8007edc <spindle_set_state+0xbc>
        ResetSpindleDirectionBit();
	  }
	  else {
      SetSpindleDirectionBit();
 8007e36:	2201      	movs	r2, #1
 8007e38:	483b      	ldr	r0, [pc, #236]	; (8007f28 <spindle_set_state+0x108>)
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	f7f9 fc50 	bl	80016e0 <GPIO_WriteBit>
      }
    #endif
  
    #ifdef VARIABLE_SPINDLE
      // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
      if (settings.flags & BITFLAG_LASER_MODE) {
 8007e40:	4b3a      	ldr	r3, [pc, #232]	; (8007f2c <spindle_set_state+0x10c>)
 8007e42:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007e46:	0792      	lsls	r2, r2, #30
 8007e48:	d435      	bmi.n	8007eb6 <spindle_set_state+0x96>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007e4a:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8007e4c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8007e4e:	4638      	mov	r0, r7
 8007e50:	4629      	mov	r1, r5
 8007e52:	f7f9 f8e3 	bl	800101c <__aeabi_fcmpge>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d131      	bne.n	8007ebe <spindle_set_state+0x9e>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007e5a:	7aa0      	ldrb	r0, [r4, #10]
 8007e5c:	f7f8 fed8 	bl	8000c10 <__aeabi_i2f>
 8007e60:	4933      	ldr	r1, [pc, #204]	; (8007f30 <spindle_set_state+0x110>)
 8007e62:	f7f8 ff29 	bl	8000cb8 <__aeabi_fmul>
 8007e66:	4631      	mov	r1, r6
 8007e68:	f7f8 ff26 	bl	8000cb8 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007e6c:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007e6e:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007e70:	f7f9 f8d4 	bl	800101c <__aeabi_fcmpge>
 8007e74:	bb18      	cbnz	r0, 8007ebe <spindle_set_state+0x9e>
		else if (rpm <= settings.rpm_min) {
 8007e76:	4639      	mov	r1, r7
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f7f9 f8c5 	bl	8001008 <__aeabi_fcmple>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d032      	beq.n	8007ee8 <spindle_set_state+0xc8>
			if (rpm == 0.0f) { // S0 disables spindle
 8007e82:	2500      	movs	r5, #0
 8007e84:	4630      	mov	r0, r6
 8007e86:	4629      	mov	r1, r5
 8007e88:	f7f9 f8aa 	bl	8000fe0 <__aeabi_fcmpeq>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d043      	beq.n	8007f18 <spindle_set_state+0xf8>
		TIM1->CCR1 = pwm_value;
 8007e90:	2200      	movs	r2, #0
 8007e92:	4b28      	ldr	r3, [pc, #160]	; (8007f34 <spindle_set_state+0x114>)
				sys.spindle_speed = 0.0f;
 8007e94:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007e96:	869a      	strh	r2, [r3, #52]	; 0x34
 8007e98:	e039      	b.n	8007f0e <spindle_set_state+0xee>
      sys.spindle_speed = 0.0f;
 8007e9a:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007e9c:	4601      	mov	r1, r0
 8007e9e:	4825      	ldr	r0, [pc, #148]	; (8007f34 <spindle_set_state+0x114>)
      sys.spindle_speed = 0.0f;
 8007ea0:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007ea2:	f7f9 fd3d 	bl	8001920 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 8007ea6:	462a      	mov	r2, r5
 8007ea8:	2102      	movs	r1, #2
 8007eaa:	481f      	ldr	r0, [pc, #124]	; (8007f28 <spindle_set_state+0x108>)
 8007eac:	f7f9 fc18 	bl	80016e0 <GPIO_WriteBit>
	  #endif
	#endif
	#endif
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	7323      	strb	r3, [r4, #12]
}
 8007eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8007eb6:	2d20      	cmp	r5, #32
 8007eb8:	bf08      	it	eq
 8007eba:	2600      	moveq	r6, #0
 8007ebc:	e7c5      	b.n	8007e4a <spindle_set_state+0x2a>
		TIM1->CCR1 = pwm_value;
 8007ebe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ec2:	4b1c      	ldr	r3, [pc, #112]	; (8007f34 <spindle_set_state+0x114>)
			sys.spindle_speed = settings.rpm_max;
 8007ec4:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007ec6:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007ec8:	2101      	movs	r1, #1
 8007eca:	481a      	ldr	r0, [pc, #104]	; (8007f34 <spindle_set_state+0x114>)
 8007ecc:	f7f9 fd28 	bl	8001920 <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	2102      	movs	r1, #2
 8007ed4:	4814      	ldr	r0, [pc, #80]	; (8007f28 <spindle_set_state+0x108>)
 8007ed6:	f7f9 fc03 	bl	80016e0 <GPIO_WriteBit>
 8007eda:	e7e9      	b.n	8007eb0 <spindle_set_state+0x90>
        ResetSpindleDirectionBit();
 8007edc:	2101      	movs	r1, #1
 8007ede:	4812      	ldr	r0, [pc, #72]	; (8007f28 <spindle_set_state+0x108>)
 8007ee0:	f7f9 fbfe 	bl	80016e0 <GPIO_WriteBit>
 8007ee4:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <spindle_set_state+0x10c>)
 8007ee6:	e7b0      	b.n	8007e4a <spindle_set_state+0x2a>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007ee8:	4639      	mov	r1, r7
 8007eea:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8007eec:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007eee:	f7f8 fdd9 	bl	8000aa4 <__aeabi_fsub>
 8007ef2:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <spindle_set_state+0x118>)
 8007ef4:	6819      	ldr	r1, [r3, #0]
 8007ef6:	f7f8 fedf 	bl	8000cb8 <__aeabi_fmul>
 8007efa:	f003 f8c9 	bl	800b090 <floorf>
 8007efe:	f7f9 f8dd 	bl	80010bc <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8007f02:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <spindle_set_state+0x114>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007f04:	3001      	adds	r0, #1
 8007f06:	b280      	uxth	r0, r0
		TIM1->CCR1 = pwm_value;
 8007f08:	8698      	strh	r0, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d1dc      	bne.n	8007ec8 <spindle_set_state+0xa8>
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007f0e:	2100      	movs	r1, #0
 8007f10:	4808      	ldr	r0, [pc, #32]	; (8007f34 <spindle_set_state+0x114>)
 8007f12:	f7f9 fd05 	bl	8001920 <TIM_CtrlPWMOutputs>
 8007f16:	e7db      	b.n	8007ed0 <spindle_set_state+0xb0>
		TIM1->CCR1 = pwm_value;
 8007f18:	2201      	movs	r2, #1
 8007f1a:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <spindle_set_state+0x114>)
				sys.spindle_speed = settings.rpm_min;
 8007f1c:	6127      	str	r7, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007f1e:	869a      	strh	r2, [r3, #52]	; 0x34
 8007f20:	e7d2      	b.n	8007ec8 <spindle_set_state+0xa8>
 8007f22:	bf00      	nop
 8007f24:	200013f0 	.word	0x200013f0
 8007f28:	40010c00 	.word	0x40010c00
 8007f2c:	200015ac 	.word	0x200015ac
 8007f30:	3c23d70a 	.word	0x3c23d70a
 8007f34:	40012c00 	.word	0x40012c00
 8007f38:	20000d9c 	.word	0x20000d9c

08007f3c <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.state == STATE_CHECK_MODE) { return; }
 8007f3e:	4c41      	ldr	r4, [pc, #260]	; (8008044 <spindle_sync+0x108>)
 8007f40:	7823      	ldrb	r3, [r4, #0]
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d005      	beq.n	8007f52 <spindle_sync+0x16>
 8007f46:	4605      	mov	r5, r0
 8007f48:	460e      	mov	r6, r1
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 8007f4a:	f7fd ffb7 	bl	8005ebc <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.
 8007f4e:	7862      	ldrb	r2, [r4, #1]
 8007f50:	b102      	cbz	r2, 8007f54 <spindle_sync+0x18>
    spindle_set_state(state,rpm);
  }
 8007f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8007f54:	2d00      	cmp	r5, #0
 8007f56:	d042      	beq.n	8007fde <spindle_sync+0xa2>
      if (state == SPINDLE_ENABLE_CW) {
 8007f58:	2d10      	cmp	r5, #16
 8007f5a:	d068      	beq.n	800802e <spindle_sync+0xf2>
      SetSpindleDirectionBit();
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	483a      	ldr	r0, [pc, #232]	; (8008048 <spindle_sync+0x10c>)
 8007f60:	4611      	mov	r1, r2
 8007f62:	f7f9 fbbd 	bl	80016e0 <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8007f66:	4b39      	ldr	r3, [pc, #228]	; (800804c <spindle_sync+0x110>)
 8007f68:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007f6c:	0792      	lsls	r2, r2, #30
 8007f6e:	d442      	bmi.n	8007ff6 <spindle_sync+0xba>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007f70:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8007f72:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8007f74:	4638      	mov	r0, r7
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7f9 f850 	bl	800101c <__aeabi_fcmpge>
 8007f7c:	b9f0      	cbnz	r0, 8007fbc <spindle_sync+0x80>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007f7e:	7aa0      	ldrb	r0, [r4, #10]
 8007f80:	f7f8 fe46 	bl	8000c10 <__aeabi_i2f>
 8007f84:	4932      	ldr	r1, [pc, #200]	; (8008050 <spindle_sync+0x114>)
 8007f86:	f7f8 fe97 	bl	8000cb8 <__aeabi_fmul>
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	f7f8 fe94 	bl	8000cb8 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007f90:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007f92:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007f94:	f7f9 f842 	bl	800101c <__aeabi_fcmpge>
 8007f98:	b980      	cbnz	r0, 8007fbc <spindle_sync+0x80>
		else if (rpm <= settings.rpm_min) {
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f7f9 f833 	bl	8001008 <__aeabi_fcmple>
 8007fa2:	b360      	cbz	r0, 8007ffe <spindle_sync+0xc2>
			if (rpm == 0.0f) { // S0 disables spindle
 8007fa4:	2500      	movs	r5, #0
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f7f9 f819 	bl	8000fe0 <__aeabi_fcmpeq>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d043      	beq.n	800803a <spindle_sync+0xfe>
		TIM1->CCR1 = pwm_value;
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	4b27      	ldr	r3, [pc, #156]	; (8008054 <spindle_sync+0x118>)
				sys.spindle_speed = 0.0f;
 8007fb6:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007fb8:	869a      	strh	r2, [r3, #52]	; 0x34
 8007fba:	e033      	b.n	8008024 <spindle_sync+0xe8>
 8007fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fc0:	4b24      	ldr	r3, [pc, #144]	; (8008054 <spindle_sync+0x118>)
			sys.spindle_speed = settings.rpm_max;
 8007fc2:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007fc4:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	4822      	ldr	r0, [pc, #136]	; (8008054 <spindle_sync+0x118>)
 8007fca:	f7f9 fca9 	bl	8001920 <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 8007fce:	2201      	movs	r2, #1
 8007fd0:	2102      	movs	r1, #2
 8007fd2:	481d      	ldr	r0, [pc, #116]	; (8008048 <spindle_sync+0x10c>)
 8007fd4:	f7f9 fb84 	bl	80016e0 <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007fd8:	2300      	movs	r3, #0
 8007fda:	7323      	strb	r3, [r4, #12]
  }
 8007fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys.spindle_speed = 0.0f;
 8007fde:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	481c      	ldr	r0, [pc, #112]	; (8008054 <spindle_sync+0x118>)
      sys.spindle_speed = 0.0f;
 8007fe4:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007fe6:	f7f9 fc9b 	bl	8001920 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 8007fea:	462a      	mov	r2, r5
 8007fec:	2102      	movs	r1, #2
 8007fee:	4816      	ldr	r0, [pc, #88]	; (8008048 <spindle_sync+0x10c>)
 8007ff0:	f7f9 fb76 	bl	80016e0 <GPIO_WriteBit>
 8007ff4:	e7f0      	b.n	8007fd8 <spindle_sync+0x9c>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8007ff6:	2d20      	cmp	r5, #32
 8007ff8:	bf08      	it	eq
 8007ffa:	2600      	moveq	r6, #0
 8007ffc:	e7b8      	b.n	8007f70 <spindle_sync+0x34>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007ffe:	4639      	mov	r1, r7
 8008000:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8008002:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008004:	f7f8 fd4e 	bl	8000aa4 <__aeabi_fsub>
 8008008:	4b13      	ldr	r3, [pc, #76]	; (8008058 <spindle_sync+0x11c>)
 800800a:	6819      	ldr	r1, [r3, #0]
 800800c:	f7f8 fe54 	bl	8000cb8 <__aeabi_fmul>
 8008010:	f003 f83e 	bl	800b090 <floorf>
 8008014:	f7f9 f852 	bl	80010bc <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8008018:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <spindle_sync+0x118>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 800801a:	3001      	adds	r0, #1
 800801c:	b280      	uxth	r0, r0
		TIM1->CCR1 = pwm_value;
 800801e:	8698      	strh	r0, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8008020:	2800      	cmp	r0, #0
 8008022:	d1d0      	bne.n	8007fc6 <spindle_sync+0x8a>
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008024:	2100      	movs	r1, #0
 8008026:	480b      	ldr	r0, [pc, #44]	; (8008054 <spindle_sync+0x118>)
 8008028:	f7f9 fc7a 	bl	8001920 <TIM_CtrlPWMOutputs>
 800802c:	e7cf      	b.n	8007fce <spindle_sync+0x92>
        ResetSpindleDirectionBit();
 800802e:	2101      	movs	r1, #1
 8008030:	4805      	ldr	r0, [pc, #20]	; (8008048 <spindle_sync+0x10c>)
 8008032:	f7f9 fb55 	bl	80016e0 <GPIO_WriteBit>
 8008036:	4b05      	ldr	r3, [pc, #20]	; (800804c <spindle_sync+0x110>)
 8008038:	e79a      	b.n	8007f70 <spindle_sync+0x34>
		TIM1->CCR1 = pwm_value;
 800803a:	2201      	movs	r2, #1
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <spindle_sync+0x118>)
				sys.spindle_speed = settings.rpm_min;
 800803e:	6127      	str	r7, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8008040:	869a      	strh	r2, [r3, #52]	; 0x34
 8008042:	e7c0      	b.n	8007fc6 <spindle_sync+0x8a>
 8008044:	200013f0 	.word	0x200013f0
 8008048:	40010c00 	.word	0x40010c00
 800804c:	200015ac 	.word	0x200015ac
 8008050:	3c23d70a 	.word	0x3c23d70a
 8008054:	40012c00 	.word	0x40012c00
 8008058:	20000d9c 	.word	0x20000d9c

0800805c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800805c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008094 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008060:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008062:	e003      	b.n	800806c <LoopCopyDataInit>

08008064 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008064:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8008066:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008068:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800806a:	3104      	adds	r1, #4

0800806c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800806c:	480b      	ldr	r0, [pc, #44]	; (800809c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800806e:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8008070:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008072:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008074:	d3f6      	bcc.n	8008064 <CopyDataInit>
	ldr	r2, =_sbss
 8008076:	4a0b      	ldr	r2, [pc, #44]	; (80080a4 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8008078:	e002      	b.n	8008080 <LoopFillZerobss>

0800807a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800807a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800807c:	f842 3b04 	str.w	r3, [r2], #4

08008080 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008080:	4b09      	ldr	r3, [pc, #36]	; (80080a8 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8008082:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008084:	d3f9      	bcc.n	800807a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008086:	f001 fc77 	bl	8009978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800808a:	f002 fed5 	bl	800ae38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800808e:	f7fb faa7 	bl	80035e0 <main>
	bx	lr
 8008092:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008094:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8008098:	0800c7c0 	.word	0x0800c7c0
	ldr	r0, =_sdata
 800809c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80080a0:	20000520 	.word	0x20000520
	ldr	r2, =_sbss
 80080a4:	20000520 	.word	0x20000520
	ldr	r3, = _ebss
 80080a8:	200016a0 	.word	0x200016a0

080080ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80080ac:	e7fe      	b.n	80080ac <ADC1_2_IRQHandler>
	...

080080b0 <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 80080b0:	b570      	push	{r4, r5, r6, lr}
		mc_reset();
		return;
	}
#endif
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 80080b2:	4d18      	ldr	r5, [pc, #96]	; (8008114 <st_wake_up+0x64>)
  {
	  SetStepperDisableBit();
 80080b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 80080b8:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
	  SetStepperDisableBit();
 80080bc:	4816      	ldr	r0, [pc, #88]	; (8008118 <st_wake_up+0x68>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 80080be:	075b      	lsls	r3, r3, #29
 80080c0:	d424      	bmi.n	800810c <st_wake_up+0x5c>
  }
  else 
  { 
	  ResetStepperDisableBit();
 80080c2:	f7f9 fb0b 	bl	80016dc <GPIO_ResetBits>
#ifdef WIN32
  nTimer1Out = 1;
#endif
#if defined (STM32F103C8)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 80080c6:	2401      	movs	r4, #1
  TIM3->SR = ~TIM_SR_UIF;
 80080c8:	f64f 76fe 	movw	r6, #65534	; 0xfffe

  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80080cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 80080d0:	4b12      	ldr	r3, [pc, #72]	; (800811c <st_wake_up+0x6c>)
 80080d2:	4813      	ldr	r0, [pc, #76]	; (8008120 <st_wake_up+0x70>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 80080da:	fba0 0202 	umull	r0, r2, r0, r2
 80080de:	0c92      	lsrs	r2, r2, #18
 80080e0:	fb03 f302 	mul.w	r3, r3, r2
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 80080e4:	480f      	ldr	r0, [pc, #60]	; (8008124 <st_wake_up+0x74>)
  st.step_outbits = step_port_invert_mask;
 80080e6:	4a10      	ldr	r2, [pc, #64]	; (8008128 <st_wake_up+0x78>)
 80080e8:	4d10      	ldr	r5, [pc, #64]	; (800812c <st_wake_up+0x7c>)
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 80080ea:	b29b      	uxth	r3, r3
  st.step_outbits = step_port_invert_mask;
 80080ec:	882d      	ldrh	r5, [r5, #0]
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 80080ee:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 80080f0:	8284      	strh	r4, [r0, #20]
  TIM3->SR = ~TIM_SR_UIF;
 80080f2:	8206      	strh	r6, [r0, #16]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80080f4:	6b10      	ldr	r0, [r2, #48]	; 0x30
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 80080f6:	8253      	strh	r3, [r2, #18]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80080f8:	8843      	ldrh	r3, [r0, #2]
  st.step_outbits = step_port_invert_mask;
 80080fa:	8295      	strh	r5, [r2, #20]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b29b      	uxth	r3, r3
 8008100:	858b      	strh	r3, [r1, #44]	; 0x2c
  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
  TIM2->PSC = st.exec_segment->prescaler;
#endif
  TIM2->EGR = TIM_PSCReloadMode_Immediate;
 8008102:	828c      	strh	r4, [r1, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 8008104:	880b      	ldrh	r3, [r1, #0]
 8008106:	4323      	orrs	r3, r4
 8008108:	800b      	strh	r3, [r1, #0]
#endif
}
 800810a:	bd70      	pop	{r4, r5, r6, pc}
	  SetStepperDisableBit();
 800810c:	f7f9 fae4 	bl	80016d8 <GPIO_SetBits>
 8008110:	e7d9      	b.n	80080c6 <st_wake_up+0x16>
 8008112:	bf00      	nop
 8008114:	200015ac 	.word	0x200015ac
 8008118:	40010800 	.word	0x40010800
 800811c:	20000004 	.word	0x20000004
 8008120:	431bde83 	.word	0x431bde83
 8008124:	40000400 	.word	0x40000400
 8008128:	20000e34 	.word	0x20000e34
 800812c:	20000f44 	.word	0x20000f44

08008130 <st_go_idle>:
#endif
#ifdef WIN32
  nTimer1Out = 0;
#endif
#ifdef STM32F103C8
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 8008134:	2100      	movs	r1, #0
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008136:	8813      	ldrh	r3, [r2, #0]
{
 8008138:	b570      	push	{r4, r5, r6, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800813a:	f023 0301 	bic.w	r3, r3, #1
 800813e:	041b      	lsls	r3, r3, #16
 8008140:	0c1b      	lsrs	r3, r3, #16

  busy = false;

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008142:	4c15      	ldr	r4, [pc, #84]	; (8008198 <st_go_idle+0x68>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008144:	8013      	strh	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008146:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
  busy = false;
 800814a:	4d14      	ldr	r5, [pc, #80]	; (800819c <st_go_idle+0x6c>)
 800814c:	4e14      	ldr	r6, [pc, #80]	; (80081a0 <st_go_idle+0x70>)
  TIM2->CNT = 0;
 800814e:	8491      	strh	r1, [r2, #36]	; 0x24
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008150:	28ff      	cmp	r0, #255	; 0xff
 8008152:	7833      	ldrb	r3, [r6, #0]
  busy = false;
 8008154:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008156:	d00c      	beq.n	8008172 <st_go_idle+0x42>
 8008158:	2b04      	cmp	r3, #4
 800815a:	d110      	bne.n	800817e <st_go_idle+0x4e>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
    pin_state = true; // Override. Disable steppers.
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 800815c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8008160:	075a      	lsls	r2, r3, #29
 8008162:	d412      	bmi.n	800818a <st_go_idle+0x5a>
  }
  else 
  { 
	  ResetStepperDisableBit();
  }
}
 8008164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  ResetStepperDisableBit();
 8008168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800816c:	480d      	ldr	r0, [pc, #52]	; (80081a4 <st_go_idle+0x74>)
 800816e:	f7f9 bab5 	b.w	80016dc <GPIO_ResetBits>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008172:	4a0d      	ldr	r2, [pc, #52]	; (80081a8 <st_go_idle+0x78>)
 8008174:	7812      	ldrb	r2, [r2, #0]
 8008176:	2a00      	cmp	r2, #0
 8008178:	d1ee      	bne.n	8008158 <st_go_idle+0x28>
 800817a:	2b80      	cmp	r3, #128	; 0x80
 800817c:	d1ee      	bne.n	800815c <st_go_idle+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 800817e:	f7fb fed5 	bl	8003f2c <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008182:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8008186:	075b      	lsls	r3, r3, #29
 8008188:	d4ec      	bmi.n	8008164 <st_go_idle+0x34>
}
 800818a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  SetStepperDisableBit();
 800818e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008192:	4804      	ldr	r0, [pc, #16]	; (80081a4 <st_go_idle+0x74>)
 8008194:	f7f9 baa0 	b.w	80016d8 <GPIO_SetBits>
 8008198:	200015ac 	.word	0x200015ac
 800819c:	20000da0 	.word	0x20000da0
 80081a0:	200013f0 	.word	0x200013f0
 80081a4:	40010800 	.word	0x40010800
 80081a8:	20001428 	.word	0x20001428

080081ac <TIM2_IRQHandler>:
ISR(TIMER1_COMPA_vect)
#endif
#ifdef WIN32
void Timer1Proc()
#endif
{
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifdef STM32F103C8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 80081ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081b2:	8a1a      	ldrh	r2, [r3, #16]
 80081b4:	07d1      	lsls	r1, r2, #31
 80081b6:	f140 8090 	bpl.w	80082da <TIM2_IRQHandler+0x12e>
	{
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
		TIM2->CNT = 0;
 80081ba:	2200      	movs	r2, #0
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 80081bc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	{
		return;
	}
#endif

  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 80081c0:	4d8f      	ldr	r5, [pc, #572]	; (8008400 <TIM2_IRQHandler+0x254>)
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 80081c2:	8219      	strh	r1, [r3, #16]
		TIM2->CNT = 0;
 80081c4:	849a      	strh	r2, [r3, #36]	; 0x24
  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 80081c6:	782a      	ldrb	r2, [r5, #0]
 80081c8:	2a00      	cmp	r2, #0
 80081ca:	f040 8086 	bne.w	80082da <TIM2_IRQHandler+0x12e>
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK);
#endif
#ifdef STM32F103C8
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 80081ce:	f64f 77fc 	movw	r7, #65532	; 0xfffc
  nTimer0Out = st.step_pulse_time;
#endif
#ifdef STM32F103C8
  TIM3->CR1 |= TIM_CR1_CEN;
#endif
  busy = true;
 80081d2:	2601      	movs	r6, #1
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 80081d4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80081d8:	4c8a      	ldr	r4, [pc, #552]	; (8008404 <TIM2_IRQHandler+0x258>)
 80081da:	f601 0102 	addw	r1, r1, #2050	; 0x802
 80081de:	68c8      	ldr	r0, [r1, #12]
 80081e0:	8ae2      	ldrh	r2, [r4, #22]
 80081e2:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 80081e6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80081ea:	4302      	orrs	r2, r0
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 80081ec:	4886      	ldr	r0, [pc, #536]	; (8008408 <TIM2_IRQHandler+0x25c>)
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 80081ee:	60ca      	str	r2, [r1, #12]
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 80081f0:	8207      	strh	r7, [r0, #16]
      STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_outbits);
 80081f2:	68ca      	ldr	r2, [r1, #12]
 80081f4:	8aa7      	ldrh	r7, [r4, #20]
 80081f6:	f022 020f 	bic.w	r2, r2, #15
 80081fa:	433a      	orrs	r2, r7
 80081fc:	60ca      	str	r2, [r1, #12]
  TIM3->CR1 |= TIM_CR1_CEN;
 80081fe:	8802      	ldrh	r2, [r0, #0]
  sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to fire on-time.
         // NOTE: The remaining code in this ISR will finish before returning to main program.
#endif

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 8008200:	6b21      	ldr	r1, [r4, #48]	; 0x30
  TIM3->CR1 |= TIM_CR1_CEN;
 8008202:	4332      	orrs	r2, r6
 8008204:	8002      	strh	r2, [r0, #0]
  busy = true;
 8008206:	702e      	strb	r6, [r5, #0]
  if (st.exec_segment == NULL) {
 8008208:	2900      	cmp	r1, #0
 800820a:	d076      	beq.n	80082fa <TIM2_IRQHandler+0x14e>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 800820c:	4b7f      	ldr	r3, [pc, #508]	; (800840c <TIM2_IRQHandler+0x260>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b01      	cmp	r3, #1
 8008212:	f000 80b8 	beq.w	8008386 <TIM2_IRQHandler+0x1da>

  // Reset step out bits.
  st.step_outbits = 0;
 8008216:	2300      	movs	r3, #0
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 8008218:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    st.counter_x += st.steps[X_AXIS];
 800821a:	6821      	ldr	r1, [r4, #0]
 800821c:	69a6      	ldr	r6, [r4, #24]
  if (st.counter_x > st.exec_block->step_event_count) {
 800821e:	6902      	ldr	r2, [r0, #16]
    st.counter_x += st.steps[X_AXIS];
 8008220:	4431      	add	r1, r6
  if (st.counter_x > st.exec_block->step_event_count) {
 8008222:	4291      	cmp	r1, r2
    st.counter_x += st.steps[X_AXIS];
 8008224:	6021      	str	r1, [r4, #0]
  st.step_outbits = 0;
 8008226:	82a3      	strh	r3, [r4, #20]
  if (st.counter_x > st.exec_block->step_event_count) {
 8008228:	d858      	bhi.n	80082dc <TIM2_IRQHandler+0x130>
 800822a:	2702      	movs	r7, #2
    st.counter_x -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
    else { sys_position[X_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 800822c:	6861      	ldr	r1, [r4, #4]
 800822e:	69e6      	ldr	r6, [r4, #28]
 8008230:	4431      	add	r1, r6
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 8008232:	428a      	cmp	r2, r1
    st.counter_y += st.steps[Y_AXIS];
 8008234:	6061      	str	r1, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count) {
 8008236:	d20b      	bcs.n	8008250 <TIM2_IRQHandler+0xa4>
    st.step_outbits |= (1<<Y_STEP_BIT);
    st.counter_y -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8008238:	8a83      	ldrh	r3, [r0, #20]
 800823a:	4e75      	ldr	r6, [pc, #468]	; (8008410 <TIM2_IRQHandler+0x264>)
    st.counter_y -= st.exec_block->step_event_count;
 800823c:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 800823e:	069b      	lsls	r3, r3, #26
    st.counter_y -= st.exec_block->step_event_count;
 8008240:	6061      	str	r1, [r4, #4]
    st.step_outbits |= (1<<Y_STEP_BIT);
 8008242:	82a7      	strh	r7, [r4, #20]
 8008244:	6871      	ldr	r1, [r6, #4]
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8008246:	f140 809a 	bpl.w	800837e <TIM2_IRQHandler+0x1d2>
 800824a:	463b      	mov	r3, r7
 800824c:	3901      	subs	r1, #1
 800824e:	6071      	str	r1, [r6, #4]
    else { sys_position[Y_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 8008250:	68a1      	ldr	r1, [r4, #8]
 8008252:	6a26      	ldr	r6, [r4, #32]
 8008254:	4431      	add	r1, r6
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 8008256:	428a      	cmp	r2, r1
    st.counter_z += st.steps[Z_AXIS];
 8008258:	60a1      	str	r1, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count) {
 800825a:	d20e      	bcs.n	800827a <TIM2_IRQHandler+0xce>
 800825c:	4e6c      	ldr	r6, [pc, #432]	; (8008410 <TIM2_IRQHandler+0x264>)
    st.step_outbits |= (1<<Z_STEP_BIT);
    st.counter_z -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 800825e:	8a87      	ldrh	r7, [r0, #20]
    st.counter_z -= st.exec_block->step_event_count;
 8008260:	1a89      	subs	r1, r1, r2
 8008262:	60a1      	str	r1, [r4, #8]
 8008264:	68b1      	ldr	r1, [r6, #8]
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8008266:	067f      	lsls	r7, r7, #25
    st.step_outbits |= (1<<Z_STEP_BIT);
 8008268:	f043 0304 	orr.w	r3, r3, #4
 800826c:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 800826e:	bf4c      	ite	mi
 8008270:	f101 31ff 	addmi.w	r1, r1, #4294967295	; 0xffffffff
    else { sys_position[Z_AXIS]++; }
 8008274:	3101      	addpl	r1, #1
    st.step_outbits |= (1<<Z_STEP_BIT);
 8008276:	82a3      	strh	r3, [r4, #20]
    else { sys_position[Z_AXIS]++; }
 8008278:	60b1      	str	r1, [r6, #8]
  }
// --- YSV 22-06-2018
  #if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_a += st.steps[A_AXIS];
 800827a:	68e1      	ldr	r1, [r4, #12]
 800827c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800827e:	4431      	add	r1, r6
  #else
    st.counter_a += st.exec_block->steps[A_AXIS];
  #endif
  if (st.counter_a > st.exec_block->step_event_count) {
 8008280:	428a      	cmp	r2, r1
    st.counter_a += st.steps[A_AXIS];
 8008282:	60e1      	str	r1, [r4, #12]
  if (st.counter_a > st.exec_block->step_event_count) {
 8008284:	d20e      	bcs.n	80082a4 <TIM2_IRQHandler+0xf8>
    st.step_outbits |= (1<<A_STEP_BIT);
    st.counter_a -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 8008286:	8a86      	ldrh	r6, [r0, #20]
 8008288:	4861      	ldr	r0, [pc, #388]	; (8008410 <TIM2_IRQHandler+0x264>)
    st.counter_a -= st.exec_block->step_event_count;
 800828a:	1a8a      	subs	r2, r1, r2
 800828c:	60e2      	str	r2, [r4, #12]
 800828e:	68c2      	ldr	r2, [r0, #12]
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 8008290:	0631      	lsls	r1, r6, #24
    st.step_outbits |= (1<<A_STEP_BIT);
 8008292:	f043 0308 	orr.w	r3, r3, #8
 8008296:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 8008298:	bf4c      	ite	mi
 800829a:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
    else { sys_position[A_AXIS]++; }
 800829e:	3201      	addpl	r2, #1
    st.step_outbits |= (1<<A_STEP_BIT);
 80082a0:	82a3      	strh	r3, [r4, #20]
    else { sys_position[A_AXIS]++; }
 80082a2:	60c2      	str	r2, [r0, #12]
    else { sys_position[C_AXIS]++; }
  }
  #endif
// ---
  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 80082a4:	4a5b      	ldr	r2, [pc, #364]	; (8008414 <TIM2_IRQHandler+0x268>)
 80082a6:	7811      	ldrb	r1, [r2, #0]
 80082a8:	2904      	cmp	r1, #4
 80082aa:	d102      	bne.n	80082b2 <TIM2_IRQHandler+0x106>
 80082ac:	88d2      	ldrh	r2, [r2, #6]
 80082ae:	4013      	ands	r3, r2
 80082b0:	82a3      	strh	r3, [r4, #20]

  st.step_count--; // Decrement step events count
 80082b2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80082b4:	3a01      	subs	r2, #1
 80082b6:	b292      	uxth	r2, r2
 80082b8:	8522      	strh	r2, [r4, #40]	; 0x28
  if (st.step_count == 0) {
 80082ba:	b942      	cbnz	r2, 80082ce <TIM2_IRQHandler+0x122>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;
#ifndef WIN32
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 80082bc:	4956      	ldr	r1, [pc, #344]	; (8008418 <TIM2_IRQHandler+0x26c>)
    st.exec_segment = NULL;
 80082be:	6322      	str	r2, [r4, #48]	; 0x30
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 80082c0:	780a      	ldrb	r2, [r1, #0]
 80082c2:	3201      	adds	r2, #1
 80082c4:	b2d2      	uxtb	r2, r2
	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
		segment_tail_next = 0;
 80082c6:	2a0a      	cmp	r2, #10
 80082c8:	bf08      	it	eq
 80082ca:	2200      	moveq	r2, #0
	segment_buffer_tail = segment_tail_next;
 80082cc:	700a      	strb	r2, [r1, #0]
	}
#endif
  }

  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
  busy = false;
 80082ce:	2100      	movs	r1, #0
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 80082d0:	4a52      	ldr	r2, [pc, #328]	; (800841c <TIM2_IRQHandler+0x270>)
  busy = false;
 80082d2:	7029      	strb	r1, [r5, #0]
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 80082d4:	8812      	ldrh	r2, [r2, #0]
 80082d6:	4053      	eors	r3, r2
 80082d8:	82a3      	strh	r3, [r4, #20]
}
 80082da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    st.step_outbits |= (1<<X_STEP_BIT);
 80082dc:	2301      	movs	r3, #1
 80082de:	4e4c      	ldr	r6, [pc, #304]	; (8008410 <TIM2_IRQHandler+0x264>)
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 80082e0:	8a87      	ldrh	r7, [r0, #20]
    st.counter_x -= st.exec_block->step_event_count;
 80082e2:	1a89      	subs	r1, r1, r2
 80082e4:	6021      	str	r1, [r4, #0]
 80082e6:	6831      	ldr	r1, [r6, #0]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 80082e8:	06ff      	lsls	r7, r7, #27
 80082ea:	bf4c      	ite	mi
 80082ec:	f101 31ff 	addmi.w	r1, r1, #4294967295	; 0xffffffff
    else { sys_position[X_AXIS]++; }
 80082f0:	3101      	addpl	r1, #1
    st.step_outbits |= (1<<X_STEP_BIT);
 80082f2:	82a3      	strh	r3, [r4, #20]
    else { sys_position[X_AXIS]++; }
 80082f4:	6031      	str	r1, [r6, #0]
 80082f6:	2703      	movs	r7, #3
 80082f8:	e798      	b.n	800822c <TIM2_IRQHandler+0x80>
    if (segment_buffer_head != segment_buffer_tail) {
 80082fa:	4a47      	ldr	r2, [pc, #284]	; (8008418 <TIM2_IRQHandler+0x26c>)
 80082fc:	4e48      	ldr	r6, [pc, #288]	; (8008420 <TIM2_IRQHandler+0x274>)
 80082fe:	7810      	ldrb	r0, [r2, #0]
 8008300:	7836      	ldrb	r6, [r6, #0]
 8008302:	4286      	cmp	r6, r0
 8008304:	d044      	beq.n	8008390 <TIM2_IRQHandler+0x1e4>
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8008306:	7810      	ldrb	r0, [r2, #0]
 8008308:	4a46      	ldr	r2, [pc, #280]	; (8008424 <TIM2_IRQHandler+0x278>)
 800830a:	b2c0      	uxtb	r0, r0
 800830c:	00c7      	lsls	r7, r0, #3
 800830e:	19d6      	adds	r6, r2, r7
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008310:	8871      	ldrh	r1, [r6, #2]
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8008312:	6326      	str	r6, [r4, #48]	; 0x30
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008314:	3901      	subs	r1, #1
 8008316:	b289      	uxth	r1, r1
 8008318:	8599      	strh	r1, [r3, #44]	; 0x2c
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 800831a:	f832 1030 	ldrh.w	r1, [r2, r0, lsl #3]
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 800831e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8008322:	7930      	ldrb	r0, [r6, #4]
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 8008324:	8521      	strh	r1, [r4, #40]	; 0x28
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8008326:	4283      	cmp	r3, r0
 8008328:	d030      	beq.n	800838c <TIM2_IRQHandler+0x1e0>
        st.exec_block = &st_block_buffer[st.exec_block_index];
 800832a:	4b3f      	ldr	r3, [pc, #252]	; (8008428 <TIM2_IRQHandler+0x27c>)
 800832c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8008330:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 8008334:	6919      	ldr	r1, [r3, #16]
        st.exec_block_index = st.exec_segment->st_block_index;
 8008336:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 800833a:	0849      	lsrs	r1, r1, #1
 800833c:	e9c4 1102 	strd	r1, r1, [r4, #8]
 8008340:	e9c4 1100 	strd	r1, r1, [r4]
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8008344:	62e3      	str	r3, [r4, #44]	; 0x2c
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8008346:	4839      	ldr	r0, [pc, #228]	; (800842c <TIM2_IRQHandler+0x280>)
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8008348:	443a      	add	r2, r7
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 800834a:	685e      	ldr	r6, [r3, #4]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 800834c:	8a9f      	ldrh	r7, [r3, #20]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800834e:	7951      	ldrb	r1, [r2, #5]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8008350:	f8b0 e000 	ldrh.w	lr, [r0]
        spindle_set_speed(st.exec_segment->spindle_pwm);
 8008354:	88d0      	ldrh	r0, [r2, #6]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8008356:	681a      	ldr	r2, [r3, #0]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 8008358:	40ce      	lsrs	r6, r1
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800835a:	fa22 fc01 	lsr.w	ip, r2, r1
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 800835e:	ea87 070e 	eor.w	r7, r7, lr
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 8008362:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 8008366:	40ca      	lsrs	r2, r1
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 8008368:	fa23 f101 	lsr.w	r1, r3, r1
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800836c:	f8c4 c018 	str.w	ip, [r4, #24]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8008370:	82e7      	strh	r7, [r4, #22]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 8008372:	e9c4 6207 	strd	r6, r2, [r4, #28]
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 8008376:	6261      	str	r1, [r4, #36]	; 0x24
        spindle_set_speed(st.exec_segment->spindle_pwm);
 8008378:	f7ff fd00 	bl	8007d7c <spindle_set_speed>
 800837c:	e746      	b.n	800820c <TIM2_IRQHandler+0x60>
    else { sys_position[Y_AXIS]++; }
 800837e:	3101      	adds	r1, #1
 8008380:	463b      	mov	r3, r7
 8008382:	6071      	str	r1, [r6, #4]
 8008384:	e764      	b.n	8008250 <TIM2_IRQHandler+0xa4>
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 8008386:	f7fc fe7f 	bl	8005088 <probe_state_monitor>
 800838a:	e744      	b.n	8008216 <TIM2_IRQHandler+0x6a>
 800838c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800838e:	e7da      	b.n	8008346 <TIM2_IRQHandler+0x19a>
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008390:	881a      	ldrh	r2, [r3, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008392:	4e27      	ldr	r6, [pc, #156]	; (8008430 <TIM2_IRQHandler+0x284>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008394:	f022 0201 	bic.w	r2, r2, #1
 8008398:	0412      	lsls	r2, r2, #16
 800839a:	0c12      	lsrs	r2, r2, #16
 800839c:	801a      	strh	r2, [r3, #0]
  TIM2->CNT = 0;
 800839e:	8499      	strh	r1, [r3, #36]	; 0x24
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80083a0:	f896 0046 	ldrb.w	r0, [r6, #70]	; 0x46
 80083a4:	4a1b      	ldr	r2, [pc, #108]	; (8008414 <TIM2_IRQHandler+0x268>)
 80083a6:	28ff      	cmp	r0, #255	; 0xff
  busy = false;
 80083a8:	7029      	strb	r1, [r5, #0]
 80083aa:	7813      	ldrb	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80083ac:	d015      	beq.n	80083da <TIM2_IRQHandler+0x22e>
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d119      	bne.n	80083e6 <TIM2_IRQHandler+0x23a>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80083b2:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 80083b6:	075a      	lsls	r2, r3, #29
 80083b8:	d41b      	bmi.n	80083f2 <TIM2_IRQHandler+0x246>
	  ResetStepperDisableBit();
 80083ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083be:	481d      	ldr	r0, [pc, #116]	; (8008434 <TIM2_IRQHandler+0x288>)
 80083c0:	f7f9 f98c 	bl	80016dc <GPIO_ResetBits>
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 80083c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80083c6:	7d9b      	ldrb	r3, [r3, #22]
 80083c8:	b113      	cbz	r3, 80083d0 <TIM2_IRQHandler+0x224>
 80083ca:	2000      	movs	r0, #0
 80083cc:	f7ff fcd6 	bl	8007d7c <spindle_set_speed>
}
 80083d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 80083d4:	2004      	movs	r0, #4
 80083d6:	f001 ba87 	b.w	80098e8 <system_set_exec_state_flag>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80083da:	4a17      	ldr	r2, [pc, #92]	; (8008438 <TIM2_IRQHandler+0x28c>)
 80083dc:	7812      	ldrb	r2, [r2, #0]
 80083de:	2a00      	cmp	r2, #0
 80083e0:	d1e5      	bne.n	80083ae <TIM2_IRQHandler+0x202>
 80083e2:	2b80      	cmp	r3, #128	; 0x80
 80083e4:	d1e5      	bne.n	80083b2 <TIM2_IRQHandler+0x206>
    delay_ms(settings.stepper_idle_lock_time);
 80083e6:	f7fb fda1 	bl	8003f2c <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80083ea:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 80083ee:	075b      	lsls	r3, r3, #29
 80083f0:	d4e3      	bmi.n	80083ba <TIM2_IRQHandler+0x20e>
	  SetStepperDisableBit();
 80083f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083f6:	480f      	ldr	r0, [pc, #60]	; (8008434 <TIM2_IRQHandler+0x288>)
 80083f8:	f7f9 f96e 	bl	80016d8 <GPIO_SetBits>
 80083fc:	e7e2      	b.n	80083c4 <TIM2_IRQHandler+0x218>
 80083fe:	bf00      	nop
 8008400:	20000da0 	.word	0x20000da0
 8008404:	20000e34 	.word	0x20000e34
 8008408:	40000400 	.word	0x40000400
 800840c:	20001406 	.word	0x20001406
 8008410:	20001418 	.word	0x20001418
 8008414:	200013f0 	.word	0x200013f0
 8008418:	20000e31 	.word	0x20000e31
 800841c:	20000f44 	.word	0x20000f44
 8008420:	20000e30 	.word	0x20000e30
 8008424:	20000de0 	.word	0x20000de0
 8008428:	20000e68 	.word	0x20000e68
 800842c:	20000da2 	.word	0x20000da2
 8008430:	200015ac 	.word	0x200015ac
 8008434:	40010800 	.word	0x40010800
 8008438:	20001428 	.word	0x20001428

0800843c <TIM3_IRQHandler>:
ISR(TIMER0_OVF_vect)
#endif
#ifdef WIN32
void Timer0Proc()
#endif
{
 800843c:	b410      	push	{r4}
#endif
	{
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
		TIM3->CR1 &= ~TIM_CR1_CEN;
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
		TIM3->CNT = 0;
 800843e:	2000      	movs	r0, #0
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 8008440:	f64f 74fc 	movw	r4, #65532	; 0xfffc
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008444:	490a      	ldr	r1, [pc, #40]	; (8008470 <TIM3_IRQHandler+0x34>)
 8008446:	4b0b      	ldr	r3, [pc, #44]	; (8008474 <TIM3_IRQHandler+0x38>)
 8008448:	68ca      	ldr	r2, [r1, #12]
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	f022 020f 	bic.w	r2, r2, #15
 8008450:	f003 030f 	and.w	r3, r3, #15
 8008454:	4313      	orrs	r3, r2
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8008456:	4a08      	ldr	r2, [pc, #32]	; (8008478 <TIM3_IRQHandler+0x3c>)
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008458:	60cb      	str	r3, [r1, #12]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 800845a:	8813      	ldrh	r3, [r2, #0]
 800845c:	f023 0301 	bic.w	r3, r3, #1
 8008460:	041b      	lsls	r3, r3, #16
 8008462:	0c1b      	lsrs	r3, r3, #16
 8008464:	8013      	strh	r3, [r2, #0]
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 8008466:	8214      	strh	r4, [r2, #16]
		TIM3->CNT = 0;
 8008468:	8490      	strh	r0, [r2, #36]	; 0x24
  TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
#endif
#ifdef WIN32
  nTimer0Out = 0;
#endif
}
 800846a:	bc10      	pop	{r4}
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	40010800 	.word	0x40010800
 8008474:	20000f44 	.word	0x20000f44
 8008478:	40000400 	.word	0x40000400

0800847c <st_generate_step_dir_invert_masks>:
{
  uint8_t idx;
  step_port_invert_mask = 0;
  dir_port_invert_mask = 0;
  for (idx=0; idx<N_AXIS; idx++) {
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800847c:	4b16      	ldr	r3, [pc, #88]	; (80084d8 <st_generate_step_dir_invert_masks+0x5c>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800847e:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008482:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008486:	f011 0f01 	tst.w	r1, #1
 800848a:	bf14      	ite	ne
 800848c:	2310      	movne	r3, #16
 800848e:	2300      	moveq	r3, #0
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008490:	f000 0201 	and.w	r2, r0, #1
 8008494:	f010 0f02 	tst.w	r0, #2
 8008498:	bf18      	it	ne
 800849a:	f042 0202 	orrne.w	r2, r2, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800849e:	f011 0f02 	tst.w	r1, #2
 80084a2:	bf18      	it	ne
 80084a4:	f043 0320 	orrne.w	r3, r3, #32
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80084a8:	f010 0f04 	tst.w	r0, #4
 80084ac:	bf18      	it	ne
 80084ae:	f042 0204 	orrne.w	r2, r2, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80084b2:	f011 0f04 	tst.w	r1, #4
 80084b6:	bf18      	it	ne
 80084b8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80084bc:	0700      	lsls	r0, r0, #28
 80084be:	bf48      	it	mi
 80084c0:	f042 0208 	orrmi.w	r2, r2, #8
 80084c4:	4805      	ldr	r0, [pc, #20]	; (80084dc <st_generate_step_dir_invert_masks+0x60>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80084c6:	0709      	lsls	r1, r1, #28
 80084c8:	4905      	ldr	r1, [pc, #20]	; (80084e0 <st_generate_step_dir_invert_masks+0x64>)
 80084ca:	bf48      	it	mi
 80084cc:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80084d0:	8002      	strh	r2, [r0, #0]
 80084d2:	800b      	strh	r3, [r1, #0]
  }
}
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	200015ac 	.word	0x200015ac
 80084dc:	20000f44 	.word	0x20000f44
 80084e0:	20000da2 	.word	0x20000da2

080084e4 <st_reset>:
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80084e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 80084e8:	2100      	movs	r1, #0


// Reset and clear stepper subsystem variables
void st_reset()
{
 80084ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80084ec:	8813      	ldrh	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80084ee:	4c3f      	ldr	r4, [pc, #252]	; (80085ec <st_reset+0x108>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80084f0:	f023 0301 	bic.w	r3, r3, #1
 80084f4:	041b      	lsls	r3, r3, #16
 80084f6:	0c1b      	lsrs	r3, r3, #16
 80084f8:	8013      	strh	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80084fa:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
  busy = false;
 80084fe:	4d3c      	ldr	r5, [pc, #240]	; (80085f0 <st_reset+0x10c>)
 8008500:	4e3c      	ldr	r6, [pc, #240]	; (80085f4 <st_reset+0x110>)
  TIM2->CNT = 0;
 8008502:	8491      	strh	r1, [r2, #36]	; 0x24
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008504:	28ff      	cmp	r0, #255	; 0xff
 8008506:	7833      	ldrb	r3, [r6, #0]
  busy = false;
 8008508:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800850a:	d05c      	beq.n	80085c6 <st_reset+0xe2>
 800850c:	2b04      	cmp	r3, #4
 800850e:	d160      	bne.n	80085d2 <st_reset+0xee>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008510:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8008514:	075f      	lsls	r7, r3, #29
 8008516:	d462      	bmi.n	80085de <st_reset+0xfa>
	  ResetStepperDisableBit();
 8008518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800851c:	4836      	ldr	r0, [pc, #216]	; (80085f8 <st_reset+0x114>)
 800851e:	f7f9 f8dd 	bl	80016dc <GPIO_ResetBits>
  // Initialize stepper driver idle state.
  st_go_idle();
  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
 8008522:	2238      	movs	r2, #56	; 0x38
 8008524:	2100      	movs	r1, #0
 8008526:	4835      	ldr	r0, [pc, #212]	; (80085fc <st_reset+0x118>)
 8008528:	f002 fcb9 	bl	800ae9e <memset>
  memset(&st, 0, sizeof(stepper_t));
 800852c:	2234      	movs	r2, #52	; 0x34
 800852e:	2100      	movs	r1, #0
 8008530:	4833      	ldr	r0, [pc, #204]	; (8008600 <st_reset+0x11c>)
 8008532:	f002 fcb4 	bl	800ae9e <memset>
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8008536:	2200      	movs	r2, #0
  segment_buffer_tail = 0;
 8008538:	4832      	ldr	r0, [pc, #200]	; (8008604 <st_reset+0x120>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800853a:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
  segment_buffer_tail = 0;
 800853e:	7002      	strb	r2, [r0, #0]
  segment_buffer_head = 0; // empty = tail
  segment_next_head = 1;
 8008540:	2601      	movs	r6, #1
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8008542:	4f31      	ldr	r7, [pc, #196]	; (8008608 <st_reset+0x124>)
  segment_buffer_head = 0; // empty = tail
 8008544:	4831      	ldr	r0, [pc, #196]	; (800860c <st_reset+0x128>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008546:	f013 0f01 	tst.w	r3, #1
  busy = false;
 800854a:	702a      	strb	r2, [r5, #0]
  pl_block = NULL;  // Planner block pointer used by segment buffer
 800854c:	603a      	str	r2, [r7, #0]
  segment_buffer_head = 0; // empty = tail
 800854e:	7002      	strb	r2, [r0, #0]
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008550:	bf18      	it	ne
 8008552:	2210      	movne	r2, #16
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008554:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
  segment_next_head = 1;
 8008558:	4c2d      	ldr	r4, [pc, #180]	; (8008610 <st_reset+0x12c>)
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800855a:	ea01 0006 	and.w	r0, r1, r6
  segment_next_head = 1;
 800855e:	7026      	strb	r6, [r4, #0]
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008560:	078c      	lsls	r4, r1, #30
 8008562:	bf48      	it	mi
 8008564:	f040 0002 	orrmi.w	r0, r0, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008568:	079f      	lsls	r7, r3, #30
 800856a:	bf48      	it	mi
 800856c:	f042 0220 	orrmi.w	r2, r2, #32
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008570:	074e      	lsls	r6, r1, #29
 8008572:	bf48      	it	mi
 8008574:	f040 0004 	orrmi.w	r0, r0, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008578:	075d      	lsls	r5, r3, #29
 800857a:	bf48      	it	mi
 800857c:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008580:	070c      	lsls	r4, r1, #28
 8008582:	bf48      	it	mi
 8008584:	f040 0008 	orrmi.w	r0, r0, #8
 8008588:	4d22      	ldr	r5, [pc, #136]	; (8008614 <st_reset+0x130>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800858a:	0719      	lsls	r1, r3, #28
 800858c:	4c22      	ldr	r4, [pc, #136]	; (8008618 <st_reset+0x134>)

  st_generate_step_dir_invert_masks();
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 800858e:	4b1c      	ldr	r3, [pc, #112]	; (8008600 <st_reset+0x11c>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008590:	bf48      	it	mi
 8008592:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
#ifdef AVRTARGET
  STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
#endif
#ifdef STM32F103C8
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 8008596:	4921      	ldr	r1, [pc, #132]	; (800861c <st_reset+0x138>)
 8008598:	8028      	strh	r0, [r5, #0]
 800859a:	8022      	strh	r2, [r4, #0]
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 800859c:	82da      	strh	r2, [r3, #22]
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 800859e:	880b      	ldrh	r3, [r1, #0]
 80085a0:	07db      	lsls	r3, r3, #31
 80085a2:	d4fc      	bmi.n	800859e <st_reset+0xba>
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER &= ~TIM_DIER_CC1IE; //compare interrupt disable
//#endif
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 80085a4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80085a8:	4c13      	ldr	r4, [pc, #76]	; (80085f8 <st_reset+0x114>)
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 80085aa:	820b      	strh	r3, [r1, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80085ac:	68e3      	ldr	r3, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 80085ae:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80085b2:	f023 030f 	bic.w	r3, r3, #15
 80085b6:	4303      	orrs	r3, r0
 80085b8:	60e3      	str	r3, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 80085ba:	68e3      	ldr	r3, [r4, #12]
 80085bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085c0:	431a      	orrs	r2, r3
 80085c2:	60e2      	str	r2, [r4, #12]
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
//#endif
#endif
}
 80085c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80085c6:	4a16      	ldr	r2, [pc, #88]	; (8008620 <st_reset+0x13c>)
 80085c8:	7812      	ldrb	r2, [r2, #0]
 80085ca:	2a00      	cmp	r2, #0
 80085cc:	d19e      	bne.n	800850c <st_reset+0x28>
 80085ce:	2b80      	cmp	r3, #128	; 0x80
 80085d0:	d19e      	bne.n	8008510 <st_reset+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 80085d2:	f7fb fcab 	bl	8003f2c <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80085d6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80085da:	075e      	lsls	r6, r3, #29
 80085dc:	d49c      	bmi.n	8008518 <st_reset+0x34>
	  SetStepperDisableBit();
 80085de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085e2:	4805      	ldr	r0, [pc, #20]	; (80085f8 <st_reset+0x114>)
 80085e4:	f7f9 f878 	bl	80016d8 <GPIO_SetBits>
 80085e8:	e79b      	b.n	8008522 <st_reset+0x3e>
 80085ea:	bf00      	nop
 80085ec:	200015ac 	.word	0x200015ac
 80085f0:	20000da0 	.word	0x20000da0
 80085f4:	200013f0 	.word	0x200013f0
 80085f8:	40010800 	.word	0x40010800
 80085fc:	20000da8 	.word	0x20000da8
 8008600:	20000e34 	.word	0x20000e34
 8008604:	20000e31 	.word	0x20000e31
 8008608:	20000da4 	.word	0x20000da4
 800860c:	20000e30 	.word	0x20000e30
 8008610:	20000e32 	.word	0x20000e32
 8008614:	20000f44 	.word	0x20000f44
 8008618:	20000da2 	.word	0x20000da2
 800861c:	40000400 	.word	0x40000400
 8008620:	20001428 	.word	0x20001428

08008624 <stepper_init>:

#endif

// Initialize and start the stepper motor subsystem
void stepper_init()
{
 8008624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Configure step and direction interface pins
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 8008628:	2101      	movs	r1, #1
{
 800862a:	b086      	sub	sp, #24
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 800862c:	2004      	movs	r0, #4
 800862e:	f7f9 f8b1 	bl	8001794 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8008632:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8008636:	2610      	movs	r6, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008638:	2303      	movs	r3, #3
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 800863a:	ac06      	add	r4, sp, #24
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 800863c:	4f4c      	ldr	r7, [pc, #304]	; (8008770 <stepper_init+0x14c>)
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 800863e:	f824 2d14 	strh.w	r2, [r4, #-20]!
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8008642:	4621      	mov	r1, r4
 8008644:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008646:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800864a:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 800864e:	f7f8 feb5 	bl	80013bc <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_STEP_PORT, ENABLE);
 8008652:	2101      	movs	r1, #1
 8008654:	2004      	movs	r0, #4
 8008656:	f7f9 f89d 	bl	8001794 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 800865a:	230f      	movs	r3, #15
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 800865c:	4621      	mov	r1, r4
 800865e:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 8008660:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 8008664:	f7f8 feaa 	bl	80013bc <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_DIRECTION_PORT, ENABLE);
 8008668:	2101      	movs	r1, #1
 800866a:	2004      	movs	r0, #4
 800866c:	f7f9 f892 	bl	8001794 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 8008670:	23f0      	movs	r3, #240	; 0xf0
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Period = Period - 1;
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 8008672:	2500      	movs	r5, #0
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008674:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8008784 <stepper_init+0x160>
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 8008678:	4621      	mov	r1, r4
 800867a:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 800867c:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 8008680:	f7f8 fe9c 	bl	80013bc <GPIO_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008684:	f8d8 301c 	ldr.w	r3, [r8, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008688:	a903      	add	r1, sp, #12
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	f8c8 301c 	str.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008692:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008696:	e9cd 5503 	strd	r5, r5, [sp, #12]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 800869a:	f7f9 f893 	bl	80017c4 <TIM_TimeBaseInit>

	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 800869e:	2101      	movs	r1, #1
 80086a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80086a4:	f7f9 f95c 	bl	8001960 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 80086a8:	2201      	movs	r2, #1
 80086aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80086ae:	4611      	mov	r1, r2
 80086b0:	f7f9 f944 	bl	800193c <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 80086b4:	2101      	movs	r1, #1
 80086b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80086ba:	f7f9 f925 	bl	8001908 <TIM_Cmd>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80086be:	f44f 7040 	mov.w	r0, #768	; 0x300
 80086c2:	f7f8 fd1b 	bl	80010fc <NVIC_PriorityGroupConfig>
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 80086c6:	4b2b      	ldr	r3, [pc, #172]	; (8008774 <stepper_init+0x150>)
 80086c8:	af06      	add	r7, sp, #24
 80086ca:	f847 3d10 	str.w	r3, [r7, #-16]!
	else if (TIMER == TIM4) { NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn; }

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PP;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80086ce:	4638      	mov	r0, r7
 80086d0:	f7f8 fd1e 	bl	8001110 <NVIC_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 80086d4:	f8d8 301c 	ldr.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80086d8:	4c27      	ldr	r4, [pc, #156]	; (8008778 <stepper_init+0x154>)
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 80086da:	f043 0302 	orr.w	r3, r3, #2
 80086de:	f8c8 301c 	str.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80086e2:	a903      	add	r1, sp, #12
 80086e4:	4620      	mov	r0, r4
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80086e6:	e9cd 5503 	strd	r5, r5, [sp, #12]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80086ea:	f7f9 f86b 	bl	80017c4 <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 80086ee:	4620      	mov	r0, r4
 80086f0:	2101      	movs	r1, #1
 80086f2:	f7f9 f935 	bl	8001960 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 80086f6:	2201      	movs	r2, #1
 80086f8:	4620      	mov	r0, r4
 80086fa:	4611      	mov	r1, r2
 80086fc:	f7f9 f91e 	bl	800193c <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 8008700:	2101      	movs	r1, #1
 8008702:	4620      	mov	r0, r4
 8008704:	f7f9 f900 	bl	8001908 <TIM_Cmd>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8008708:	f44f 7040 	mov.w	r0, #768	; 0x300
 800870c:	f7f8 fcf6 	bl	80010fc <NVIC_PriorityGroupConfig>
	NVIC_Init(&NVIC_InitStructure);
 8008710:	4638      	mov	r0, r7
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8008712:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 8008716:	4b19      	ldr	r3, [pc, #100]	; (800877c <stepper_init+0x158>)
 8008718:	9302      	str	r3, [sp, #8]
	NVIC_Init(&NVIC_InitStructure);
 800871a:	f7f8 fcf9 	bl	8001110 <NVIC_Init>
 800871e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8008722:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8008726:	883b      	ldrh	r3, [r7, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8008728:	4a15      	ldr	r2, [pc, #84]	; (8008780 <stepper_init+0x15c>)
 800872a:	f023 0301 	bic.w	r3, r3, #1
 800872e:	40b3      	lsls	r3, r6
 8008730:	40f3      	lsrs	r3, r6
 8008732:	803b      	strh	r3, [r7, #0]
	TIM2->SR &= ~TIM_SR_UIF;
 8008734:	8a3b      	ldrh	r3, [r7, #16]
 8008736:	f023 0301 	bic.w	r3, r3, #1
 800873a:	40b3      	lsls	r3, r6
 800873c:	40f3      	lsrs	r3, r6
 800873e:	823b      	strh	r3, [r7, #16]
	TIM2->CNT = 0;
 8008740:	84bd      	strh	r5, [r7, #36]	; 0x24
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8008742:	8823      	ldrh	r3, [r4, #0]
 8008744:	f023 0301 	bic.w	r3, r3, #1
 8008748:	40b3      	lsls	r3, r6
 800874a:	40f3      	lsrs	r3, r6
 800874c:	8023      	strh	r3, [r4, #0]
	TIM3->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 800874e:	8a23      	ldrh	r3, [r4, #16]
 8008750:	f023 0303 	bic.w	r3, r3, #3
 8008754:	40b3      	lsls	r3, r6
 8008756:	40f3      	lsrs	r3, r6
 8008758:	8223      	strh	r3, [r4, #16]
	TIM3->CNT = 0;
 800875a:	84a5      	strh	r5, [r4, #36]	; 0x24
 800875c:	f882 531d 	strb.w	r5, [r2, #797]	; 0x31d
 8008760:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8008764:	6010      	str	r0, [r2, #0]
 8008766:	6011      	str	r1, [r2, #0]
}
 8008768:	b006      	add	sp, #24
 800876a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800876e:	bf00      	nop
 8008770:	40010800 	.word	0x40010800
 8008774:	0101011c 	.word	0x0101011c
 8008778:	40000400 	.word	0x40000400
 800877c:	0101011d 	.word	0x0101011d
 8008780:	e000e100 	.word	0xe000e100
 8008784:	40021000 	.word	0x40021000

08008788 <st_update_plan_block_parameters>:
{
 8008788:	b538      	push	{r3, r4, r5, lr}
  if (pl_block != NULL) { // Ignore if at start of a new block.
 800878a:	4c08      	ldr	r4, [pc, #32]	; (80087ac <st_update_plan_block_parameters+0x24>)
 800878c:	6825      	ldr	r5, [r4, #0]
 800878e:	b15d      	cbz	r5, 80087a8 <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8008790:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <st_update_plan_block_parameters+0x28>)
 8008792:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008794:	69d9      	ldr	r1, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 800879c:	4608      	mov	r0, r1
 800879e:	f7f8 fa8b 	bl	8000cb8 <__aeabi_fmul>
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 80087a2:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 80087a4:	61a8      	str	r0, [r5, #24]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 80087a6:	6023      	str	r3, [r4, #0]
}
 80087a8:	bd38      	pop	{r3, r4, r5, pc}
 80087aa:	bf00      	nop
 80087ac:	20000da4 	.word	0x20000da4
 80087b0:	20000da8 	.word	0x20000da8

080087b4 <st_prep_buffer>:
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 80087b4:	4b63      	ldr	r3, [pc, #396]	; (8008944 <st_prep_buffer+0x190>)
 80087b6:	791b      	ldrb	r3, [r3, #4]
 80087b8:	07db      	lsls	r3, r3, #31
 80087ba:	f100 852c 	bmi.w	8009216 <st_prep_buffer+0xa62>
{
 80087be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c2:	b08f      	sub	sp, #60	; 0x3c
 80087c4:	4b60      	ldr	r3, [pc, #384]	; (8008948 <st_prep_buffer+0x194>)
 80087c6:	781f      	ldrb	r7, [r3, #0]
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 80087c8:	4b60      	ldr	r3, [pc, #384]	; (800894c <st_prep_buffer+0x198>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	42bb      	cmp	r3, r7
 80087ce:	f000 8325 	beq.w	8008e1c <st_prep_buffer+0x668>
    if (pl_block == NULL) {
 80087d2:	4b5f      	ldr	r3, [pc, #380]	; (8008950 <st_prep_buffer+0x19c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 8322 	beq.w	8008e22 <st_prep_buffer+0x66e>
 80087de:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8008964 <st_prep_buffer+0x1b0>
 80087e2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80087e6:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80087ea:	f8d9 a018 	ldr.w	sl, [r9, #24]
 80087ee:	9301      	str	r3, [sp, #4]
 80087f0:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80087f4:	f899 8014 	ldrb.w	r8, [r9, #20]
 80087f8:	9303      	str	r3, [sp, #12]
 80087fa:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80087fe:	9307      	str	r3, [sp, #28]
 8008800:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8008804:	9302      	str	r3, [sp, #8]
 8008806:	4b53      	ldr	r3, [pc, #332]	; (8008954 <st_prep_buffer+0x1a0>)
 8008808:	930b      	str	r3, [sp, #44]	; 0x2c
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 800880a:	4b53      	ldr	r3, [pc, #332]	; (8008958 <st_prep_buffer+0x1a4>)
    prep_segment->st_block_index = prep.st_block_index;
 800880c:	4953      	ldr	r1, [pc, #332]	; (800895c <st_prep_buffer+0x1a8>)
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 800880e:	781b      	ldrb	r3, [r3, #0]
    prep_segment->st_block_index = prep.st_block_index;
 8008810:	f899 2000 	ldrb.w	r2, [r9]
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008814:	9308      	str	r3, [sp, #32]
    prep_segment->st_block_index = prep.st_block_index;
 8008816:	00db      	lsls	r3, r3, #3
 8008818:	9305      	str	r3, [sp, #20]
 800881a:	18cb      	adds	r3, r1, r3
 800881c:	711a      	strb	r2, [r3, #4]
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 800881e:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8008822:	4658      	mov	r0, fp
 8008824:	f7f8 f93e 	bl	8000aa4 <__aeabi_fsub>
 8008828:	2100      	movs	r1, #0
 800882a:	9004      	str	r0, [sp, #16]
 800882c:	f7f8 fbf6 	bl	800101c <__aeabi_fcmpge>
 8008830:	b908      	cbnz	r0, 8008836 <st_prep_buffer+0x82>
 8008832:	2300      	movs	r3, #0
 8008834:	9304      	str	r3, [sp, #16]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008836:	9c02      	ldr	r4, [sp, #8]
 8008838:	4658      	mov	r0, fp
 800883a:	4621      	mov	r1, r4
 800883c:	f7f8 f932 	bl	8000aa4 <__aeabi_fsub>
 8008840:	4601      	mov	r1, r0
 8008842:	f7f8 f931 	bl	8000aa8 <__addsf3>
 8008846:	9901      	ldr	r1, [sp, #4]
 8008848:	9006      	str	r0, [sp, #24]
 800884a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800884e:	f7f8 fae7 	bl	8000e20 <__aeabi_fdiv>
 8008852:	4621      	mov	r1, r4
 8008854:	900a      	str	r0, [sp, #40]	; 0x28
 8008856:	9803      	ldr	r0, [sp, #12]
 8008858:	f8d9 601c 	ldr.w	r6, [r9, #28]
 800885c:	f7f8 fbc0 	bl	8000fe0 <__aeabi_fcmpeq>
 8008860:	2800      	cmp	r0, #0
 8008862:	f000 8290 	beq.w	8008d86 <st_prep_buffer+0x5d2>
 8008866:	f04f 0302 	mov.w	r3, #2
 800886a:	4d3d      	ldr	r5, [pc, #244]	; (8008960 <st_prep_buffer+0x1ac>)
 800886c:	2400      	movs	r4, #0
 800886e:	462f      	mov	r7, r5
 8008870:	b2db      	uxtb	r3, r3
 8008872:	9309      	str	r3, [sp, #36]	; 0x24
 8008874:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
      switch (prep.ramp_type) {
 8008878:	f1b8 0f01 	cmp.w	r8, #1
 800887c:	d038      	beq.n	80088f0 <st_prep_buffer+0x13c>
 800887e:	f0c0 808e 	bcc.w	800899e <st_prep_buffer+0x1ea>
 8008882:	f1b8 0f03 	cmp.w	r8, #3
 8008886:	f040 81df 	bne.w	8008c48 <st_prep_buffer+0x494>
          speed_var = pl_block->acceleration*time_var;
 800888a:	9b00      	ldr	r3, [sp, #0]
 800888c:	4628      	mov	r0, r5
 800888e:	6a19      	ldr	r1, [r3, #32]
 8008890:	f7f8 fa12 	bl	8000cb8 <__aeabi_fmul>
 8008894:	4681      	mov	r9, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008896:	9901      	ldr	r1, [sp, #4]
 8008898:	4630      	mov	r0, r6
 800889a:	f7f8 f903 	bl	8000aa4 <__aeabi_fsub>
 800889e:	4649      	mov	r1, r9
 80088a0:	f7f8 fbb2 	bl	8001008 <__aeabi_fcmple>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f000 8221 	beq.w	8008cec <st_prep_buffer+0x538>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 80088aa:	9901      	ldr	r1, [sp, #4]
 80088ac:	4630      	mov	r0, r6
 80088ae:	f7f8 f8fb 	bl	8000aa8 <__addsf3>
 80088b2:	4601      	mov	r1, r0
 80088b4:	9806      	ldr	r0, [sp, #24]
 80088b6:	f7f8 fab3 	bl	8000e20 <__aeabi_fdiv>
      dt += time_var; // Add computed ramp time to total segment time.
 80088ba:	4601      	mov	r1, r0
 80088bc:	4620      	mov	r0, r4
 80088be:	f7f8 f8f3 	bl	8000aa8 <__addsf3>
 80088c2:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80088c4:	4601      	mov	r1, r0
 80088c6:	4638      	mov	r0, r7
 80088c8:	f7f8 fbb2 	bl	8001030 <__aeabi_fcmpgt>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	f000 823b 	beq.w	8008d48 <st_prep_buffer+0x594>
 80088d2:	4621      	mov	r1, r4
 80088d4:	4638      	mov	r0, r7
 80088d6:	f7f8 f8e5 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80088da:	9902      	ldr	r1, [sp, #8]
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80088dc:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80088de:	4650      	mov	r0, sl
 80088e0:	f7f8 fb88 	bl	8000ff4 <__aeabi_fcmplt>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	f000 84cd 	beq.w	8009284 <st_prep_buffer+0xad0>
            prep.current_speed = prep.maximum_speed;
 80088ea:	9e01      	ldr	r6, [sp, #4]
						mm_remaining = prep.accelerate_until;
 80088ec:	f8dd b008 	ldr.w	fp, [sp, #8]
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 80088f0:	9901      	ldr	r1, [sp, #4]
 80088f2:	4628      	mov	r0, r5
 80088f4:	f7f8 f9e0 	bl	8000cb8 <__aeabi_fmul>
 80088f8:	4601      	mov	r1, r0
 80088fa:	4658      	mov	r0, fp
 80088fc:	f7f8 f8d2 	bl	8000aa4 <__aeabi_fsub>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008900:	9903      	ldr	r1, [sp, #12]
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 8008902:	4680      	mov	r8, r0
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008904:	f7f8 fb76 	bl	8000ff4 <__aeabi_fcmplt>
 8008908:	2800      	cmp	r0, #0
 800890a:	f040 812b 	bne.w	8008b64 <st_prep_buffer+0x3b0>
      dt += time_var; // Add computed ramp time to total segment time.
 800890e:	4629      	mov	r1, r5
 8008910:	4620      	mov	r0, r4
 8008912:	f7f8 f8c9 	bl	8000aa8 <__addsf3>
 8008916:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008918:	4601      	mov	r1, r0
 800891a:	4638      	mov	r0, r7
 800891c:	f7f8 fb88 	bl	8001030 <__aeabi_fcmpgt>
 8008920:	2800      	cmp	r0, #0
 8008922:	f000 822c 	beq.w	8008d7e <st_prep_buffer+0x5ca>
 8008926:	4621      	mov	r1, r4
 8008928:	4638      	mov	r0, r7
 800892a:	f7f8 f8bb 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800892e:	4651      	mov	r1, sl
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008930:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008932:	4640      	mov	r0, r8
 8008934:	f7f8 fb7c 	bl	8001030 <__aeabi_fcmpgt>
 8008938:	2800      	cmp	r0, #0
 800893a:	f000 84b3 	beq.w	80092a4 <st_prep_buffer+0xaf0>
            mm_remaining = mm_var;
 800893e:	46c3      	mov	fp, r8
 8008940:	e7d6      	b.n	80088f0 <st_prep_buffer+0x13c>
 8008942:	bf00      	nop
 8008944:	200013f0 	.word	0x200013f0
 8008948:	20000e32 	.word	0x20000e32
 800894c:	20000e31 	.word	0x20000e31
 8008950:	20000da4 	.word	0x20000da4
 8008954:	20000f40 	.word	0x20000f40
 8008958:	20000e30 	.word	0x20000e30
 800895c:	20000de0 	.word	0x20000de0
 8008960:	392ec33e 	.word	0x392ec33e
 8008964:	20000da8 	.word	0x20000da8
            prep.current_speed += speed_var;
 8008968:	4649      	mov	r1, r9
 800896a:	4630      	mov	r0, r6
 800896c:	f7f8 f89c 	bl	8000aa8 <__addsf3>
      dt += time_var; // Add computed ramp time to total segment time.
 8008970:	4629      	mov	r1, r5
            prep.current_speed += speed_var;
 8008972:	4606      	mov	r6, r0
      dt += time_var; // Add computed ramp time to total segment time.
 8008974:	4620      	mov	r0, r4
 8008976:	f7f8 f897 	bl	8000aa8 <__addsf3>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800897a:	4639      	mov	r1, r7
      dt += time_var; // Add computed ramp time to total segment time.
 800897c:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800897e:	f7f8 fb39 	bl	8000ff4 <__aeabi_fcmplt>
 8008982:	2800      	cmp	r0, #0
 8008984:	f000 8135 	beq.w	8008bf2 <st_prep_buffer+0x43e>
 8008988:	4621      	mov	r1, r4
 800898a:	4638      	mov	r0, r7
 800898c:	f7f8 f88a 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008990:	4651      	mov	r1, sl
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008992:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008994:	4658      	mov	r0, fp
 8008996:	f7f8 fb4b 	bl	8001030 <__aeabi_fcmpgt>
 800899a:	2800      	cmp	r0, #0
 800899c:	d03f      	beq.n	8008a1e <st_prep_buffer+0x26a>
          speed_var = pl_block->acceleration*time_var;
 800899e:	9b00      	ldr	r3, [sp, #0]
 80089a0:	4628      	mov	r0, r5
 80089a2:	6a19      	ldr	r1, [r3, #32]
 80089a4:	f7f8 f988 	bl	8000cb8 <__aeabi_fmul>
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 80089a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
          speed_var = pl_block->acceleration*time_var;
 80089ac:	4681      	mov	r9, r0
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 80089ae:	f7f8 f983 	bl	8000cb8 <__aeabi_fmul>
 80089b2:	4631      	mov	r1, r6
 80089b4:	f7f8 f878 	bl	8000aa8 <__addsf3>
 80089b8:	4629      	mov	r1, r5
 80089ba:	f7f8 f97d 	bl	8000cb8 <__aeabi_fmul>
 80089be:	4601      	mov	r1, r0
 80089c0:	4658      	mov	r0, fp
 80089c2:	f7f8 f86f 	bl	8000aa4 <__aeabi_fsub>
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 80089c6:	9902      	ldr	r1, [sp, #8]
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 80089c8:	4683      	mov	fp, r0
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 80089ca:	f7f8 fb13 	bl	8000ff4 <__aeabi_fcmplt>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d0ca      	beq.n	8008968 <st_prep_buffer+0x1b4>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 80089d2:	4630      	mov	r0, r6
 80089d4:	9e01      	ldr	r6, [sp, #4]
 80089d6:	4631      	mov	r1, r6
 80089d8:	f7f8 f866 	bl	8000aa8 <__addsf3>
 80089dc:	4601      	mov	r1, r0
 80089de:	9806      	ldr	r0, [sp, #24]
 80089e0:	f7f8 fa1e 	bl	8000e20 <__aeabi_fdiv>
 80089e4:	4605      	mov	r5, r0
 80089e6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
            mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 80089ea:	f8dd b008 	ldr.w	fp, [sp, #8]
      dt += time_var; // Add computed ramp time to total segment time.
 80089ee:	4629      	mov	r1, r5
 80089f0:	4620      	mov	r0, r4
 80089f2:	f7f8 f859 	bl	8000aa8 <__addsf3>
 80089f6:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80089f8:	4601      	mov	r1, r0
 80089fa:	4638      	mov	r0, r7
 80089fc:	f7f8 fb18 	bl	8001030 <__aeabi_fcmpgt>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	f000 80f6 	beq.w	8008bf2 <st_prep_buffer+0x43e>
 8008a06:	4621      	mov	r1, r4
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f7f8 f84b 	bl	8000aa4 <__aeabi_fsub>
 8008a0e:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008a10:	4651      	mov	r1, sl
 8008a12:	4658      	mov	r0, fp
 8008a14:	f7f8 fb0c 	bl	8001030 <__aeabi_fcmpgt>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	f47f af2d 	bne.w	8008878 <st_prep_buffer+0xc4>
 8008a1e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
      if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8008a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a24:	f8c9 601c 	str.w	r6, [r9, #28]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f889 8014 	strb.w	r8, [r9, #20]
 8008a2e:	7d9b      	ldrb	r3, [r3, #22]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f040 81ab 	bne.w	8008d8c <st_prep_buffer+0x5d8>
 8008a36:	4ba2      	ldr	r3, [pc, #648]	; (8008cc0 <st_prep_buffer+0x50c>)
 8008a38:	f893 a004 	ldrb.w	sl, [r3, #4]
 8008a3c:	f01a 0f08 	tst.w	sl, #8
 8008a40:	f040 8244 	bne.w	8008ecc <st_prep_buffer+0x718>
 8008a44:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8008a48:	9a05      	ldr	r2, [sp, #20]
 8008a4a:	4b9e      	ldr	r3, [pc, #632]	; (8008cc4 <st_prep_buffer+0x510>)
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8008a4c:	f8d9 100c 	ldr.w	r1, [r9, #12]
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8008a50:	4413      	add	r3, r2
 8008a52:	80d8      	strh	r0, [r3, #6]
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8008a54:	4658      	mov	r0, fp
 8008a56:	f7f8 f92f 	bl	8000cb8 <__aeabi_fmul>
 8008a5a:	4606      	mov	r6, r0
    float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 8008a5c:	f002 faa4 	bl	800afa8 <ceilf>
 8008a60:	4605      	mov	r5, r0
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8008a62:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8008a66:	f002 fa9f 	bl	800afa8 <ceilf>
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8008a6a:	4629      	mov	r1, r5
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8008a6c:	4607      	mov	r7, r0
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8008a6e:	f7f8 f819 	bl	8000aa4 <__aeabi_fsub>
 8008a72:	f7f8 fb23 	bl	80010bc <__aeabi_f2uiz>
 8008a76:	4b93      	ldr	r3, [pc, #588]	; (8008cc4 <st_prep_buffer+0x510>)
 8008a78:	9a08      	ldr	r2, [sp, #32]
 8008a7a:	fa1f f880 	uxth.w	r8, r0
 8008a7e:	f823 8032 	strh.w	r8, [r3, r2, lsl #3]
    if (prep_segment->n_step == 0) {
 8008a82:	f1b8 0f00 	cmp.w	r8, #0
 8008a86:	d103      	bne.n	8008a90 <st_prep_buffer+0x2dc>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 8008a88:	f01a 0f02 	tst.w	sl, #2
 8008a8c:	f040 8423 	bne.w	80092d6 <st_prep_buffer+0xb22>
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008a90:	4620      	mov	r0, r4
 8008a92:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a96:	f7f8 f807 	bl	8000aa8 <__addsf3>
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008a9a:	4631      	mov	r1, r6
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008a9c:	4604      	mov	r4, r0
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	f7f8 f800 	bl	8000aa4 <__aeabi_fsub>
 8008aa4:	4601      	mov	r1, r0
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7f8 f9ba 	bl	8000e20 <__aeabi_fdiv>
 8008aac:	4604      	mov	r4, r0
	uint32_t cycles = (uint32_t)ceilf((TICKS_PER_MICROSECOND * 1000000) *inv_rate * 60); // (cycles/step)
 8008aae:	4a86      	ldr	r2, [pc, #536]	; (8008cc8 <st_prep_buffer+0x514>)
 8008ab0:	4b86      	ldr	r3, [pc, #536]	; (8008ccc <st_prep_buffer+0x518>)
 8008ab2:	6817      	ldr	r7, [r2, #0]
 8008ab4:	4886      	ldr	r0, [pc, #536]	; (8008cd0 <st_prep_buffer+0x51c>)
 8008ab6:	fba3 2307 	umull	r2, r3, r3, r7
 8008aba:	0c9b      	lsrs	r3, r3, #18
 8008abc:	fb00 f003 	mul.w	r0, r0, r3
 8008ac0:	f7f8 f8a2 	bl	8000c08 <__aeabi_ui2f>
 8008ac4:	4983      	ldr	r1, [pc, #524]	; (8008cd4 <st_prep_buffer+0x520>)
 8008ac6:	f7f8 f8f7 	bl	8000cb8 <__aeabi_fmul>
 8008aca:	4621      	mov	r1, r4
 8008acc:	f7f8 f8f4 	bl	8000cb8 <__aeabi_fmul>
 8008ad0:	f002 fa6a 	bl	800afa8 <ceilf>
 8008ad4:	f7f8 faf2 	bl	80010bc <__aeabi_f2uiz>
      if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 8008ad8:	4b7f      	ldr	r3, [pc, #508]	; (8008cd8 <st_prep_buffer+0x524>)
 8008ada:	fba3 3707 	umull	r3, r7, r3, r7
 8008ade:	ebb0 2f57 	cmp.w	r0, r7, lsr #9
 8008ae2:	f080 8169 	bcs.w	8008db8 <st_prep_buffer+0x604>
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	9905      	ldr	r1, [sp, #20]
 8008aea:	4b76      	ldr	r3, [pc, #472]	; (8008cc4 <st_prep_buffer+0x510>)
 8008aec:	440b      	add	r3, r1
 8008aee:	715a      	strb	r2, [r3, #5]
 8008af0:	460a      	mov	r2, r1
 8008af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008af6:	4298      	cmp	r0, r3
 8008af8:	bf28      	it	cs
 8008afa:	4618      	movcs	r0, r3
    segment_buffer_head = segment_next_head;
 8008afc:	4977      	ldr	r1, [pc, #476]	; (8008cdc <st_prep_buffer+0x528>)
 8008afe:	4f71      	ldr	r7, [pc, #452]	; (8008cc4 <st_prep_buffer+0x510>)
 8008b00:	780b      	ldrb	r3, [r1, #0]
 8008b02:	443a      	add	r2, r7
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008b04:	1c5f      	adds	r7, r3, #1
 8008b06:	b2ff      	uxtb	r7, r7
 8008b08:	8050      	strh	r0, [r2, #2]
    segment_buffer_head = segment_next_head;
 8008b0a:	4a75      	ldr	r2, [pc, #468]	; (8008ce0 <st_prep_buffer+0x52c>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008b0c:	2f0a      	cmp	r7, #10
    segment_buffer_head = segment_next_head;
 8008b0e:	7013      	strb	r3, [r2, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008b10:	f000 8164 	beq.w	8008ddc <st_prep_buffer+0x628>
    pl_block->millimeters = mm_remaining;
 8008b14:	4b73      	ldr	r3, [pc, #460]	; (8008ce4 <st_prep_buffer+0x530>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008b16:	700f      	strb	r7, [r1, #0]
    pl_block->millimeters = mm_remaining;
 8008b18:	681b      	ldr	r3, [r3, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008b1a:	4631      	mov	r1, r6
    pl_block->millimeters = mm_remaining;
 8008b1c:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
    prep.steps_remaining = n_steps_remaining;
 8008b20:	f8c9 5008 	str.w	r5, [r9, #8]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008b24:	4628      	mov	r0, r5
 8008b26:	f7f7 ffbd 	bl	8000aa4 <__aeabi_fsub>
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	f7f8 f8c4 	bl	8000cb8 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8008b30:	4659      	mov	r1, fp
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008b32:	f8c9 0004 	str.w	r0, [r9, #4]
    if (mm_remaining == prep.mm_complete) {
 8008b36:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8008b3a:	f7f8 fa51 	bl	8000fe0 <__aeabi_fcmpeq>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	f43f ae42 	beq.w	80087c8 <st_prep_buffer+0x14>
      if (mm_remaining > 0.0f) { // At end of forced-termination.
 8008b44:	4658      	mov	r0, fp
 8008b46:	2100      	movs	r1, #0
 8008b48:	f7f8 fa72 	bl	8001030 <__aeabi_fcmpgt>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f040 83c2 	bne.w	80092d6 <st_prep_buffer+0xb22>
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8008b52:	f01a 0304 	ands.w	r3, sl, #4
 8008b56:	f040 83be 	bne.w	80092d6 <st_prep_buffer+0xb22>
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 8008b5a:	4a62      	ldr	r2, [pc, #392]	; (8008ce4 <st_prep_buffer+0x530>)
 8008b5c:	6013      	str	r3, [r2, #0]
        plan_discard_current_block();
 8008b5e:	f7fb fbdb 	bl	8004318 <plan_discard_current_block>
 8008b62:	e62f      	b.n	80087c4 <st_prep_buffer+0x10>
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8008b64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008b68:	4658      	mov	r0, fp
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	f7f7 ff9a 	bl	8000aa4 <__aeabi_fsub>
 8008b70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b72:	f7f8 f8a1 	bl	8000cb8 <__aeabi_fmul>
      dt += time_var; // Add computed ramp time to total segment time.
 8008b76:	4601      	mov	r1, r0
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7f7 ff95 	bl	8000aa8 <__addsf3>
 8008b7e:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008b80:	4601      	mov	r1, r0
 8008b82:	4638      	mov	r0, r7
 8008b84:	f7f8 fa54 	bl	8001030 <__aeabi_fcmpgt>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d043      	beq.n	8008c14 <st_prep_buffer+0x460>
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	4638      	mov	r0, r7
 8008b90:	f7f7 ff88 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008b94:	4651      	mov	r1, sl
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008b96:	4680      	mov	r8, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008b98:	4648      	mov	r0, r9
 8008b9a:	f7f8 fa49 	bl	8001030 <__aeabi_fcmpgt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f000 8285 	beq.w	80090ae <st_prep_buffer+0x8fa>
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008ba4:	9b00      	ldr	r3, [sp, #0]
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	6a19      	ldr	r1, [r3, #32]
 8008baa:	f7f8 f885 	bl	8000cb8 <__aeabi_fmul>
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008bae:	4631      	mov	r1, r6
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008bb0:	4605      	mov	r5, r0
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008bb2:	f7f8 fa1f 	bl	8000ff4 <__aeabi_fcmplt>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d06b      	beq.n	8008c92 <st_prep_buffer+0x4de>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008bba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f7f8 f87a 	bl	8000cb8 <__aeabi_fmul>
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	f7f7 ff6d 	bl	8000aa4 <__aeabi_fsub>
 8008bca:	4641      	mov	r1, r8
 8008bcc:	f7f8 f874 	bl	8000cb8 <__aeabi_fmul>
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	f7f7 ff69 	bl	8000aa8 <__addsf3>
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008bd6:	4651      	mov	r1, sl
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008bd8:	4683      	mov	fp, r0
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008bda:	f7f8 fa29 	bl	8001030 <__aeabi_fcmpgt>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d057      	beq.n	8008c92 <st_prep_buffer+0x4de>
              prep.current_speed -= speed_var;
 8008be2:	4630      	mov	r0, r6
 8008be4:	4629      	mov	r1, r5
 8008be6:	f7f7 ff5d 	bl	8000aa4 <__aeabi_fsub>
      dt += time_var; // Add computed ramp time to total segment time.
 8008bea:	463c      	mov	r4, r7
              prep.current_speed -= speed_var;
 8008bec:	4606      	mov	r6, r0
            prep.ramp_type = RAMP_DECEL;
 8008bee:	f04f 0802 	mov.w	r8, #2
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8008bf2:	4659      	mov	r1, fp
 8008bf4:	9804      	ldr	r0, [sp, #16]
 8008bf6:	f7f8 f9fd 	bl	8000ff4 <__aeabi_fcmplt>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	f43f af0f 	beq.w	8008a1e <st_prep_buffer+0x26a>
          dt_max += DT_SEGMENT;
 8008c00:	4638      	mov	r0, r7
 8008c02:	4939      	ldr	r1, [pc, #228]	; (8008ce8 <st_prep_buffer+0x534>)
 8008c04:	f7f7 ff50 	bl	8000aa8 <__addsf3>
          time_var = dt_max - dt;
 8008c08:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008c0a:	4607      	mov	r7, r0
          time_var = dt_max - dt;
 8008c0c:	f7f7 ff4a 	bl	8000aa4 <__aeabi_fsub>
 8008c10:	4605      	mov	r5, r0
 8008c12:	e6fd      	b.n	8008a10 <st_prep_buffer+0x25c>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8008c14:	4649      	mov	r1, r9
 8008c16:	9804      	ldr	r0, [sp, #16]
 8008c18:	f7f8 f9ec 	bl	8000ff4 <__aeabi_fcmplt>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	f000 833a 	beq.w	8009296 <st_prep_buffer+0xae2>
          dt_max += DT_SEGMENT;
 8008c22:	4638      	mov	r0, r7
 8008c24:	4930      	ldr	r1, [pc, #192]	; (8008ce8 <st_prep_buffer+0x534>)
 8008c26:	f7f7 ff3f 	bl	8000aa8 <__addsf3>
          time_var = dt_max - dt;
 8008c2a:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008c2c:	4607      	mov	r7, r0
          time_var = dt_max - dt;
 8008c2e:	f7f7 ff39 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c32:	4651      	mov	r1, sl
          time_var = dt_max - dt;
 8008c34:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c36:	4648      	mov	r0, r9
 8008c38:	f7f8 f9fa 	bl	8001030 <__aeabi_fcmpgt>
 8008c3c:	46cb      	mov	fp, r9
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	f000 8236 	beq.w	80090b0 <st_prep_buffer+0x8fc>
            prep.ramp_type = RAMP_DECEL;
 8008c44:	f04f 0802 	mov.w	r8, #2
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008c48:	9b00      	ldr	r3, [sp, #0]
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	6a19      	ldr	r1, [r3, #32]
 8008c4e:	f7f8 f833 	bl	8000cb8 <__aeabi_fmul>
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008c52:	4631      	mov	r1, r6
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008c54:	4681      	mov	r9, r0
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008c56:	f7f8 f9cd 	bl	8000ff4 <__aeabi_fcmplt>
 8008c5a:	b1e8      	cbz	r0, 8008c98 <st_prep_buffer+0x4e4>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008c5c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008c60:	4648      	mov	r0, r9
 8008c62:	f7f8 f829 	bl	8000cb8 <__aeabi_fmul>
 8008c66:	4631      	mov	r1, r6
 8008c68:	f7f7 ff1c 	bl	8000aa4 <__aeabi_fsub>
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	f7f8 f823 	bl	8000cb8 <__aeabi_fmul>
 8008c72:	4659      	mov	r1, fp
 8008c74:	f7f7 ff18 	bl	8000aa8 <__addsf3>
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008c78:	4651      	mov	r1, sl
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008c7a:	900d      	str	r0, [sp, #52]	; 0x34
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008c7c:	f7f8 f9d8 	bl	8001030 <__aeabi_fcmpgt>
 8008c80:	b150      	cbz	r0, 8008c98 <st_prep_buffer+0x4e4>
              prep.current_speed -= speed_var;
 8008c82:	4630      	mov	r0, r6
 8008c84:	4649      	mov	r1, r9
 8008c86:	f7f7 ff0d 	bl	8000aa4 <__aeabi_fsub>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008c8a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
              prep.current_speed -= speed_var;
 8008c8e:	4606      	mov	r6, r0
              break; // Segment complete. Exit switch-case statement. Continue do-while loop.
 8008c90:	e6ad      	b.n	80089ee <st_prep_buffer+0x23a>
 8008c92:	46cb      	mov	fp, r9
            prep.ramp_type = RAMP_DECEL;
 8008c94:	f04f 0802 	mov.w	r8, #2
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008c98:	4658      	mov	r0, fp
 8008c9a:	4651      	mov	r1, sl
 8008c9c:	f7f7 ff02 	bl	8000aa4 <__aeabi_fsub>
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	f7f7 ff01 	bl	8000aa8 <__addsf3>
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	9e07      	ldr	r6, [sp, #28]
 8008caa:	4605      	mov	r5, r0
 8008cac:	4630      	mov	r0, r6
 8008cae:	f7f7 fefb 	bl	8000aa8 <__addsf3>
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f7f8 f8b3 	bl	8000e20 <__aeabi_fdiv>
          mm_remaining = prep.mm_complete;
 8008cba:	46d3      	mov	fp, sl
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	e696      	b.n	80089ee <st_prep_buffer+0x23a>
 8008cc0:	200013f0 	.word	0x200013f0
 8008cc4:	20000de0 	.word	0x20000de0
 8008cc8:	20000004 	.word	0x20000004
 8008ccc:	431bde83 	.word	0x431bde83
 8008cd0:	000f4240 	.word	0x000f4240
 8008cd4:	42700000 	.word	0x42700000
 8008cd8:	10624dd3 	.word	0x10624dd3
 8008cdc:	20000e32 	.word	0x20000e32
 8008ce0:	20000e30 	.word	0x20000e30
 8008ce4:	20000da4 	.word	0x20000da4
 8008ce8:	392ec33e 	.word	0x392ec33e
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8008cec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008cf0:	4648      	mov	r0, r9
 8008cf2:	f7f7 ffe1 	bl	8000cb8 <__aeabi_fmul>
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	f7f7 fed4 	bl	8000aa4 <__aeabi_fsub>
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	f7f7 ffdb 	bl	8000cb8 <__aeabi_fmul>
 8008d02:	4601      	mov	r1, r0
 8008d04:	4658      	mov	r0, fp
 8008d06:	f7f7 fecf 	bl	8000aa8 <__addsf3>
            prep.current_speed -= speed_var;
 8008d0a:	4649      	mov	r1, r9
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8008d0c:	4683      	mov	fp, r0
            prep.current_speed -= speed_var;
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f7f7 fec8 	bl	8000aa4 <__aeabi_fsub>
      dt += time_var; // Add computed ramp time to total segment time.
 8008d14:	4629      	mov	r1, r5
            prep.current_speed -= speed_var;
 8008d16:	4606      	mov	r6, r0
      dt += time_var; // Add computed ramp time to total segment time.
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f7f7 fec5 	bl	8000aa8 <__addsf3>
 8008d1e:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008d20:	4601      	mov	r1, r0
 8008d22:	4638      	mov	r0, r7
 8008d24:	f7f8 f984 	bl	8001030 <__aeabi_fcmpgt>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	f43f af62 	beq.w	8008bf2 <st_prep_buffer+0x43e>
 8008d2e:	4621      	mov	r1, r4
 8008d30:	4638      	mov	r0, r7
 8008d32:	f7f7 feb7 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008d36:	4651      	mov	r1, sl
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008d38:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008d3a:	4658      	mov	r0, fp
 8008d3c:	f7f8 f978 	bl	8001030 <__aeabi_fcmpgt>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	f47f ada2 	bne.w	800888a <st_prep_buffer+0xd6>
 8008d46:	e66a      	b.n	8008a1e <st_prep_buffer+0x26a>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8008d48:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008d4c:	9804      	ldr	r0, [sp, #16]
 8008d4e:	4659      	mov	r1, fp
 8008d50:	f7f8 f950 	bl	8000ff4 <__aeabi_fcmplt>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	f000 81a4 	beq.w	80090a2 <st_prep_buffer+0x8ee>
          dt_max += DT_SEGMENT;
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	496f      	ldr	r1, [pc, #444]	; (8008f1c <st_prep_buffer+0x768>)
 8008d5e:	f7f7 fea3 	bl	8000aa8 <__addsf3>
          time_var = dt_max - dt;
 8008d62:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008d64:	4607      	mov	r7, r0
          time_var = dt_max - dt;
 8008d66:	f7f7 fe9d 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008d6a:	4659      	mov	r1, fp
          time_var = dt_max - dt;
 8008d6c:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008d6e:	4650      	mov	r0, sl
 8008d70:	f7f8 f940 	bl	8000ff4 <__aeabi_fcmplt>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f000 8194 	beq.w	80090a2 <st_prep_buffer+0x8ee>
            prep.current_speed = prep.maximum_speed;
 8008d7a:	9e01      	ldr	r6, [sp, #4]
 8008d7c:	e5b8      	b.n	80088f0 <st_prep_buffer+0x13c>
            mm_remaining = mm_var;
 8008d7e:	46c3      	mov	fp, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008d80:	f04f 0801 	mov.w	r8, #1
 8008d84:	e735      	b.n	8008bf2 <st_prep_buffer+0x43e>
 8008d86:	f04f 0301 	mov.w	r3, #1
 8008d8a:	e56e      	b.n	800886a <st_prep_buffer+0xb6>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8008d8c:	9b00      	ldr	r3, [sp, #0]
 8008d8e:	7d9b      	ldrb	r3, [r3, #22]
 8008d90:	f013 0f30 	tst.w	r3, #48	; 0x30
 8008d94:	f040 80b4 	bne.w	8008f00 <st_prep_buffer+0x74c>
 8008d98:	4b61      	ldr	r3, [pc, #388]	; (8008f20 <st_prep_buffer+0x76c>)
 8008d9a:	f893 a004 	ldrb.w	sl, [r3, #4]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008d9e:	2300      	movs	r3, #0
          sys.spindle_speed = 0.0;
 8008da0:	2100      	movs	r1, #0
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008da2:	4618      	mov	r0, r3
          sys.spindle_speed = 0.0;
 8008da4:	4a5e      	ldr	r2, [pc, #376]	; (8008f20 <st_prep_buffer+0x76c>)
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008da6:	f8a9 3034 	strh.w	r3, [r9, #52]	; 0x34
          sys.spindle_speed = 0.0;
 8008daa:	6111      	str	r1, [r2, #16]
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8008dac:	4b5c      	ldr	r3, [pc, #368]	; (8008f20 <st_prep_buffer+0x76c>)
 8008dae:	f00a 0af7 	and.w	sl, sl, #247	; 0xf7
 8008db2:	f883 a004 	strb.w	sl, [r3, #4]
 8008db6:	e647      	b.n	8008a48 <st_prep_buffer+0x294>
        if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 8008db8:	ebb0 2f17 	cmp.w	r0, r7, lsr #8
 8008dbc:	f080 8096 	bcs.w	8008eec <st_prep_buffer+0x738>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4a58      	ldr	r2, [pc, #352]	; (8008f24 <st_prep_buffer+0x770>)
 8008dc4:	9905      	ldr	r1, [sp, #20]
 8008dc6:	440a      	add	r2, r1
 8008dc8:	7153      	strb	r3, [r2, #5]
        prep_segment->n_step <<= prep_segment->amass_level;
 8008dca:	4a56      	ldr	r2, [pc, #344]	; (8008f24 <st_prep_buffer+0x770>)
 8008dcc:	9908      	ldr	r1, [sp, #32]
 8008dce:	fa08 f803 	lsl.w	r8, r8, r3
 8008dd2:	f822 8031 	strh.w	r8, [r2, r1, lsl #3]
        cycles >>= prep_segment->amass_level;
 8008dd6:	40d8      	lsrs	r0, r3
 8008dd8:	9a05      	ldr	r2, [sp, #20]
 8008dda:	e68a      	b.n	8008af2 <st_prep_buffer+0x33e>
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008ddc:	2200      	movs	r2, #0
    pl_block->millimeters = mm_remaining;
 8008dde:	4b52      	ldr	r3, [pc, #328]	; (8008f28 <st_prep_buffer+0x774>)
    prep.steps_remaining = n_steps_remaining;
 8008de0:	f8c9 5008 	str.w	r5, [r9, #8]
    pl_block->millimeters = mm_remaining;
 8008de4:	681b      	ldr	r3, [r3, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008de6:	4628      	mov	r0, r5
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008de8:	4d50      	ldr	r5, [pc, #320]	; (8008f2c <st_prep_buffer+0x778>)
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008dea:	4631      	mov	r1, r6
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008dec:	702a      	strb	r2, [r5, #0]
    pl_block->millimeters = mm_remaining;
 8008dee:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008df2:	f7f7 fe57 	bl	8000aa4 <__aeabi_fsub>
 8008df6:	4621      	mov	r1, r4
 8008df8:	f7f7 ff5e 	bl	8000cb8 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8008dfc:	4659      	mov	r1, fp
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008dfe:	f8c9 0004 	str.w	r0, [r9, #4]
    if (mm_remaining == prep.mm_complete) {
 8008e02:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8008e06:	f7f8 f8eb 	bl	8000fe0 <__aeabi_fcmpeq>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	f47f ae9a 	bne.w	8008b44 <st_prep_buffer+0x390>
 8008e10:	4607      	mov	r7, r0
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8008e12:	4b47      	ldr	r3, [pc, #284]	; (8008f30 <st_prep_buffer+0x77c>)
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	42bb      	cmp	r3, r7
 8008e18:	f47f acdb 	bne.w	80087d2 <st_prep_buffer+0x1e>
}
 8008e1c:	b00f      	add	sp, #60	; 0x3c
 8008e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 8008e22:	4b3f      	ldr	r3, [pc, #252]	; (8008f20 <st_prep_buffer+0x76c>)
 8008e24:	791b      	ldrb	r3, [r3, #4]
 8008e26:	075e      	lsls	r6, r3, #29
 8008e28:	d574      	bpl.n	8008f14 <st_prep_buffer+0x760>
 8008e2a:	f7fb fa91 	bl	8004350 <plan_get_system_motion_block>
      else { pl_block = plan_get_current_block(); }
 8008e2e:	4b3e      	ldr	r3, [pc, #248]	; (8008f28 <st_prep_buffer+0x774>)
 8008e30:	9000      	str	r0, [sp, #0]
 8008e32:	6018      	str	r0, [r3, #0]
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d0f1      	beq.n	8008e1c <st_prep_buffer+0x668>
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 8008e38:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8008f38 <st_prep_buffer+0x784>
 8008e3c:	4a38      	ldr	r2, [pc, #224]	; (8008f20 <st_prep_buffer+0x76c>)
 8008e3e:	f899 6001 	ldrb.w	r6, [r9, #1]
 8008e42:	7914      	ldrb	r4, [r2, #4]
 8008e44:	f016 0301 	ands.w	r3, r6, #1
 8008e48:	f004 0702 	and.w	r7, r4, #2
 8008e4c:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8008e50:	d074      	beq.n	8008f3c <st_prep_buffer+0x788>
          prep.recalculate_flag = false;
 8008e52:	2300      	movs	r3, #0
 8008e54:	f889 3001 	strb.w	r3, [r9, #1]
 8008e58:	4b36      	ldr	r3, [pc, #216]	; (8008f34 <st_prep_buffer+0x780>)
 8008e5a:	930b      	str	r3, [sp, #44]	; 0x2c
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008e5c:	2200      	movs	r2, #0
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8008e5e:	9b00      	ldr	r3, [sp, #0]
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008e60:	f8c9 2018 	str.w	r2, [r9, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8008e64:	6a1d      	ldr	r5, [r3, #32]
 8008e66:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	f7f7 ffd8 	bl	8000e20 <__aeabi_fdiv>
 8008e70:	4606      	mov	r6, r0
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8008e72:	2f00      	cmp	r7, #0
 8008e74:	f000 80c3 	beq.w	8008ffe <st_prep_buffer+0x84a>
				prep.ramp_type = RAMP_DECEL;
 8008e78:	f04f 0802 	mov.w	r8, #2
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8008e7c:	9b00      	ldr	r3, [sp, #0]
 8008e7e:	4601      	mov	r1, r0
 8008e80:	699e      	ldr	r6, [r3, #24]
				prep.ramp_type = RAMP_DECEL;
 8008e82:	f889 8014 	strb.w	r8, [r9, #20]
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8008e86:	4630      	mov	r0, r6
 8008e88:	f7f7 ff16 	bl	8000cb8 <__aeabi_fmul>
 8008e8c:	4601      	mov	r1, r0
 8008e8e:	4658      	mov	r0, fp
 8008e90:	f7f7 fe08 	bl	8000aa4 <__aeabi_fsub>
				if (decel_dist < 0.0f) {
 8008e94:	2100      	movs	r1, #0
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8008e96:	4682      	mov	sl, r0
				if (decel_dist < 0.0f) {
 8008e98:	f7f8 f8ac 	bl	8000ff4 <__aeabi_fcmplt>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	f040 81c9 	bne.w	8009234 <st_prep_buffer+0xa80>
					prep.exit_speed = 0.0f;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 8008ea8:	f8d9 3020 	ldr.w	r3, [r9, #32]
					prep.mm_complete = decel_dist; // End of feed hold.
 8008eac:	f8c9 a018 	str.w	sl, [r9, #24]
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8008eb6:	9302      	str	r3, [sp, #8]
 8008eb8:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8008ebc:	9303      	str	r3, [sp, #12]
					prep.exit_speed = 0.0f;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	9307      	str	r3, [sp, #28]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8008ec2:	4b17      	ldr	r3, [pc, #92]	; (8008f20 <st_prep_buffer+0x76c>)
 8008ec4:	f044 0408 	orr.w	r4, r4, #8
 8008ec8:	711c      	strb	r4, [r3, #4]
 8008eca:	e49e      	b.n	800880a <st_prep_buffer+0x56>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8008ecc:	9b00      	ldr	r3, [sp, #0]
 8008ece:	7d9b      	ldrb	r3, [r3, #22]
 8008ed0:	f013 0f30 	tst.w	r3, #48	; 0x30
 8008ed4:	f43f af63 	beq.w	8008d9e <st_prep_buffer+0x5ea>
          float rpm = pl_block->spindle_speed;
 8008ed8:	9b00      	ldr	r3, [sp, #0]
 8008eda:	6b58      	ldr	r0, [r3, #52]	; 0x34
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8008edc:	f7fe ff58 	bl	8007d90 <spindle_compute_pwm_value>
 8008ee0:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <st_prep_buffer+0x76c>)
 8008ee2:	f8a9 0034 	strh.w	r0, [r9, #52]	; 0x34
 8008ee6:	f893 a004 	ldrb.w	sl, [r3, #4]
 8008eea:	e75f      	b.n	8008dac <st_prep_buffer+0x5f8>
        else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 8008eec:	ebb0 1fd7 	cmp.w	r0, r7, lsr #7
 8008ef0:	f080 80d0 	bcs.w	8009094 <st_prep_buffer+0x8e0>
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	4a0b      	ldr	r2, [pc, #44]	; (8008f24 <st_prep_buffer+0x770>)
 8008ef8:	9905      	ldr	r1, [sp, #20]
 8008efa:	440a      	add	r2, r1
 8008efc:	7153      	strb	r3, [r2, #5]
 8008efe:	e764      	b.n	8008dca <st_prep_buffer+0x616>
 8008f00:	9b00      	ldr	r3, [sp, #0]
 8008f02:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8008f06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008f08:	f7f7 fed6 	bl	8000cb8 <__aeabi_fmul>
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	f7f7 fed3 	bl	8000cb8 <__aeabi_fmul>
 8008f12:	e7e3      	b.n	8008edc <st_prep_buffer+0x728>
      else { pl_block = plan_get_current_block(); }
 8008f14:	f7fb fa28 	bl	8004368 <plan_get_current_block>
 8008f18:	e789      	b.n	8008e2e <st_prep_buffer+0x67a>
 8008f1a:	bf00      	nop
 8008f1c:	392ec33e 	.word	0x392ec33e
 8008f20:	200013f0 	.word	0x200013f0
 8008f24:	20000de0 	.word	0x20000de0
 8008f28:	20000da4 	.word	0x20000da4
 8008f2c:	20000e32 	.word	0x20000e32
 8008f30:	20000e31 	.word	0x20000e31
 8008f34:	20000f40 	.word	0x20000f40
 8008f38:	20000da8 	.word	0x20000da8
  block_index++;
 8008f3c:	f899 2000 	ldrb.w	r2, [r9]
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8008f40:	48b5      	ldr	r0, [pc, #724]	; (8009218 <st_prep_buffer+0xa64>)
  block_index++;
 8008f42:	3201      	adds	r2, #1
 8008f44:	b2d2      	uxtb	r2, r2
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8008f46:	2a09      	cmp	r2, #9
 8008f48:	f000 80fc 	beq.w	8009144 <st_prep_buffer+0x990>
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8008f52:	eb00 08c5 	add.w	r8, r0, r5, lsl #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008f56:	9900      	ldr	r1, [sp, #0]
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 8008f58:	f889 2000 	strb.w	r2, [r9]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008f5c:	680a      	ldr	r2, [r1, #0]
 8008f5e:	684d      	ldr	r5, [r1, #4]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008f60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008f64:	00d2      	lsls	r2, r2, #3
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008f66:	f8b1 c014 	ldrh.w	ip, [r1, #20]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008f6a:	9501      	str	r5, [sp, #4]
 8008f6c:	6889      	ldr	r1, [r1, #8]
 8008f6e:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008f72:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008f76:	9800      	ldr	r0, [sp, #0]
 8008f78:	9d01      	ldr	r5, [sp, #4]
 8008f7a:	68c2      	ldr	r2, [r0, #12]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8008f7c:	6900      	ldr	r0, [r0, #16]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008f7e:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8008f82:	00c9      	lsls	r1, r1, #3
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008f84:	4da5      	ldr	r5, [pc, #660]	; (800921c <st_prep_buffer+0xa68>)
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008f86:	6099      	str	r1, [r3, #8]
 8008f88:	00d2      	lsls	r2, r2, #3
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8008f8a:	00c1      	lsls	r1, r0, #3
 8008f8c:	e9c3 2103 	strd	r2, r1, [r3, #12]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008f90:	f8a3 c014 	strh.w	ip, [r3, #20]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008f94:	f8c3 e004 	str.w	lr, [r3, #4]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008f98:	f8c5 8000 	str.w	r8, [r5]
 8008f9c:	950b      	str	r5, [sp, #44]	; 0x2c
        prep.steps_remaining = (float)pl_block->step_event_count;
 8008f9e:	f7f7 fe33 	bl	8000c08 <__aeabi_ui2f>
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8008fa2:	4659      	mov	r1, fp
        prep.steps_remaining = (float)pl_block->step_event_count;
 8008fa4:	f8c9 0008 	str.w	r0, [r9, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8008fa8:	f7f7 ff3a 	bl	8000e20 <__aeabi_fdiv>
 8008fac:	4601      	mov	r1, r0
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8008fae:	489c      	ldr	r0, [pc, #624]	; (8009220 <st_prep_buffer+0xa6c>)
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8008fb0:	f8c9 100c 	str.w	r1, [r9, #12]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8008fb4:	f7f7 ff34 	bl	8000e20 <__aeabi_fdiv>
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8008fb8:	2300      	movs	r3, #0
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8008fba:	f8c9 0010 	str.w	r0, [r9, #16]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8008fbe:	f8c9 3004 	str.w	r3, [r9, #4]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8008fc2:	2f00      	cmp	r7, #0
 8008fc4:	f040 80fa 	bne.w	80091bc <st_prep_buffer+0xa08>
 8008fc8:	0735      	lsls	r5, r6, #28
 8008fca:	f100 80f7 	bmi.w	80091bc <st_prep_buffer+0xa08>
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8008fce:	9b00      	ldr	r3, [sp, #0]
 8008fd0:	6998      	ldr	r0, [r3, #24]
 8008fd2:	f002 f901 	bl	800b1d8 <sqrtf>
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008fd6:	4b93      	ldr	r3, [pc, #588]	; (8009224 <st_prep_buffer+0xa70>)
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8008fd8:	f8c9 001c 	str.w	r0, [r9, #28]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008fdc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
        st_prep_block->is_pwm_rate_adjusted = false;
 8008fe0:	f888 7016 	strb.w	r7, [r8, #22]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008fe4:	0799      	lsls	r1, r3, #30
 8008fe6:	f100 80ff 	bmi.w	80091e8 <st_prep_buffer+0xa34>
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008fea:	2300      	movs	r3, #0
 8008fec:	f8c9 3018 	str.w	r3, [r9, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8008ff0:	9b00      	ldr	r3, [sp, #0]
 8008ff2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008ff6:	6a19      	ldr	r1, [r3, #32]
 8008ff8:	f7f7 ff12 	bl	8000e20 <__aeabi_fdiv>
 8008ffc:	4606      	mov	r6, r0
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8008ffe:	2300      	movs	r3, #0
 8009000:	f889 3014 	strb.w	r3, [r9, #20]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8009004:	0763      	lsls	r3, r4, #29
				prep.accelerate_until = pl_block->millimeters;
 8009006:	f8c9 b028 	str.w	fp, [r9, #40]	; 0x28
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 800900a:	f140 812f 	bpl.w	800926c <st_prep_buffer+0xab8>
          prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 800900e:	2300      	movs	r3, #0
 8009010:	461f      	mov	r7, r3
 8009012:	9800      	ldr	r0, [sp, #0]
 8009014:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8009018:	f7fb f9e2 	bl	80043e0 <plan_compute_profile_nominal_speed>
 800901c:	4601      	mov	r1, r0
 800901e:	9001      	str	r0, [sp, #4]
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8009020:	f7f7 fe4a 	bl	8000cb8 <__aeabi_fmul>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8009024:	4b80      	ldr	r3, [pc, #512]	; (8009228 <st_prep_buffer+0xa74>)
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8009026:	4604      	mov	r4, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8009028:	681b      	ldr	r3, [r3, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 800902a:	4601      	mov	r1, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 800902c:	699d      	ldr	r5, [r3, #24]
 800902e:	9300      	str	r3, [sp, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8009030:	4628      	mov	r0, r5
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8009032:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8009036:	f7f7 fffb 	bl	8001030 <__aeabi_fcmpgt>
 800903a:	2800      	cmp	r0, #0
 800903c:	d03d      	beq.n	80090ba <st_prep_buffer+0x906>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 800903e:	4629      	mov	r1, r5
 8009040:	4620      	mov	r0, r4
 8009042:	f7f7 fd2f 	bl	8000aa4 <__aeabi_fsub>
 8009046:	4631      	mov	r1, r6
 8009048:	f7f7 fe36 	bl	8000cb8 <__aeabi_fmul>
 800904c:	4659      	mov	r1, fp
 800904e:	f7f7 fd2b 	bl	8000aa8 <__addsf3>
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8009052:	2100      	movs	r1, #0
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8009054:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
 8009058:	9002      	str	r0, [sp, #8]
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 800905a:	f7f7 ffd5 	bl	8001008 <__aeabi_fcmple>
 800905e:	2800      	cmp	r0, #0
 8009060:	d173      	bne.n	800914a <st_prep_buffer+0x996>
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8009062:	4639      	mov	r1, r7
 8009064:	4620      	mov	r0, r4
 8009066:	f7f7 fd1d 	bl	8000aa4 <__aeabi_fsub>
 800906a:	4631      	mov	r1, r6
 800906c:	f7f7 fe24 	bl	8000cb8 <__aeabi_fmul>
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 8009070:	f04f 0803 	mov.w	r8, #3
						prep.maximum_speed = nominal_speed;
 8009074:	9b01      	ldr	r3, [sp, #4]
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8009076:	9003      	str	r0, [sp, #12]
						prep.maximum_speed = nominal_speed;
 8009078:	f8c9 3020 	str.w	r3, [r9, #32]
 800907c:	4b6b      	ldr	r3, [pc, #428]	; (800922c <st_prep_buffer+0xa78>)
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 800907e:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 8009082:	791c      	ldrb	r4, [r3, #4]
 8009084:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 8009088:	f889 8014 	strb.w	r8, [r9, #20]
 800908c:	f8d9 a018 	ldr.w	sl, [r9, #24]
 8009090:	9307      	str	r3, [sp, #28]
 8009092:	e716      	b.n	8008ec2 <st_prep_buffer+0x70e>
        else { prep_segment->amass_level = 3; }
 8009094:	2203      	movs	r2, #3
 8009096:	4966      	ldr	r1, [pc, #408]	; (8009230 <st_prep_buffer+0xa7c>)
 8009098:	9f05      	ldr	r7, [sp, #20]
 800909a:	4613      	mov	r3, r2
 800909c:	4439      	add	r1, r7
 800909e:	714a      	strb	r2, [r1, #5]
 80090a0:	e693      	b.n	8008dca <st_prep_buffer+0x616>
 80090a2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
            prep.current_speed = prep.maximum_speed;
 80090a6:	9e01      	ldr	r6, [sp, #4]
            prep.ramp_type = RAMP_CRUISE;
 80090a8:	f04f 0801 	mov.w	r8, #1
 80090ac:	e4b9      	b.n	8008a22 <st_prep_buffer+0x26e>
 80090ae:	46cb      	mov	fp, r9
 80090b0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
            prep.ramp_type = RAMP_DECEL;
 80090b4:	f04f 0802 	mov.w	r8, #2
 80090b8:	e4b3      	b.n	8008a22 <st_prep_buffer+0x26e>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 80090ba:	4639      	mov	r1, r7
 80090bc:	4628      	mov	r0, r5
 80090be:	f7f7 fcf1 	bl	8000aa4 <__aeabi_fsub>
 80090c2:	4631      	mov	r1, r6
 80090c4:	f7f7 fdf8 	bl	8000cb8 <__aeabi_fmul>
 80090c8:	4659      	mov	r1, fp
 80090ca:	f7f7 fced 	bl	8000aa8 <__addsf3>
				float intersect_distance =
 80090ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80090d2:	f7f7 fdf1 	bl	8000cb8 <__aeabi_fmul>
 80090d6:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
				} else if (intersect_distance > 0.0f) {
 80090da:	2100      	movs	r1, #0
				float intersect_distance =
 80090dc:	4680      	mov	r8, r0
 80090de:	9002      	str	r0, [sp, #8]
 80090e0:	9307      	str	r3, [sp, #28]
				} else if (intersect_distance > 0.0f) {
 80090e2:	f7f7 ffa5 	bl	8001030 <__aeabi_fcmpgt>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d055      	beq.n	8009196 <st_prep_buffer+0x9e2>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 80090ea:	4641      	mov	r1, r8
 80090ec:	4658      	mov	r0, fp
 80090ee:	f7f7 ff9f 	bl	8001030 <__aeabi_fcmpgt>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	f000 80dd 	beq.w	80092b2 <st_prep_buffer+0xafe>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 80090f8:	4639      	mov	r1, r7
 80090fa:	4620      	mov	r0, r4
 80090fc:	f7f7 fcd2 	bl	8000aa4 <__aeabi_fsub>
 8009100:	4631      	mov	r1, r6
 8009102:	f7f7 fdd9 	bl	8000cb8 <__aeabi_fmul>
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 8009106:	4641      	mov	r1, r8
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 8009108:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800910c:	9003      	str	r0, [sp, #12]
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 800910e:	f7f7 ff71 	bl	8000ff4 <__aeabi_fcmplt>
 8009112:	2800      	cmp	r0, #0
 8009114:	f000 80e7 	beq.w	80092e6 <st_prep_buffer+0xb32>
							prep.maximum_speed = nominal_speed;
 8009118:	9b01      	ldr	r3, [sp, #4]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 800911a:	4621      	mov	r1, r4
							prep.maximum_speed = nominal_speed;
 800911c:	f8c9 3020 	str.w	r3, [r9, #32]
 8009120:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8009124:	4628      	mov	r0, r5
 8009126:	9302      	str	r3, [sp, #8]
 8009128:	f7f7 ff5a 	bl	8000fe0 <__aeabi_fcmpeq>
 800912c:	2800      	cmp	r0, #0
 800912e:	f000 80f7 	beq.w	8009320 <st_prep_buffer+0xb6c>
								prep.ramp_type = RAMP_CRUISE;
 8009132:	f04f 0801 	mov.w	r8, #1
 8009136:	4b3d      	ldr	r3, [pc, #244]	; (800922c <st_prep_buffer+0xa78>)
 8009138:	f889 8014 	strb.w	r8, [r9, #20]
 800913c:	791c      	ldrb	r4, [r3, #4]
 800913e:	f8d9 a018 	ldr.w	sl, [r9, #24]
 8009142:	e6be      	b.n	8008ec2 <st_prep_buffer+0x70e>
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8009144:	461a      	mov	r2, r3
 8009146:	4680      	mov	r8, r0
 8009148:	e705      	b.n	8008f56 <st_prep_buffer+0x7a2>
            prep.ramp_type = RAMP_DECEL;
 800914a:	f04f 0802 	mov.w	r8, #2
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 800914e:	9b00      	ldr	r3, [sp, #0]
            prep.ramp_type = RAMP_DECEL;
 8009150:	f889 8014 	strb.w	r8, [r9, #20]
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8009154:	6a19      	ldr	r1, [r3, #32]
 8009156:	4658      	mov	r0, fp
 8009158:	f7f7 fdae 	bl	8000cb8 <__aeabi_fmul>
 800915c:	4601      	mov	r1, r0
 800915e:	f7f7 fca3 	bl	8000aa8 <__addsf3>
 8009162:	4601      	mov	r1, r0
 8009164:	4628      	mov	r0, r5
 8009166:	f7f7 fc9d 	bl	8000aa4 <__aeabi_fsub>
 800916a:	f002 f835 	bl	800b1d8 <sqrtf>
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 800916e:	f899 3001 	ldrb.w	r3, [r9, #1]
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8009172:	9007      	str	r0, [sp, #28]
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8009174:	f043 0308 	orr.w	r3, r3, #8
 8009178:	f889 3001 	strb.w	r3, [r9, #1]
 800917c:	4b2b      	ldr	r3, [pc, #172]	; (800922c <st_prep_buffer+0xa78>)
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 800917e:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 8009182:	791c      	ldrb	r4, [r3, #4]
 8009184:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8009188:	f8d9 a018 	ldr.w	sl, [r9, #24]
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8009192:	9303      	str	r3, [sp, #12]
 8009194:	e695      	b.n	8008ec2 <st_prep_buffer+0x70e>
					prep.maximum_speed = prep.exit_speed;
 8009196:	2300      	movs	r3, #0
 8009198:	9302      	str	r3, [sp, #8]
 800919a:	4b24      	ldr	r3, [pc, #144]	; (800922c <st_prep_buffer+0xa78>)
 800919c:	9a07      	ldr	r2, [sp, #28]
 800919e:	791c      	ldrb	r4, [r3, #4]
 80091a0:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80091a4:	9201      	str	r2, [sp, #4]
 80091a6:	9303      	str	r3, [sp, #12]
					prep.accelerate_until = 0.0f;
 80091a8:	2300      	movs	r3, #0
 80091aa:	f8d9 a018 	ldr.w	sl, [r9, #24]
 80091ae:	f899 8014 	ldrb.w	r8, [r9, #20]
 80091b2:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
					prep.maximum_speed = prep.exit_speed;
 80091b6:	f8c9 2020 	str.w	r2, [r9, #32]
 80091ba:	e682      	b.n	8008ec2 <st_prep_buffer+0x70e>
          prep.current_speed = prep.exit_speed;
 80091bc:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 80091c0:	f026 0608 	bic.w	r6, r6, #8
          prep.current_speed = prep.exit_speed;
 80091c4:	f8c9 101c 	str.w	r1, [r9, #28]
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 80091c8:	4608      	mov	r0, r1
 80091ca:	f7f7 fd75 	bl	8000cb8 <__aeabi_fmul>
        st_prep_block->is_pwm_rate_adjusted = false;
 80091ce:	2200      	movs	r2, #0
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 80091d0:	9900      	ldr	r1, [sp, #0]
        if (settings.flags & BITFLAG_LASER_MODE) {
 80091d2:	4b14      	ldr	r3, [pc, #80]	; (8009224 <st_prep_buffer+0xa70>)
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 80091d4:	6188      	str	r0, [r1, #24]
        if (settings.flags & BITFLAG_LASER_MODE) {
 80091d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 80091da:	f889 6001 	strb.w	r6, [r9, #1]
        if (settings.flags & BITFLAG_LASER_MODE) {
 80091de:	0798      	lsls	r0, r3, #30
        st_prep_block->is_pwm_rate_adjusted = false;
 80091e0:	f888 2016 	strb.w	r2, [r8, #22]
        if (settings.flags & BITFLAG_LASER_MODE) {
 80091e4:	f57f ae3a 	bpl.w	8008e5c <st_prep_buffer+0x6a8>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 80091e8:	9a00      	ldr	r2, [sp, #0]
 80091ea:	7d93      	ldrb	r3, [r2, #22]
 80091ec:	4615      	mov	r5, r2
 80091ee:	069a      	lsls	r2, r3, #26
 80091f0:	f57f ae34 	bpl.w	8008e5c <st_prep_buffer+0x6a8>
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 80091f4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80091f6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80091fa:	f7f7 fe11 	bl	8000e20 <__aeabi_fdiv>
            st_prep_block->is_pwm_rate_adjusted = true;
 80091fe:	2301      	movs	r3, #1
 8009200:	f888 3016 	strb.w	r3, [r8, #22]
 8009204:	4b09      	ldr	r3, [pc, #36]	; (800922c <st_prep_buffer+0xa78>)
 8009206:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
 800920a:	791c      	ldrb	r4, [r3, #4]
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 800920c:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
 8009210:	f004 0702 	and.w	r7, r4, #2
 8009214:	e622      	b.n	8008e5c <st_prep_buffer+0x6a8>
 8009216:	4770      	bx	lr
 8009218:	20000e68 	.word	0x20000e68
 800921c:	20000f40 	.word	0x20000f40
 8009220:	3fa00000 	.word	0x3fa00000
 8009224:	200015ac 	.word	0x200015ac
 8009228:	20000da4 	.word	0x20000da4
 800922c:	200013f0 	.word	0x200013f0
 8009230:	20000de0 	.word	0x20000de0
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 8009234:	4629      	mov	r1, r5
 8009236:	4628      	mov	r0, r5
 8009238:	f7f7 fc36 	bl	8000aa8 <__addsf3>
 800923c:	4659      	mov	r1, fp
 800923e:	f7f7 fd3b 	bl	8000cb8 <__aeabi_fmul>
 8009242:	4601      	mov	r1, r0
 8009244:	4630      	mov	r0, r6
 8009246:	f7f7 fc2d 	bl	8000aa4 <__aeabi_fsub>
 800924a:	f001 ffc5 	bl	800b1d8 <sqrtf>
 800924e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8009252:	9007      	str	r0, [sp, #28]
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800925a:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 800925e:	9302      	str	r3, [sp, #8]
 8009260:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8009264:	f04f 0a00 	mov.w	sl, #0
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	e62a      	b.n	8008ec2 <st_prep_buffer+0x70e>
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 800926c:	f7fb f890 	bl	8004390 <plan_get_exec_block_exit_speed_sqr>
 8009270:	4607      	mov	r7, r0
          prep.exit_speed = sqrtf(exit_speed_sqr);
 8009272:	f001 ffb1 	bl	800b1d8 <sqrtf>
 8009276:	4b35      	ldr	r3, [pc, #212]	; (800934c <st_prep_buffer+0xb98>)
 8009278:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	4618      	mov	r0, r3
 8009282:	e6c9      	b.n	8009018 <st_prep_buffer+0x864>
 8009284:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
            prep.current_speed = prep.maximum_speed;
 8009288:	9e01      	ldr	r6, [sp, #4]
						mm_remaining = prep.accelerate_until;
 800928a:	f8dd b008 	ldr.w	fp, [sp, #8]
            prep.ramp_type = RAMP_CRUISE;
 800928e:	f04f 0801 	mov.w	r8, #1
 8009292:	f7ff bbc6 	b.w	8008a22 <st_prep_buffer+0x26e>
 8009296:	46cb      	mov	fp, r9
            prep.ramp_type = RAMP_DECEL;
 8009298:	f04f 0802 	mov.w	r8, #2
 800929c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80092a0:	f7ff bbbf 	b.w	8008a22 <st_prep_buffer+0x26e>
            mm_remaining = mm_var;
 80092a4:	46c3      	mov	fp, r8
 80092a6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80092aa:	f04f 0801 	mov.w	r8, #1
 80092ae:	f7ff bbb8 	b.w	8008a22 <st_prep_buffer+0x26e>
            prep.ramp_type = RAMP_DECEL;
 80092b2:	f04f 0802 	mov.w	r8, #2
 80092b6:	4b26      	ldr	r3, [pc, #152]	; (8009350 <st_prep_buffer+0xb9c>)
 80092b8:	f889 8014 	strb.w	r8, [r9, #20]
 80092bc:	791c      	ldrb	r4, [r3, #4]
 80092be:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80092c2:	f8d9 a018 	ldr.w	sl, [r9, #24]
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80092cc:	9302      	str	r3, [sp, #8]
 80092ce:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80092d2:	9303      	str	r3, [sp, #12]
 80092d4:	e5f5      	b.n	8008ec2 <st_prep_buffer+0x70e>
          bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 80092d6:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <st_prep_buffer+0xb9c>)
 80092d8:	f04a 0a01 	orr.w	sl, sl, #1
 80092dc:	f883 a004 	strb.w	sl, [r3, #4]
}
 80092e0:	b00f      	add	sp, #60	; 0x3c
 80092e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 80092e6:	9b00      	ldr	r3, [sp, #0]
 80092e8:	4645      	mov	r5, r8
 80092ea:	6a19      	ldr	r1, [r3, #32]
							prep.accelerate_until = intersect_distance;
 80092ec:	f8c9 8028 	str.w	r8, [r9, #40]	; 0x28
							prep.decelerate_after = intersect_distance;
 80092f0:	f8c9 802c 	str.w	r8, [r9, #44]	; 0x2c
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 80092f4:	4608      	mov	r0, r1
 80092f6:	f7f7 fbd7 	bl	8000aa8 <__addsf3>
 80092fa:	4641      	mov	r1, r8
 80092fc:	f7f7 fcdc 	bl	8000cb8 <__aeabi_fmul>
 8009300:	4639      	mov	r1, r7
 8009302:	f7f7 fbd1 	bl	8000aa8 <__addsf3>
 8009306:	f001 ff67 	bl	800b1d8 <sqrtf>
 800930a:	4b11      	ldr	r3, [pc, #68]	; (8009350 <st_prep_buffer+0xb9c>)
 800930c:	9001      	str	r0, [sp, #4]
 800930e:	791c      	ldrb	r4, [r3, #4]
 8009310:	f8c9 0020 	str.w	r0, [r9, #32]
 8009314:	f8d9 a018 	ldr.w	sl, [r9, #24]
 8009318:	f899 8014 	ldrb.w	r8, [r9, #20]
 800931c:	9503      	str	r5, [sp, #12]
 800931e:	e5d0      	b.n	8008ec2 <st_prep_buffer+0x70e>
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 8009320:	4621      	mov	r1, r4
 8009322:	4628      	mov	r0, r5
 8009324:	f7f7 fbbe 	bl	8000aa4 <__aeabi_fsub>
 8009328:	4631      	mov	r1, r6
 800932a:	f7f7 fcc5 	bl	8000cb8 <__aeabi_fmul>
 800932e:	4601      	mov	r1, r0
 8009330:	9802      	ldr	r0, [sp, #8]
 8009332:	f7f7 fbb9 	bl	8000aa8 <__addsf3>
 8009336:	4b06      	ldr	r3, [pc, #24]	; (8009350 <st_prep_buffer+0xb9c>)
 8009338:	9002      	str	r0, [sp, #8]
 800933a:	791c      	ldrb	r4, [r3, #4]
 800933c:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
 8009340:	f8d9 a018 	ldr.w	sl, [r9, #24]
 8009344:	f899 8014 	ldrb.w	r8, [r9, #20]
 8009348:	e5bb      	b.n	8008ec2 <st_prep_buffer+0x70e>
 800934a:	bf00      	nop
 800934c:	20000da4 	.word	0x20000da4
 8009350:	200013f0 	.word	0x200013f0

08009354 <st_get_realtime_rate>:
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 8009354:	4b04      	ldr	r3, [pc, #16]	; (8009368 <st_get_realtime_rate+0x14>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 800935c:	bf1a      	itte	ne
 800935e:	4b03      	ldrne	r3, [pc, #12]	; (800936c <st_get_realtime_rate+0x18>)
 8009360:	69d8      	ldrne	r0, [r3, #28]
  return 0.0f;
 8009362:	2000      	moveq	r0, #0
}
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	200013f0 	.word	0x200013f0
 800936c:	20000da8 	.word	0x20000da8

08009370 <system_init>:

#include "grbl.h"


void system_init()
{
 8009370:	b510      	push	{r4, lr}
  CONTROL_PCMSK |= CONTROL_MASK;  // Enable specific pins of the Pin Change Interrupt
  PCICR |= (1 << CONTROL_INT);   // Enable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8009372:	2101      	movs	r1, #1
{
 8009374:	b084      	sub	sp, #16
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8009376:	2009      	movs	r0, #9
 8009378:	f7f8 fa0c 	bl	8001794 <RCC_APB2PeriphClockCmd>
#ifdef DISABLE_CONTROL_PIN_PULL_UP
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 800937c:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // to enable PA15, PB3, PB4 pins
 8009380:	2101      	movs	r1, #1
 8009382:	481a      	ldr	r0, [pc, #104]	; (80093ec <system_init+0x7c>)
 8009384:	f7f8 f9b2 	bl	80016ec <GPIO_PinRemapConfig>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8009388:	2203      	movs	r2, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 800938a:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 800938c:	a904      	add	r1, sp, #16
 800938e:	f821 4d10 	strh.w	r4, [r1, #-16]!
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 8009392:	4817      	ldr	r0, [pc, #92]	; (80093f0 <system_init+0x80>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8009394:	f88d 2002 	strb.w	r2, [sp, #2]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8009398:	f88d 3003 	strb.w	r3, [sp, #3]
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 800939c:	f7f8 f80e 	bl	80013bc <GPIO_Init>

  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_RESET_BIT);
 80093a0:	2105      	movs	r1, #5
 80093a2:	2001      	movs	r0, #1
 80093a4:	f7f8 f9d8 	bl	8001758 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_FEED_HOLD_BIT);
 80093a8:	2106      	movs	r1, #6
 80093aa:	2001      	movs	r0, #1
 80093ac:	f7f8 f9d4 	bl	8001758 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_CYCLE_START_BIT);
 80093b0:	2107      	movs	r1, #7
 80093b2:	2001      	movs	r0, #1
 80093b4:	f7f8 f9d0 	bl	8001758 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_SAFETY_DOOR_BIT);
 80093b8:	2108      	movs	r1, #8
 80093ba:	2001      	movs	r0, #1
 80093bc:	f7f8 f9cc 	bl	8001758 <GPIO_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 80093c0:	2100      	movs	r1, #0
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 80093c2:	2210      	movs	r2, #16
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80093c4:	2301      	movs	r3, #1
  EXTI_Init(&EXTI_InitStructure);
 80093c6:	a802      	add	r0, sp, #8
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 80093c8:	f88d 100c 	strb.w	r1, [sp, #12]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 80093cc:	f88d 200d 	strb.w	r2, [sp, #13]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80093d0:	f88d 300e 	strb.w	r3, [sp, #14]
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 80093d4:	9402      	str	r4, [sp, #8]
  EXTI_Init(&EXTI_InitStructure);
 80093d6:	f7f7 fec7 	bl	8001168 <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 80093da:	4b06      	ldr	r3, [pc, #24]	; (80093f4 <system_init+0x84>)
 80093dc:	a804      	add	r0, sp, #16
 80093de:	f840 3d0c 	str.w	r3, [r0, #-12]!
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
  NVIC_Init(&NVIC_InitStructure);
 80093e2:	f7f7 fe95 	bl	8001110 <NVIC_Init>
#endif
}
 80093e6:	b004      	add	sp, #16
 80093e8:	bd10      	pop	{r4, pc}
 80093ea:	bf00      	nop
 80093ec:	00300200 	.word	0x00300200
 80093f0:	40010c00 	.word	0x40010c00
 80093f4:	01020217 	.word	0x01020217

080093f8 <system_control_get_state>:

// Returns control pin state as a uint8 bitfield. Each bit indicates the input pin state, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Bitfield organization is
// defined by the CONTROL_PIN_INDEX in the header file.
uint8_t system_control_get_state()
{
 80093f8:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
  uint8_t pin = 0;
#endif
#ifdef STM32F103C8
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 80093fa:	480a      	ldr	r0, [pc, #40]	; (8009424 <system_control_get_state+0x2c>)
 80093fc:	f7f8 f964 	bl	80016c8 <GPIO_ReadInputData>
#endif
  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 8009400:	b168      	cbz	r0, 800941e <system_control_get_state+0x26>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,(1<<CONTROL_SAFETY_DOOR_BIT))) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
    #endif
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 8009402:	f080 0320 	eor.w	r3, r0, #32
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8009406:	0641      	lsls	r1, r0, #25
  uint8_t control_state = 0;
 8009408:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 800940c:	bf58      	it	pl
 800940e:	f043 0302 	orrpl.w	r3, r3, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009412:	0602      	lsls	r2, r0, #24
 8009414:	d401      	bmi.n	800941a <system_control_get_state+0x22>
 8009416:	f043 0304 	orr.w	r3, r3, #4
  }
  return(control_state);
}
 800941a:	4618      	mov	r0, r3
 800941c:	bd08      	pop	{r3, pc}
  uint8_t control_state = 0;
 800941e:	4603      	mov	r3, r0
}
 8009420:	4618      	mov	r0, r3
 8009422:	bd08      	pop	{r3, pc}
 8009424:	40010c00 	.word	0x40010c00

08009428 <EXTI9_5_IRQHandler>:
  }
}
#endif
#if defined (STM32F103C8)
void EXTI9_5_IRQHandler(void)
{
 8009428:	b508      	push	{r3, lr}
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 800942a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800942e:	f7f7 fee7 	bl	8001200 <EXTI_ClearITPendingBit>
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 8009432:	4811      	ldr	r0, [pc, #68]	; (8009478 <EXTI9_5_IRQHandler+0x50>)
 8009434:	f7f8 f948 	bl	80016c8 <GPIO_ReadInputData>
  if (pin) {
 8009438:	b160      	cbz	r0, 8009454 <EXTI9_5_IRQHandler+0x2c>
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 800943a:	0681      	lsls	r1, r0, #26
 800943c:	f000 0340 	and.w	r3, r0, #64	; 0x40
 8009440:	f000 0280 	and.w	r2, r0, #128	; 0x80
 8009444:	d407      	bmi.n	8009456 <EXTI9_5_IRQHandler+0x2e>
	uint8_t pin = system_control_get_state();
	if (pin) 
	{ 
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
		{
			mc_reset();
 8009446:	f7fa fc83 	bl	8003d50 <mc_reset>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800944a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800944e:	4b0b      	ldr	r3, [pc, #44]	; (800947c <EXTI9_5_IRQHandler+0x54>)
 8009450:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
		}
#endif
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
}
}
 8009454:	bd08      	pop	{r3, pc}
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8009456:	b933      	cbnz	r3, 8009466 <EXTI9_5_IRQHandler+0x3e>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009458:	b13a      	cbz	r2, 800946a <EXTI9_5_IRQHandler+0x42>
			bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 800945a:	4a09      	ldr	r2, [pc, #36]	; (8009480 <EXTI9_5_IRQHandler+0x58>)
 800945c:	7813      	ldrb	r3, [r2, #0]
 800945e:	f043 0308 	orr.w	r3, r3, #8
 8009462:	7013      	strb	r3, [r2, #0]
 8009464:	e7f1      	b.n	800944a <EXTI9_5_IRQHandler+0x22>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009466:	2a00      	cmp	r2, #0
 8009468:	d1f4      	bne.n	8009454 <EXTI9_5_IRQHandler+0x2c>
			bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 800946a:	4a05      	ldr	r2, [pc, #20]	; (8009480 <EXTI9_5_IRQHandler+0x58>)
 800946c:	7813      	ldrb	r3, [r2, #0]
 800946e:	f043 0302 	orr.w	r3, r3, #2
 8009472:	7013      	strb	r3, [r2, #0]
 8009474:	e7e9      	b.n	800944a <EXTI9_5_IRQHandler+0x22>
 8009476:	bf00      	nop
 8009478:	40010c00 	.word	0x40010c00
 800947c:	e000e100 	.word	0xe000e100
 8009480:	20001405 	.word	0x20001405

08009484 <system_check_safety_door_ajar>:
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 8009484:	2000      	movs	r0, #0
 8009486:	4770      	bx	lr

08009488 <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4604      	mov	r4, r0
 800948c:	2500      	movs	r5, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 800948e:	4621      	mov	r1, r4
 8009490:	4628      	mov	r0, r5
 8009492:	f7fe f95f 	bl	8007754 <settings_read_startup_line>
 8009496:	b150      	cbz	r0, 80094ae <system_execute_startup+0x26>
      line[0] = 0;
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
    } else {
      if (line[0] != 0) {
 8009498:	7823      	ldrb	r3, [r4, #0]
 800949a:	b973      	cbnz	r3, 80094ba <system_execute_startup+0x32>
  for (n=0; n < N_STARTUP_LINE; n++) {
 800949c:	b105      	cbz	r5, 80094a0 <system_execute_startup+0x18>
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
      }
    }
  }
}
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	2501      	movs	r5, #1
    if (!(settings_read_startup_line(n, line))) {
 80094a2:	4621      	mov	r1, r4
 80094a4:	4628      	mov	r0, r5
 80094a6:	f7fe f955 	bl	8007754 <settings_read_startup_line>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d1f4      	bne.n	8009498 <system_execute_startup+0x10>
      line[0] = 0;
 80094ae:	7020      	strb	r0, [r4, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 80094b0:	2107      	movs	r1, #7
 80094b2:	4620      	mov	r0, r4
 80094b4:	f7fd fd04 	bl	8006ec0 <report_execute_startup_message>
 80094b8:	e7f0      	b.n	800949c <system_execute_startup+0x14>
        uint8_t status_code = gc_execute_line(line);
 80094ba:	4620      	mov	r0, r4
 80094bc:	f7f8 fbb0 	bl	8001c20 <gc_execute_line>
        report_execute_startup_message(line,status_code);
 80094c0:	4601      	mov	r1, r0
 80094c2:	4620      	mov	r0, r4
 80094c4:	f7fd fcfc 	bl	8006ec0 <report_execute_startup_message>
 80094c8:	e7e8      	b.n	800949c <system_execute_startup+0x14>
 80094ca:	bf00      	nop

080094cc <system_execute_line>:
// the lines that are processed afterward, not necessarily real-time during a cycle,
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.
uint8_t system_execute_line(char *line)
{
  uint8_t char_counter = 1;
 80094cc:	2301      	movs	r3, #1
{
 80094ce:	b570      	push	{r4, r5, r6, lr}
  uint8_t helper_var = 0; // Helper variable
  float parameter, value;
  switch( line[char_counter] ) {
 80094d0:	7844      	ldrb	r4, [r0, #1]
{
 80094d2:	b084      	sub	sp, #16
  switch( line[char_counter] ) {
 80094d4:	2c43      	cmp	r4, #67	; 0x43
{
 80094d6:	4605      	mov	r5, r0
  uint8_t char_counter = 1;
 80094d8:	f88d 3007 	strb.w	r3, [sp, #7]
  switch( line[char_counter] ) {
 80094dc:	d04c      	beq.n	8009578 <system_execute_line+0xac>
 80094de:	d964      	bls.n	80095aa <system_execute_line+0xde>
 80094e0:	2c4a      	cmp	r4, #74	; 0x4a
 80094e2:	d108      	bne.n	80094f6 <system_execute_line+0x2a>
    case 0 : report_grbl_help(); break;
    case 'J' : // Jogging
      // Execute only if in IDLE or JOG states.
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 80094e4:	4ba9      	ldr	r3, [pc, #676]	; (800978c <system_execute_line+0x2c0>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80094ec:	d064      	beq.n	80095b8 <system_execute_line+0xec>
                report_startup_line(helper_var,line);
              }
            }
            break;
          } else { // Store startup line [IDLE Only] Prevents motion during ALARM.
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 80094ee:	2408      	movs	r4, #8
            return(settings_store_global_setting((uint8_t)parameter, value));
          }
      }
  }
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
}
 80094f0:	4620      	mov	r0, r4
 80094f2:	b004      	add	sp, #16
 80094f4:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 80094f6:	2c58      	cmp	r4, #88	; 0x58
 80094f8:	d03e      	beq.n	8009578 <system_execute_line+0xac>
 80094fa:	2c47      	cmp	r4, #71	; 0x47
 80094fc:	d03c      	beq.n	8009578 <system_execute_line+0xac>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 80094fe:	4ea3      	ldr	r6, [pc, #652]	; (800978c <system_execute_line+0x2c0>)
 8009500:	7833      	ldrb	r3, [r6, #0]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d8f3      	bhi.n	80094ee <system_execute_line+0x22>
      switch( line[1] ) {
 8009506:	3c23      	subs	r4, #35	; 0x23
 8009508:	2c30      	cmp	r4, #48	; 0x30
 800950a:	f200 80f4 	bhi.w	80096f6 <system_execute_line+0x22a>
 800950e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8009512:	00cf      	.short	0x00cf
 8009514:	00f200f2 	.word	0x00f200f2
 8009518:	00f200f2 	.word	0x00f200f2
 800951c:	00f200f2 	.word	0x00f200f2
 8009520:	00f200f2 	.word	0x00f200f2
 8009524:	00f200f2 	.word	0x00f200f2
 8009528:	00f200f2 	.word	0x00f200f2
 800952c:	00f200f2 	.word	0x00f200f2
 8009530:	00f200f2 	.word	0x00f200f2
 8009534:	00f200f2 	.word	0x00f200f2
 8009538:	00f200f2 	.word	0x00f200f2
 800953c:	00f200f2 	.word	0x00f200f2
 8009540:	00f200f2 	.word	0x00f200f2
 8009544:	00f200f2 	.word	0x00f200f2
 8009548:	00f200f2 	.word	0x00f200f2
 800954c:	00f200f2 	.word	0x00f200f2
 8009550:	00f200f2 	.word	0x00f200f2
 8009554:	00f200f2 	.word	0x00f200f2
 8009558:	00f200f2 	.word	0x00f200f2
 800955c:	00b600d6 	.word	0x00b600d6
 8009560:	00f200f2 	.word	0x00f200f2
 8009564:	00f200f2 	.word	0x00f200f2
 8009568:	00f20096 	.word	0x00f20096
 800956c:	00f200f2 	.word	0x00f200f2
 8009570:	00660077 	.word	0x00660077
  switch( line[char_counter] ) {
 8009574:	2c24      	cmp	r4, #36	; 0x24
 8009576:	d1c2      	bne.n	80094fe <system_execute_line+0x32>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8009578:	78ad      	ldrb	r5, [r5, #2]
 800957a:	b995      	cbnz	r5, 80095a2 <system_execute_line+0xd6>
      switch( line[1] ) {
 800957c:	2c43      	cmp	r4, #67	; 0x43
 800957e:	f000 80ee 	beq.w	800975e <system_execute_line+0x292>
 8009582:	d920      	bls.n	80095c6 <system_execute_line+0xfa>
 8009584:	2c47      	cmp	r4, #71	; 0x47
 8009586:	f000 80e6 	beq.w	8009756 <system_execute_line+0x28a>
 800958a:	2c58      	cmp	r4, #88	; 0x58
 800958c:	d11d      	bne.n	80095ca <system_execute_line+0xfe>
          if (sys.state == STATE_ALARM) {
 800958e:	4e7f      	ldr	r6, [pc, #508]	; (800978c <system_execute_line+0x2c0>)
 8009590:	7833      	ldrb	r3, [r6, #0]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d119      	bne.n	80095ca <system_execute_line+0xfe>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 8009596:	2003      	movs	r0, #3
 8009598:	f7fc ff9e 	bl	80064d8 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800959c:	462c      	mov	r4, r5
            sys.state = STATE_IDLE;
 800959e:	7035      	strb	r5, [r6, #0]
 80095a0:	e7a6      	b.n	80094f0 <system_execute_line+0x24>
            default: return(STATUS_INVALID_STATEMENT);
 80095a2:	2403      	movs	r4, #3
}
 80095a4:	4620      	mov	r0, r4
 80095a6:	b004      	add	sp, #16
 80095a8:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 80095aa:	2c00      	cmp	r4, #0
 80095ac:	d1e2      	bne.n	8009574 <system_execute_line+0xa8>
    case 0 : report_grbl_help(); break;
 80095ae:	f7fc fff7 	bl	80065a0 <report_grbl_help>
}
 80095b2:	4620      	mov	r0, r4
 80095b4:	b004      	add	sp, #16
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 80095b8:	7883      	ldrb	r3, [r0, #2]
 80095ba:	2b3d      	cmp	r3, #61	; 0x3d
 80095bc:	d1f1      	bne.n	80095a2 <system_execute_line+0xd6>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 80095be:	f7f8 fb2f 	bl	8001c20 <gc_execute_line>
 80095c2:	4604      	mov	r4, r0
 80095c4:	e794      	b.n	80094f0 <system_execute_line+0x24>
      switch( line[1] ) {
 80095c6:	2c24      	cmp	r4, #36	; 0x24
 80095c8:	d001      	beq.n	80095ce <system_execute_line+0x102>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80095ca:	2400      	movs	r4, #0
 80095cc:	e790      	b.n	80094f0 <system_execute_line+0x24>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 80095ce:	4b6f      	ldr	r3, [pc, #444]	; (800978c <system_execute_line+0x2c0>)
 80095d0:	781c      	ldrb	r4, [r3, #0]
 80095d2:	f014 0418 	ands.w	r4, r4, #24
 80095d6:	d18a      	bne.n	80094ee <system_execute_line+0x22>
          else { report_grbl_settings(); }
 80095d8:	f7fc ffe8 	bl	80065ac <report_grbl_settings>
          break;
 80095dc:	e788      	b.n	80094f0 <system_execute_line+0x24>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 80095de:	78ab      	ldrb	r3, [r5, #2]
 80095e0:	2b4c      	cmp	r3, #76	; 0x4c
 80095e2:	d1de      	bne.n	80095a2 <system_execute_line+0xd6>
 80095e4:	78eb      	ldrb	r3, [r5, #3]
 80095e6:	2b50      	cmp	r3, #80	; 0x50
 80095e8:	d1db      	bne.n	80095a2 <system_execute_line+0xd6>
 80095ea:	792c      	ldrb	r4, [r5, #4]
 80095ec:	2c00      	cmp	r4, #0
 80095ee:	d1d8      	bne.n	80095a2 <system_execute_line+0xd6>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80095f0:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state |= (mask);
 80095f2:	4a67      	ldr	r2, [pc, #412]	; (8009790 <system_execute_line+0x2c4>)
 80095f4:	7813      	ldrb	r3, [r2, #0]
 80095f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095fa:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i");
 80095fc:	b662      	cpsie	i
 80095fe:	e777      	b.n	80094f0 <system_execute_line+0x24>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8009600:	78ab      	ldrb	r3, [r5, #2]
 8009602:	2b53      	cmp	r3, #83	; 0x53
 8009604:	d1cd      	bne.n	80095a2 <system_execute_line+0xd6>
 8009606:	78eb      	ldrb	r3, [r5, #3]
 8009608:	2b54      	cmp	r3, #84	; 0x54
 800960a:	d1ca      	bne.n	80095a2 <system_execute_line+0xd6>
 800960c:	792b      	ldrb	r3, [r5, #4]
 800960e:	2b3d      	cmp	r3, #61	; 0x3d
 8009610:	d1c7      	bne.n	80095a2 <system_execute_line+0xd6>
 8009612:	79ab      	ldrb	r3, [r5, #6]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1c4      	bne.n	80095a2 <system_execute_line+0xd6>
          switch (line[5]) {
 8009618:	796b      	ldrb	r3, [r5, #5]
 800961a:	2b24      	cmp	r3, #36	; 0x24
 800961c:	f000 80f5 	beq.w	800980a <system_execute_line+0x33e>
 8009620:	2b2a      	cmp	r3, #42	; 0x2a
 8009622:	f000 80ee 	beq.w	8009802 <system_execute_line+0x336>
 8009626:	2b23      	cmp	r3, #35	; 0x23
 8009628:	d1bb      	bne.n	80095a2 <system_execute_line+0xd6>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 800962a:	2002      	movs	r0, #2
 800962c:	f7fd ffea 	bl	8007604 <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 8009630:	2009      	movs	r0, #9
 8009632:	f7fc ff51 	bl	80064d8 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009636:	2400      	movs	r4, #0
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 8009638:	f7fa fb8a 	bl	8003d50 <mc_reset>
          break;
 800963c:	e758      	b.n	80094f0 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 800963e:	2202      	movs	r2, #2
 8009640:	78ac      	ldrb	r4, [r5, #2]
 8009642:	f88d 2007 	strb.w	r2, [sp, #7]
 8009646:	2c00      	cmp	r4, #0
 8009648:	f040 8096 	bne.w	8009778 <system_execute_line+0x2ac>
              if (!(settings_read_startup_line(helper_var, line))) {
 800964c:	4629      	mov	r1, r5
 800964e:	4620      	mov	r0, r4
 8009650:	f7fe f880 	bl	8007754 <settings_read_startup_line>
 8009654:	2800      	cmp	r0, #0
 8009656:	f000 80b1 	beq.w	80097bc <system_execute_line+0x2f0>
                report_startup_line(helper_var,line);
 800965a:	4620      	mov	r0, r4
 800965c:	4629      	mov	r1, r5
 800965e:	f7fd fc17 	bl	8006e90 <report_startup_line>
              if (!(settings_read_startup_line(helper_var, line))) {
 8009662:	4629      	mov	r1, r5
 8009664:	2001      	movs	r0, #1
 8009666:	f7fe f875 	bl	8007754 <settings_read_startup_line>
 800966a:	4604      	mov	r4, r0
 800966c:	2800      	cmp	r0, #0
 800966e:	f000 80a1 	beq.w	80097b4 <system_execute_line+0x2e8>
                report_startup_line(helper_var,line);
 8009672:	4629      	mov	r1, r5
 8009674:	2001      	movs	r0, #1
 8009676:	f7fd fc0b 	bl	8006e90 <report_startup_line>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800967a:	2400      	movs	r4, #0
 800967c:	e738      	b.n	80094f0 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) {
 800967e:	2302      	movs	r3, #2
 8009680:	78ac      	ldrb	r4, [r5, #2]
 8009682:	f88d 3007 	strb.w	r3, [sp, #7]
 8009686:	2c00      	cmp	r4, #0
 8009688:	f000 808d 	beq.w	80097a6 <system_execute_line+0x2da>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800968c:	2c3d      	cmp	r4, #61	; 0x3d
 800968e:	f04f 0303 	mov.w	r3, #3
 8009692:	d186      	bne.n	80095a2 <system_execute_line+0xd6>
                line[char_counter-helper_var] = line[char_counter];
 8009694:	5cec      	ldrb	r4, [r5, r3]
 8009696:	18ea      	adds	r2, r5, r3
              } while (line[char_counter++] != 0);
 8009698:	3301      	adds	r3, #1
                line[char_counter-helper_var] = line[char_counter];
 800969a:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2c00      	cmp	r4, #0
 80096a2:	d1f7      	bne.n	8009694 <system_execute_line+0x1c8>
              settings_store_build_info(line);
 80096a4:	4628      	mov	r0, r5
 80096a6:	f88d 3007 	strb.w	r3, [sp, #7]
 80096aa:	f7fd ff95 	bl	80075d8 <settings_store_build_info>
 80096ae:	e71f      	b.n	80094f0 <system_execute_line+0x24>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 80096b0:	78ac      	ldrb	r4, [r5, #2]
 80096b2:	2c00      	cmp	r4, #0
 80096b4:	f47f af75 	bne.w	80095a2 <system_execute_line+0xd6>
          else { report_ngc_parameters(); }
 80096b8:	f7fd fa76 	bl	8006ba8 <report_ngc_parameters>
          break;
 80096bc:	e718      	b.n	80094f0 <system_execute_line+0x24>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 80096be:	4b35      	ldr	r3, [pc, #212]	; (8009794 <system_execute_line+0x2c8>)
 80096c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80096c4:	06db      	lsls	r3, r3, #27
 80096c6:	d55e      	bpl.n	8009786 <system_execute_line+0x2ba>
          sys.state = STATE_HOMING; // Set system state variable
 80096c8:	2304      	movs	r3, #4
          if (line[2] == 0) {
 80096ca:	78a8      	ldrb	r0, [r5, #2]
          sys.state = STATE_HOMING; // Set system state variable
 80096cc:	7033      	strb	r3, [r6, #0]
          if (line[2] == 0) {
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f47f af67 	bne.w	80095a2 <system_execute_line+0xd6>
            mc_homing_cycle(HOMING_CYCLE_ALL);
 80096d4:	f7fa fa84 	bl	8003be0 <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 80096d8:	7874      	ldrb	r4, [r6, #1]
 80096da:	2c00      	cmp	r4, #0
 80096dc:	f47f af75 	bne.w	80095ca <system_execute_line+0xfe>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 80096e0:	7034      	strb	r4, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 80096e2:	f7fe fd25 	bl	8008130 <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 80096e6:	78ab      	ldrb	r3, [r5, #2]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f47f af6e 	bne.w	80095ca <system_execute_line+0xfe>
 80096ee:	4628      	mov	r0, r5
 80096f0:	f7ff feca 	bl	8009488 <system_execute_startup>
 80096f4:	e6fc      	b.n	80094f0 <system_execute_line+0x24>
  uint8_t helper_var = 0; // Helper variable
 80096f6:	2400      	movs	r4, #0
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 80096f8:	f10d 0107 	add.w	r1, sp, #7
 80096fc:	aa02      	add	r2, sp, #8
 80096fe:	4628      	mov	r0, r5
 8009700:	f7fa fb58 	bl	8003db4 <read_float>
 8009704:	2800      	cmp	r0, #0
 8009706:	d03c      	beq.n	8009782 <system_execute_line+0x2b6>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8009708:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800970c:	1c53      	adds	r3, r2, #1
 800970e:	5caa      	ldrb	r2, [r5, r2]
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2a3d      	cmp	r2, #61	; 0x3d
 8009714:	f88d 3007 	strb.w	r3, [sp, #7]
 8009718:	f47f af43 	bne.w	80095a2 <system_execute_line+0xd6>
          if (helper_var) { // Store startup line
 800971c:	2c00      	cmp	r4, #0
 800971e:	d051      	beq.n	80097c4 <system_execute_line+0x2f8>
 8009720:	4618      	mov	r0, r3
              line[char_counter-helper_var] = line[char_counter];
 8009722:	5ce9      	ldrb	r1, [r5, r3]
 8009724:	1a1a      	subs	r2, r3, r0
 8009726:	54a9      	strb	r1, [r5, r2]
 8009728:	18ea      	adds	r2, r5, r3
            } while (line[char_counter++] != 0);
 800972a:	7812      	ldrb	r2, [r2, #0]
 800972c:	3301      	adds	r3, #1
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2a00      	cmp	r2, #0
 8009732:	d1f6      	bne.n	8009722 <system_execute_line+0x256>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 8009734:	4628      	mov	r0, r5
 8009736:	f88d 3007 	strb.w	r3, [sp, #7]
 800973a:	f7f8 fa71 	bl	8001c20 <gc_execute_line>
            if (helper_var) { return(helper_var); }
 800973e:	4604      	mov	r4, r0
 8009740:	2800      	cmp	r0, #0
 8009742:	f47f aed5 	bne.w	80094f0 <system_execute_line+0x24>
              helper_var = truncf(parameter); // Set helper_var to int value of parameter
 8009746:	9802      	ldr	r0, [sp, #8]
 8009748:	f7f7 fcb8 	bl	80010bc <__aeabi_f2uiz>
              settings_store_startup_line(helper_var,line);
 800974c:	4629      	mov	r1, r5
 800974e:	b2c0      	uxtb	r0, r0
 8009750:	f7fd ff30 	bl	80075b4 <settings_store_startup_line>
 8009754:	e6cc      	b.n	80094f0 <system_execute_line+0x24>
          report_gcode_modes();
 8009756:	f7fd fae5 	bl	8006d24 <report_gcode_modes>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800975a:	462c      	mov	r4, r5
          break;
 800975c:	e6c8      	b.n	80094f0 <system_execute_line+0x24>
          if ( sys.state == STATE_CHECK_MODE ) {
 800975e:	4b0b      	ldr	r3, [pc, #44]	; (800978c <system_execute_line+0x2c0>)
 8009760:	781c      	ldrb	r4, [r3, #0]
 8009762:	2c02      	cmp	r4, #2
 8009764:	d018      	beq.n	8009798 <system_execute_line+0x2cc>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 8009766:	2c00      	cmp	r4, #0
 8009768:	f47f aec1 	bne.w	80094ee <system_execute_line+0x22>
            sys.state = STATE_CHECK_MODE;
 800976c:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 800976e:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 8009770:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 8009772:	f7fc feb1 	bl	80064d8 <report_feedback_message>
 8009776:	e6bb      	b.n	80094f0 <system_execute_line+0x24>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 8009778:	2b00      	cmp	r3, #0
 800977a:	f47f aeb8 	bne.w	80094ee <system_execute_line+0x22>
            helper_var = true;  // Set helper_var to flag storing method.
 800977e:	2401      	movs	r4, #1
 8009780:	e7ba      	b.n	80096f8 <system_execute_line+0x22c>
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8009782:	2402      	movs	r4, #2
 8009784:	e6b4      	b.n	80094f0 <system_execute_line+0x24>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8009786:	2405      	movs	r4, #5
 8009788:	e6b2      	b.n	80094f0 <system_execute_line+0x24>
 800978a:	bf00      	nop
 800978c:	200013f0 	.word	0x200013f0
 8009790:	20001405 	.word	0x20001405
 8009794:	200015ac 	.word	0x200015ac
            mc_reset();
 8009798:	f7fa fada 	bl	8003d50 <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 800979c:	2005      	movs	r0, #5
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800979e:	462c      	mov	r4, r5
            report_feedback_message(MESSAGE_DISABLED);
 80097a0:	f7fc fe9a 	bl	80064d8 <report_feedback_message>
 80097a4:	e6a4      	b.n	80094f0 <system_execute_line+0x24>
            settings_read_build_info(line);
 80097a6:	4628      	mov	r0, r5
 80097a8:	f7fd fff0 	bl	800778c <settings_read_build_info>
            report_build_info(line);
 80097ac:	4628      	mov	r0, r5
 80097ae:	f7fd fbab 	bl	8006f08 <report_build_info>
 80097b2:	e69d      	b.n	80094f0 <system_execute_line+0x24>
                report_status_message(STATUS_SETTING_READ_FAIL);
 80097b4:	2007      	movs	r0, #7
 80097b6:	f7fc fe61 	bl	800647c <report_status_message>
 80097ba:	e699      	b.n	80094f0 <system_execute_line+0x24>
 80097bc:	2007      	movs	r0, #7
 80097be:	f7fc fe5d 	bl	800647c <report_status_message>
 80097c2:	e74e      	b.n	8009662 <system_execute_line+0x196>
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 80097c4:	f10d 0107 	add.w	r1, sp, #7
 80097c8:	aa03      	add	r2, sp, #12
 80097ca:	4628      	mov	r0, r5
 80097cc:	f7fa faf2 	bl	8003db4 <read_float>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d0d6      	beq.n	8009782 <system_execute_line+0x2b6>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 80097d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80097d8:	5ceb      	ldrb	r3, [r5, r3]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f47f aee1 	bne.w	80095a2 <system_execute_line+0xd6>
 80097e0:	9c02      	ldr	r4, [sp, #8]
 80097e2:	490c      	ldr	r1, [pc, #48]	; (8009814 <system_execute_line+0x348>)
 80097e4:	4620      	mov	r0, r4
 80097e6:	f7f7 fc23 	bl	8001030 <__aeabi_fcmpgt>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	f47f aed9 	bne.w	80095a2 <system_execute_line+0xd6>
            return(settings_store_global_setting((uint8_t)parameter, value));
 80097f0:	4620      	mov	r0, r4
 80097f2:	f7f7 fc63 	bl	80010bc <__aeabi_f2uiz>
 80097f6:	9903      	ldr	r1, [sp, #12]
 80097f8:	b2c0      	uxtb	r0, r0
 80097fa:	f7fd fff9 	bl	80077f0 <settings_store_global_setting>
 80097fe:	4604      	mov	r4, r0
 8009800:	e676      	b.n	80094f0 <system_execute_line+0x24>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 8009802:	20ff      	movs	r0, #255	; 0xff
 8009804:	f7fd fefe 	bl	8007604 <settings_restore>
 8009808:	e712      	b.n	8009630 <system_execute_line+0x164>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 800980a:	2001      	movs	r0, #1
 800980c:	f7fd fefa 	bl	8007604 <settings_restore>
 8009810:	e70e      	b.n	8009630 <system_execute_line+0x164>
 8009812:	bf00      	nop
 8009814:	437f0000 	.word	0x437f0000

08009818 <system_flag_wco_change>:
{
 8009818:	b508      	push	{r3, lr}
    protocol_buffer_synchronize();
 800981a:	f7fc fb4f 	bl	8005ebc <protocol_buffer_synchronize>
  sys.report_wco_counter = 0;
 800981e:	2200      	movs	r2, #0
 8009820:	4b01      	ldr	r3, [pc, #4]	; (8009828 <system_flag_wco_change+0x10>)
 8009822:	735a      	strb	r2, [r3, #13]
}
 8009824:	bd08      	pop	{r3, pc}
 8009826:	bf00      	nop
 8009828:	200013f0 	.word	0x200013f0

0800982c <system_convert_array_steps_to_mpos>:
{
 800982c:	b570      	push	{r4, r5, r6, lr}
    pos = steps[idx]/settings.steps_per_mm[idx];
 800982e:	4d10      	ldr	r5, [pc, #64]	; (8009870 <system_convert_array_steps_to_mpos+0x44>)
{
 8009830:	4604      	mov	r4, r0
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009832:	6808      	ldr	r0, [r1, #0]
{
 8009834:	460e      	mov	r6, r1
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009836:	f7f7 f9eb 	bl	8000c10 <__aeabi_i2f>
 800983a:	6829      	ldr	r1, [r5, #0]
 800983c:	f7f7 faf0 	bl	8000e20 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8009840:	6020      	str	r0, [r4, #0]
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009842:	6870      	ldr	r0, [r6, #4]
 8009844:	f7f7 f9e4 	bl	8000c10 <__aeabi_i2f>
 8009848:	6869      	ldr	r1, [r5, #4]
 800984a:	f7f7 fae9 	bl	8000e20 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 800984e:	6060      	str	r0, [r4, #4]
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009850:	68b0      	ldr	r0, [r6, #8]
 8009852:	f7f7 f9dd 	bl	8000c10 <__aeabi_i2f>
 8009856:	68a9      	ldr	r1, [r5, #8]
 8009858:	f7f7 fae2 	bl	8000e20 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 800985c:	60a0      	str	r0, [r4, #8]
    pos = steps[idx]/settings.steps_per_mm[idx];
 800985e:	68f0      	ldr	r0, [r6, #12]
 8009860:	f7f7 f9d6 	bl	8000c10 <__aeabi_i2f>
 8009864:	68e9      	ldr	r1, [r5, #12]
 8009866:	f7f7 fadb 	bl	8000e20 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 800986a:	60e0      	str	r0, [r4, #12]
}
 800986c:	bd70      	pop	{r4, r5, r6, pc}
 800986e:	bf00      	nop
 8009870:	200015ac 	.word	0x200015ac

08009874 <system_check_travel_limits>:
{
 8009874:	b570      	push	{r4, r5, r6, lr}
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009876:	6806      	ldr	r6, [r0, #0]
{
 8009878:	4604      	mov	r4, r0
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 800987a:	2100      	movs	r1, #0
 800987c:	4630      	mov	r0, r6
 800987e:	f7f7 fbd7 	bl	8001030 <__aeabi_fcmpgt>
 8009882:	bb68      	cbnz	r0, 80098e0 <system_check_travel_limits+0x6c>
 8009884:	4d17      	ldr	r5, [pc, #92]	; (80098e4 <system_check_travel_limits+0x70>)
 8009886:	4630      	mov	r0, r6
 8009888:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800988a:	f7f7 fbb3 	bl	8000ff4 <__aeabi_fcmplt>
 800988e:	bb38      	cbnz	r0, 80098e0 <system_check_travel_limits+0x6c>
 8009890:	6866      	ldr	r6, [r4, #4]
 8009892:	2100      	movs	r1, #0
 8009894:	4630      	mov	r0, r6
 8009896:	f7f7 fbcb 	bl	8001030 <__aeabi_fcmpgt>
 800989a:	bb08      	cbnz	r0, 80098e0 <system_check_travel_limits+0x6c>
 800989c:	4630      	mov	r0, r6
 800989e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80098a0:	f7f7 fba8 	bl	8000ff4 <__aeabi_fcmplt>
 80098a4:	b9e0      	cbnz	r0, 80098e0 <system_check_travel_limits+0x6c>
 80098a6:	68a6      	ldr	r6, [r4, #8]
 80098a8:	2100      	movs	r1, #0
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7f7 fbc0 	bl	8001030 <__aeabi_fcmpgt>
 80098b0:	b9b0      	cbnz	r0, 80098e0 <system_check_travel_limits+0x6c>
 80098b2:	4630      	mov	r0, r6
 80098b4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80098b6:	f7f7 fb9d 	bl	8000ff4 <__aeabi_fcmplt>
 80098ba:	b988      	cbnz	r0, 80098e0 <system_check_travel_limits+0x6c>
 80098bc:	68e4      	ldr	r4, [r4, #12]
 80098be:	2100      	movs	r1, #0
 80098c0:	4620      	mov	r0, r4
 80098c2:	f7f7 fbb5 	bl	8001030 <__aeabi_fcmpgt>
 80098c6:	b958      	cbnz	r0, 80098e0 <system_check_travel_limits+0x6c>
 80098c8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80098ca:	4620      	mov	r0, r4
 80098cc:	f7f7 fb92 	bl	8000ff4 <__aeabi_fcmplt>
 80098d0:	f04f 0301 	mov.w	r3, #1
 80098d4:	b108      	cbz	r0, 80098da <system_check_travel_limits+0x66>
 80098d6:	b2d8      	uxtb	r0, r3
}
 80098d8:	bd70      	pop	{r4, r5, r6, pc}
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 80098da:	4603      	mov	r3, r0
 80098dc:	b2d8      	uxtb	r0, r3
 80098de:	e7fb      	b.n	80098d8 <system_check_travel_limits+0x64>
 80098e0:	2001      	movs	r0, #1
}
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	200015ac 	.word	0x200015ac

080098e8 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i");
 80098e8:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
 80098ea:	4a03      	ldr	r2, [pc, #12]	; (80098f8 <system_set_exec_state_flag+0x10>)
 80098ec:	7813      	ldrb	r3, [r2, #0]
 80098ee:	4318      	orrs	r0, r3
 80098f0:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 80098f2:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	20001405 	.word	0x20001405

080098fc <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i");
 80098fc:	b672      	cpsid	i
  sys_rt_exec_state &= ~(mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 80098fe:	4a03      	ldr	r2, [pc, #12]	; (800990c <system_clear_exec_state_flag+0x10>)
 8009900:	7813      	ldrb	r3, [r2, #0]
 8009902:	ea23 0000 	bic.w	r0, r3, r0
 8009906:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009908:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800990a:	4770      	bx	lr
 800990c:	20001405 	.word	0x20001405

08009910 <system_set_exec_alarm>:
  __ASM volatile ("cpsid i");
 8009910:	b672      	cpsid	i
  sys_rt_exec_alarm = (code);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = (code);
 8009912:	4b02      	ldr	r3, [pc, #8]	; (800991c <system_set_exec_alarm+0xc>)
 8009914:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsie i");
 8009916:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	20001428 	.word	0x20001428

08009920 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i");
 8009920:	b672      	cpsid	i
  sys_rt_exec_alarm = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = 0;
 8009922:	2200      	movs	r2, #0
 8009924:	4b01      	ldr	r3, [pc, #4]	; (800992c <system_clear_exec_alarm+0xc>)
 8009926:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009928:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800992a:	4770      	bx	lr
 800992c:	20001428 	.word	0x20001428

08009930 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i");
 8009930:	b672      	cpsid	i
  sys_rt_exec_motion_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 8009932:	4a03      	ldr	r2, [pc, #12]	; (8009940 <system_set_exec_motion_override_flag+0x10>)
 8009934:	7813      	ldrb	r3, [r2, #0]
 8009936:	4318      	orrs	r0, r3
 8009938:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 800993a:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	200013ec 	.word	0x200013ec

08009944 <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i");
 8009944:	b672      	cpsid	i
  sys_rt_exec_accessory_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 8009946:	4a03      	ldr	r2, [pc, #12]	; (8009954 <system_set_exec_accessory_override_flag+0x10>)
 8009948:	7813      	ldrb	r3, [r2, #0]
 800994a:	4318      	orrs	r0, r3
 800994c:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 800994e:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	20001404 	.word	0x20001404

08009958 <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i");
 8009958:	b672      	cpsid	i
  sys_rt_exec_motion_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 800995a:	2200      	movs	r2, #0
 800995c:	4b01      	ldr	r3, [pc, #4]	; (8009964 <system_clear_exec_motion_overrides+0xc>)
 800995e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009960:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8009962:	4770      	bx	lr
 8009964:	200013ec 	.word	0x200013ec

08009968 <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i");
 8009968:	b672      	cpsid	i
  sys_rt_exec_accessory_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 800996a:	2200      	movs	r2, #0
 800996c:	4b01      	ldr	r3, [pc, #4]	; (8009974 <system_clear_exec_accessory_overrides+0xc>)
 800996e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009970:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8009972:	4770      	bx	lr
 8009974:	20001404 	.word	0x20001404

08009978 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009978:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800997a:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 800997c:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8009980:	4b3a      	ldr	r3, [pc, #232]	; (8009a6c <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009982:	493b      	ldr	r1, [pc, #236]	; (8009a70 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 8009984:	6818      	ldr	r0, [r3, #0]
{
 8009986:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 8009988:	f040 0001 	orr.w	r0, r0, #1
 800998c:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800998e:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009990:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009992:	4001      	ands	r1, r0
 8009994:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009996:	6819      	ldr	r1, [r3, #0]
 8009998:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800999c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80099a0:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80099a2:	6819      	ldr	r1, [r3, #0]
 80099a4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80099a8:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80099aa:	6859      	ldr	r1, [r3, #4]
 80099ac:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 80099b0:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 80099b2:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80099b4:	9400      	str	r4, [sp, #0]
 80099b6:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80099b8:	6819      	ldr	r1, [r3, #0]
 80099ba:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80099be:	6019      	str	r1, [r3, #0]
 80099c0:	e003      	b.n	80099ca <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80099c2:	9b00      	ldr	r3, [sp, #0]
 80099c4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80099c8:	d009      	beq.n	80099de <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80099ca:	6813      	ldr	r3, [r2, #0]
 80099cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099d0:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 80099d2:	9b00      	ldr	r3, [sp, #0]
 80099d4:	3301      	adds	r3, #1
 80099d6:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80099d8:	9b01      	ldr	r3, [sp, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0f1      	beq.n	80099c2 <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80099de:	4b23      	ldr	r3, [pc, #140]	; (8009a6c <SystemInit+0xf4>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80099e6:	bf18      	it	ne
 80099e8:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80099ea:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80099ec:	9b01      	ldr	r3, [sp, #4]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d006      	beq.n	8009a00 <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80099f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80099f6:	4b1f      	ldr	r3, [pc, #124]	; (8009a74 <SystemInit+0xfc>)
 80099f8:	609a      	str	r2, [r3, #8]
}
 80099fa:	b002      	add	sp, #8
 80099fc:	bc30      	pop	{r4, r5}
 80099fe:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009a00:	491d      	ldr	r1, [pc, #116]	; (8009a78 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8009a02:	4b1a      	ldr	r3, [pc, #104]	; (8009a6c <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009a04:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009a06:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009a08:	f040 0010 	orr.w	r0, r0, #16
 8009a0c:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8009a0e:	6808      	ldr	r0, [r1, #0]
 8009a10:	f020 0003 	bic.w	r0, r0, #3
 8009a14:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8009a16:	6808      	ldr	r0, [r1, #0]
 8009a18:	f040 0002 	orr.w	r0, r0, #2
 8009a1c:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8009a1e:	6859      	ldr	r1, [r3, #4]
 8009a20:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8009a22:	6859      	ldr	r1, [r3, #4]
 8009a24:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8009a26:	6859      	ldr	r1, [r3, #4]
 8009a28:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009a2c:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8009a2e:	6859      	ldr	r1, [r3, #4]
 8009a30:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8009a34:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8009a36:	6859      	ldr	r1, [r3, #4]
 8009a38:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8009a3c:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8009a3e:	6819      	ldr	r1, [r3, #0]
 8009a40:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8009a44:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009a46:	6813      	ldr	r3, [r2, #0]
 8009a48:	019b      	lsls	r3, r3, #6
 8009a4a:	d5fc      	bpl.n	8009a46 <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009a4c:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8009a4e:	4907      	ldr	r1, [pc, #28]	; (8009a6c <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009a50:	f023 0303 	bic.w	r3, r3, #3
 8009a54:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8009a56:	6853      	ldr	r3, [r2, #4]
 8009a58:	f043 0302 	orr.w	r3, r3, #2
 8009a5c:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8009a5e:	684b      	ldr	r3, [r1, #4]
 8009a60:	f003 030c 	and.w	r3, r3, #12
 8009a64:	2b08      	cmp	r3, #8
 8009a66:	d1fa      	bne.n	8009a5e <SystemInit+0xe6>
 8009a68:	e7c3      	b.n	80099f2 <SystemInit+0x7a>
 8009a6a:	bf00      	nop
 8009a6c:	40021000 	.word	0x40021000
 8009a70:	f8ff0000 	.word	0xf8ff0000
 8009a74:	e000ed00 	.word	0xe000ed00
 8009a78:	40022000 	.word	0x40022000

08009a7c <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8009a7c:	b508      	push	{r3, lr}
  if (Length == 0)
 8009a7e:	b138      	cbz	r0, 8009a90 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8009a80:	4b06      	ldr	r3, [pc, #24]	; (8009a9c <Standard_GetConfiguration+0x20>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8009a88:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <Standard_GetConfiguration+0x24>)
 8009a8a:	6818      	ldr	r0, [r3, #0]
 8009a8c:	300a      	adds	r0, #10
}
 8009a8e:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 8009a90:	2201      	movs	r2, #1
 8009a92:	4b03      	ldr	r3, [pc, #12]	; (8009aa0 <Standard_GetConfiguration+0x24>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	821a      	strh	r2, [r3, #16]
}
 8009a98:	bd08      	pop	{r3, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20001644 	.word	0x20001644
 8009aa0:	20001648 	.word	0x20001648

08009aa4 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8009aa4:	b508      	push	{r3, lr}
  if (Length == 0)
 8009aa6:	b138      	cbz	r0, 8009ab8 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8009aa8:	4b06      	ldr	r3, [pc, #24]	; (8009ac4 <Standard_GetInterface+0x20>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8009ab0:	4b05      	ldr	r3, [pc, #20]	; (8009ac8 <Standard_GetInterface+0x24>)
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	300c      	adds	r0, #12
}
 8009ab6:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 8009ab8:	2201      	movs	r2, #1
 8009aba:	4b03      	ldr	r3, [pc, #12]	; (8009ac8 <Standard_GetInterface+0x24>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	821a      	strh	r2, [r3, #16]
}
 8009ac0:	bd08      	pop	{r3, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20001644 	.word	0x20001644
 8009ac8:	20001648 	.word	0x20001648

08009acc <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8009acc:	b508      	push	{r3, lr}
 8009ace:	4b1f      	ldr	r3, [pc, #124]	; (8009b4c <Standard_GetStatus+0x80>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
  if (Length == 0)
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d034      	beq.n	8009b40 <Standard_GetStatus+0x74>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	481d      	ldr	r0, [pc, #116]	; (8009b50 <Standard_GetStatus+0x84>)
 8009ada:	8001      	strh	r1, [r0, #0]
 8009adc:	7813      	ldrb	r3, [r2, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009ade:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8009ae2:	d016      	beq.n	8009b12 <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d025      	beq.n	8009b34 <Standard_GetStatus+0x68>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d12c      	bne.n	8009b46 <Standard_GetStatus+0x7a>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8009aec:	7952      	ldrb	r2, [r2, #5]
 8009aee:	f002 030f 	and.w	r3, r2, #15
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009af8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8009afc:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8009afe:	681b      	ldr	r3, [r3, #0]
    if (ValBit(wIndex0, 7))
 8009b00:	d419      	bmi.n	8009b36 <Standard_GetStatus+0x6a>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8009b02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b0a:	d10e      	bne.n	8009b2a <Standard_GetStatus+0x5e>
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	7003      	strb	r3, [r0, #0]
 8009b10:	e00b      	b.n	8009b2a <Standard_GetStatus+0x5e>
    uint8_t Feature = pInformation->Current_Feature;
 8009b12:	7a52      	ldrb	r2, [r2, #9]
    if (ValBit(Feature, 5))
 8009b14:	f012 0320 	ands.w	r3, r2, #32
 8009b18:	bf1a      	itte	ne
 8009b1a:	2103      	movne	r1, #3
 8009b1c:	2302      	movne	r3, #2
 8009b1e:	2101      	moveq	r1, #1
      SetBit(StatusInfo0, 0);
 8009b20:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009b24:	bf18      	it	ne
 8009b26:	460b      	movne	r3, r1
 8009b28:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8009b2a:	4b0a      	ldr	r3, [pc, #40]	; (8009b54 <Standard_GetStatus+0x88>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 8009b32:	4807      	ldr	r0, [pc, #28]	; (8009b50 <Standard_GetStatus+0x84>)
}
 8009b34:	bd08      	pop	{r3, pc}
      if (_GetTxStallStatus(Related_Endpoint))
 8009b36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b3a:	2b10      	cmp	r3, #16
 8009b3c:	d1f5      	bne.n	8009b2a <Standard_GetStatus+0x5e>
 8009b3e:	e7e5      	b.n	8009b0c <Standard_GetStatus+0x40>
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8009b40:	2302      	movs	r3, #2
 8009b42:	8213      	strh	r3, [r2, #16]
}
 8009b44:	bd08      	pop	{r3, pc}
    return NULL;
 8009b46:	4608      	mov	r0, r1
}
 8009b48:	bd08      	pop	{r3, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20001648 	.word	0x20001648
 8009b50:	20001618 	.word	0x20001618
 8009b54:	20001644 	.word	0x20001644

08009b58 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8009b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8009b5c:	4f24      	ldr	r7, [pc, #144]	; (8009bf0 <DataStageIn+0x98>)
 8009b5e:	683d      	ldr	r5, [r7, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8009b60:	8a2c      	ldrh	r4, [r5, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8009b62:	b92c      	cbnz	r4, 8009b70 <DataStageIn+0x18>
  uint32_t ControlState = pInformation->ControlState;
 8009b64:	7a2e      	ldrb	r6, [r5, #8]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8009b66:	2e04      	cmp	r6, #4
 8009b68:	d02b      	beq.n	8009bc2 <DataStageIn+0x6a>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8009b6a:	8aab      	ldrh	r3, [r5, #20]
 8009b6c:	2604      	movs	r6, #4
 8009b6e:	e004      	b.n	8009b7a <DataStageIn+0x22>
 8009b70:	8aab      	ldrh	r3, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8009b72:	429c      	cmp	r4, r3
 8009b74:	bf8c      	ite	hi
 8009b76:	2602      	movhi	r6, #2
 8009b78:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8009b7a:	429c      	cmp	r4, r3
 8009b7c:	bf28      	it	cs
 8009b7e:	461c      	movcs	r4, r3
 8009b80:	69ab      	ldr	r3, [r5, #24]
 8009b82:	4620      	mov	r0, r4
 8009b84:	4798      	blx	r3
 8009b86:	4680      	mov	r8, r0

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8009b88:	2000      	movs	r0, #0
 8009b8a:	f000 fdc1 	bl	800a710 <GetEPTxAddr>
 8009b8e:	4622      	mov	r2, r4
 8009b90:	4601      	mov	r1, r0
 8009b92:	4640      	mov	r0, r8
 8009b94:	f000 fcd4 	bl	800a540 <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 8009b98:	4621      	mov	r1, r4
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	f000 fdd4 	bl	800a748 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8009ba0:	2030      	movs	r0, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009ba2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  pEPinfo->Usb_wLength -= Length;
 8009ba6:	8a2b      	ldrh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8009ba8:	8a69      	ldrh	r1, [r5, #18]
  pEPinfo->Usb_wLength -= Length;
 8009baa:	1b1b      	subs	r3, r3, r4
 8009bac:	822b      	strh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8009bae:	440c      	add	r4, r1
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009bb0:	4b10      	ldr	r3, [pc, #64]	; (8009bf4 <DataStageIn+0x9c>)
  vSetEPTxStatus(EP_TX_VALID);
 8009bb2:	4911      	ldr	r1, [pc, #68]	; (8009bf8 <DataStageIn+0xa0>)
  pEPinfo->Usb_wOffset += Length;
 8009bb4:	826c      	strh	r4, [r5, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8009bb6:	8008      	strh	r0, [r1, #0]
 8009bb8:	683d      	ldr	r5, [r7, #0]
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009bba:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8009bbc:	722e      	strb	r6, [r5, #8]
}
 8009bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Data_Mul_MaxPacketSize == TRUE)
 8009bc2:	4b0e      	ldr	r3, [pc, #56]	; (8009bfc <DataStageIn+0xa4>)
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	2a01      	cmp	r2, #1
 8009bc8:	d006      	beq.n	8009bd8 <DataStageIn+0x80>
      vSetEPTxStatus(EP_TX_STALL);
 8009bca:	2210      	movs	r2, #16
 8009bcc:	2607      	movs	r6, #7
 8009bce:	4b0a      	ldr	r3, [pc, #40]	; (8009bf8 <DataStageIn+0xa0>)
 8009bd0:	801a      	strh	r2, [r3, #0]
  pInformation->ControlState = ControlState;
 8009bd2:	722e      	strb	r6, [r5, #8]
}
 8009bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Send0LengthData();
 8009bd8:	2030      	movs	r0, #48	; 0x30
 8009bda:	4909      	ldr	r1, [pc, #36]	; (8009c00 <DataStageIn+0xa8>)
 8009bdc:	4a09      	ldr	r2, [pc, #36]	; (8009c04 <DataStageIn+0xac>)
 8009bde:	6809      	ldr	r1, [r1, #0]
 8009be0:	b289      	uxth	r1, r1
 8009be2:	440a      	add	r2, r1
 8009be4:	4904      	ldr	r1, [pc, #16]	; (8009bf8 <DataStageIn+0xa0>)
 8009be6:	0052      	lsls	r2, r2, #1
 8009be8:	6014      	str	r4, [r2, #0]
      Data_Mul_MaxPacketSize = FALSE;
 8009bea:	601c      	str	r4, [r3, #0]
      Send0LengthData();
 8009bec:	8008      	strh	r0, [r1, #0]
 8009bee:	e7e5      	b.n	8009bbc <DataStageIn+0x64>
 8009bf0:	20001648 	.word	0x20001648
 8009bf4:	2000164e 	.word	0x2000164e
 8009bf8:	20001650 	.word	0x20001650
 8009bfc:	20000f48 	.word	0x20000f48
 8009c00:	40005c50 	.word	0x40005c50
 8009c04:	20003002 	.word	0x20003002

08009c08 <Standard_ClearFeature>:
{
 8009c08:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8009c0a:	4b2e      	ldr	r3, [pc, #184]	; (8009cc4 <Standard_ClearFeature+0xbc>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	7818      	ldrb	r0, [r3, #0]
  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009c10:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8009c14:	d02c      	beq.n	8009c70 <Standard_ClearFeature+0x68>
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009c16:	2802      	cmp	r0, #2
 8009c18:	d128      	bne.n	8009c6c <Standard_ClearFeature+0x64>
    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8009c1a:	885a      	ldrh	r2, [r3, #2]
 8009c1c:	bb2a      	cbnz	r2, 8009c6a <Standard_ClearFeature+0x62>
        || (pInformation->USBwIndex1 != 0))
 8009c1e:	791a      	ldrb	r2, [r3, #4]
 8009c20:	bb1a      	cbnz	r2, 8009c6a <Standard_ClearFeature+0x62>
    wIndex0 = pInformation->USBwIndex0;
 8009c22:	795a      	ldrb	r2, [r3, #5]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009c24:	4d28      	ldr	r5, [pc, #160]	; (8009cc8 <Standard_ClearFeature+0xc0>)
    rEP = wIndex0 & ~0x80;
 8009c26:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8009c2a:	0084      	lsls	r4, r0, #2
 8009c2c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8009c30:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
      Status = _GetEPTxStatus(Related_Endpoint);
 8009c34:	6821      	ldr	r1, [r4, #0]
    if (ValBit(pInformation->USBwIndex0, 7))
 8009c36:	b252      	sxtb	r2, r2
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009c38:	782d      	ldrb	r5, [r5, #0]
    if (ValBit(pInformation->USBwIndex0, 7))
 8009c3a:	2a00      	cmp	r2, #0
      Status = _GetEPTxStatus(Related_Endpoint);
 8009c3c:	bfb4      	ite	lt
 8009c3e:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
      Status = _GetEPRxStatus(Related_Endpoint);
 8009c42:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009c46:	4285      	cmp	r5, r0
 8009c48:	d910      	bls.n	8009c6c <Standard_ClearFeature+0x64>
 8009c4a:	b179      	cbz	r1, 8009c6c <Standard_ClearFeature+0x64>
        || (pInformation->Current_Configuration == 0))
 8009c4c:	7a9b      	ldrb	r3, [r3, #10]
 8009c4e:	b16b      	cbz	r3, 8009c6c <Standard_ClearFeature+0x64>
    if (wIndex0 & 0x80)
 8009c50:	2a00      	cmp	r2, #0
      if (_GetTxStallStatus(Related_Endpoint ))
 8009c52:	6823      	ldr	r3, [r4, #0]
    if (wIndex0 & 0x80)
 8009c54:	db11      	blt.n	8009c7a <Standard_ClearFeature+0x72>
      if (_GetRxStallStatus(Related_Endpoint))
 8009c56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c5e:	d019      	beq.n	8009c94 <Standard_ClearFeature+0x8c>
    pUser_Standard_Requests->User_ClearFeature();
 8009c60:	4b1a      	ldr	r3, [pc, #104]	; (8009ccc <Standard_ClearFeature+0xc4>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	4798      	blx	r3
    return USB_SUCCESS;
 8009c68:	2000      	movs	r0, #0
}
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
  return USB_UNSUPPORT;
 8009c6c:	2002      	movs	r0, #2
}
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
    ClrBit(pInformation->Current_Feature, 5);
 8009c70:	7a5a      	ldrb	r2, [r3, #9]
 8009c72:	f022 0220 	bic.w	r2, r2, #32
 8009c76:	725a      	strb	r2, [r3, #9]
}
 8009c78:	bd38      	pop	{r3, r4, r5, pc}
      if (_GetTxStallStatus(Related_Endpoint ))
 8009c7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c7e:	2b10      	cmp	r3, #16
 8009c80:	d1ee      	bne.n	8009c60 <Standard_ClearFeature+0x58>
        ClearDTOG_TX(Related_Endpoint);
 8009c82:	b2c4      	uxtb	r4, r0
 8009c84:	4620      	mov	r0, r4
 8009c86:	f000 fd11 	bl	800a6ac <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	2130      	movs	r1, #48	; 0x30
 8009c8e:	f000 fc8f 	bl	800a5b0 <SetEPTxStatus>
 8009c92:	e7e5      	b.n	8009c60 <Standard_ClearFeature+0x58>
        if (Related_Endpoint == ENDP0)
 8009c94:	b990      	cbnz	r0, 8009cbc <Standard_ClearFeature+0xb4>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8009c96:	4b0e      	ldr	r3, [pc, #56]	; (8009cd0 <Standard_ClearFeature+0xc8>)
 8009c98:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8009c9c:	f000 fd62 	bl	800a764 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8009ca0:	6823      	ldr	r3, [r4, #0]
 8009ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	e7d1      	b.n	8009c60 <Standard_ClearFeature+0x58>
          ClearDTOG_RX(Related_Endpoint);
 8009cbc:	f000 fce4 	bl	800a688 <ClearDTOG_RX>
 8009cc0:	e7ee      	b.n	8009ca0 <Standard_ClearFeature+0x98>
 8009cc2:	bf00      	nop
 8009cc4:	20001648 	.word	0x20001648
 8009cc8:	2000009c 	.word	0x2000009c
 8009ccc:	20001644 	.word	0x20001644
 8009cd0:	2000006c 	.word	0x2000006c

08009cd4 <Standard_SetEndPointFeature>:
{
 8009cd4:	b538      	push	{r3, r4, r5, lr}
  wIndex0 = pInformation->USBwIndex0;
 8009cd6:	4b1f      	ldr	r3, [pc, #124]	; (8009d54 <Standard_SetEndPointFeature+0x80>)
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009cd8:	4d1f      	ldr	r5, [pc, #124]	; (8009d58 <Standard_SetEndPointFeature+0x84>)
  wIndex0 = pInformation->USBwIndex0;
 8009cda:	6818      	ldr	r0, [r3, #0]
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009cdc:	782d      	ldrb	r5, [r5, #0]
  wIndex0 = pInformation->USBwIndex0;
 8009cde:	7942      	ldrb	r2, [r0, #5]
  rEP = wIndex0 & ~0x80;
 8009ce0:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 8009ce4:	00a3      	lsls	r3, r4, #2
 8009ce6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009cea:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    Status = _GetEPTxStatus(Related_Endpoint);
 8009cee:	6819      	ldr	r1, [r3, #0]
  if (ValBit(pInformation->USBwIndex0, 7))
 8009cf0:	b252      	sxtb	r2, r2
 8009cf2:	2a00      	cmp	r2, #0
    Status = _GetEPTxStatus(Related_Endpoint);
 8009cf4:	bfb4      	ite	lt
 8009cf6:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
    Status = _GetEPRxStatus(Related_Endpoint);
 8009cfa:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009cfe:	42a5      	cmp	r5, r4
 8009d00:	d919      	bls.n	8009d36 <Standard_SetEndPointFeature+0x62>
      || pInformation->USBwValue != 0 || Status == 0
 8009d02:	8844      	ldrh	r4, [r0, #2]
 8009d04:	b9bc      	cbnz	r4, 8009d36 <Standard_SetEndPointFeature+0x62>
 8009d06:	b1b1      	cbz	r1, 8009d36 <Standard_SetEndPointFeature+0x62>
      || pInformation->Current_Configuration == 0)
 8009d08:	7a81      	ldrb	r1, [r0, #10]
 8009d0a:	b1a1      	cbz	r1, 8009d36 <Standard_SetEndPointFeature+0x62>
    if (wIndex0 & 0x80)
 8009d0c:	2a00      	cmp	r2, #0
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8009d0e:	681a      	ldr	r2, [r3, #0]
    if (wIndex0 & 0x80)
 8009d10:	db13      	blt.n	8009d3a <Standard_SetEndPointFeature+0x66>
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8009d12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d1a:	b292      	uxth	r2, r2
 8009d1c:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8009d20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d28:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests->User_SetEndPointFeature();
 8009d2a:	4b0c      	ldr	r3, [pc, #48]	; (8009d5c <Standard_SetEndPointFeature+0x88>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	4798      	blx	r3
  return USB_SUCCESS;
 8009d32:	2000      	movs	r0, #0
}
 8009d34:	bd38      	pop	{r3, r4, r5, pc}
    return USB_UNSUPPORT;
 8009d36:	2002      	movs	r0, #2
}
 8009d38:	bd38      	pop	{r3, r4, r5, pc}
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8009d3a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d42:	b292      	uxth	r2, r2
 8009d44:	f082 0210 	eor.w	r2, r2, #16
 8009d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d50:	601a      	str	r2, [r3, #0]
 8009d52:	e7ea      	b.n	8009d2a <Standard_SetEndPointFeature+0x56>
 8009d54:	20001648 	.word	0x20001648
 8009d58:	2000009c 	.word	0x2000009c
 8009d5c:	20001644 	.word	0x20001644

08009d60 <Standard_GetDescriptorData>:
  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8009d60:	4b05      	ldr	r3, [pc, #20]	; (8009d78 <Standard_GetDescriptorData+0x18>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8009d66:	b110      	cbz	r0, 8009d6e <Standard_GetDescriptorData+0xe>
  return pDesc->Descriptor + wOffset;
 8009d68:	6808      	ldr	r0, [r1, #0]
 8009d6a:	4410      	add	r0, r2
}
 8009d6c:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8009d6e:	8889      	ldrh	r1, [r1, #4]
 8009d70:	1a8a      	subs	r2, r1, r2
 8009d72:	821a      	strh	r2, [r3, #16]
    return 0;
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	20001648 	.word	0x20001648

08009d7c <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8009d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 8009d7e:	4ea5      	ldr	r6, [pc, #660]	; (800a014 <Setup0_Process+0x298>)
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009d80:	4ba5      	ldr	r3, [pc, #660]	; (800a018 <Setup0_Process+0x29c>)
  if (pInformation->ControlState != PAUSE)
 8009d82:	6834      	ldr	r4, [r6, #0]
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009d84:	681a      	ldr	r2, [r3, #0]
  if (pInformation->ControlState != PAUSE)
 8009d86:	7a23      	ldrb	r3, [r4, #8]
{
 8009d88:	b083      	sub	sp, #12
  if (pInformation->ControlState != PAUSE)
 8009d8a:	2b09      	cmp	r3, #9
 8009d8c:	d140      	bne.n	8009e10 <Setup0_Process+0x94>
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8009d8e:	2201      	movs	r2, #1
 8009d90:	88e3      	ldrh	r3, [r4, #6]
 8009d92:	7865      	ldrb	r5, [r4, #1]
 8009d94:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d059      	beq.n	8009e4e <Setup0_Process+0xd2>
  if (Request_No == GET_DESCRIPTOR)
 8009d9a:	2d06      	cmp	r5, #6
 8009d9c:	f000 8090 	beq.w	8009ec0 <Setup0_Process+0x144>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8009da0:	2d00      	cmp	r5, #0
 8009da2:	f040 80a1 	bne.w	8009ee8 <Setup0_Process+0x16c>
 8009da6:	8861      	ldrh	r1, [r4, #2]
 8009da8:	b931      	cbnz	r1, 8009db8 <Setup0_Process+0x3c>
           && (pInformation->USBwIndex1 == 0))
 8009daa:	6863      	ldr	r3, [r4, #4]
 8009dac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db4:	f000 817c 	beq.w	800a0b0 <Setup0_Process+0x334>
 8009db8:	4b98      	ldr	r3, [pc, #608]	; (800a01c <Setup0_Process+0x2a0>)
 8009dba:	681b      	ldr	r3, [r3, #0]
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8009dc2:	2803      	cmp	r0, #3
 8009dc4:	f000 80e4 	beq.w	8009f90 <Setup0_Process+0x214>
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8009dc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009dcc:	6833      	ldr	r3, [r6, #0]
 8009dce:	8a1a      	ldrh	r2, [r3, #16]
 8009dd0:	428a      	cmp	r2, r1
 8009dd2:	f000 80cb 	beq.w	8009f6c <Setup0_Process+0x1f0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8009dd6:	2802      	cmp	r0, #2
 8009dd8:	f040 8097 	bne.w	8009f0a <Setup0_Process+0x18e>
    pInformation->ControlState = STALLED;
 8009ddc:	2208      	movs	r2, #8
 8009dde:	721a      	strb	r2, [r3, #8]
{
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8009de0:	4b8f      	ldr	r3, [pc, #572]	; (800a020 <Setup0_Process+0x2a4>)
 8009de2:	2000      	movs	r0, #0
 8009de4:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8009de8:	f000 fcbc 	bl	800a764 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8009dec:	6833      	ldr	r3, [r6, #0]
 8009dee:	7a18      	ldrb	r0, [r3, #8]
 8009df0:	2808      	cmp	r0, #8
 8009df2:	d106      	bne.n	8009e02 <Setup0_Process+0x86>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8009df4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8009df8:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 8009dfa:	498a      	ldr	r1, [pc, #552]	; (800a024 <Setup0_Process+0x2a8>)
    vSetEPTxStatus(EP_TX_STALL);
 8009dfc:	4b8a      	ldr	r3, [pc, #552]	; (800a028 <Setup0_Process+0x2ac>)
    vSetEPRxStatus(EP_RX_STALL);
 8009dfe:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8009e00:	801a      	strh	r2, [r3, #0]
}
 8009e02:	f1a0 0009 	sub.w	r0, r0, #9
 8009e06:	fab0 f080 	clz	r0, r0
 8009e0a:	0940      	lsrs	r0, r0, #5
 8009e0c:	b003      	add	sp, #12
 8009e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009e10:	4b86      	ldr	r3, [pc, #536]	; (800a02c <Setup0_Process+0x2b0>)
 8009e12:	b292      	uxth	r2, r2
 8009e14:	4413      	add	r3, r2
 8009e16:	005b      	lsls	r3, r3, #1
 8009e18:	881d      	ldrh	r5, [r3, #0]
 8009e1a:	006d      	lsls	r5, r5, #1
 8009e1c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8009e20:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8009e24:	782b      	ldrb	r3, [r5, #0]
 8009e26:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8009e28:	786b      	ldrb	r3, [r5, #1]
 8009e2a:	7063      	strb	r3, [r4, #1]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8009e2c:	88a8      	ldrh	r0, [r5, #4]
 8009e2e:	f000 fccb 	bl	800a7c8 <ByteSwap>
 8009e32:	8060      	strh	r0, [r4, #2]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8009e34:	8928      	ldrh	r0, [r5, #8]
 8009e36:	6834      	ldr	r4, [r6, #0]
 8009e38:	f000 fcc6 	bl	800a7c8 <ByteSwap>
  pInformation->ControlState = SETTING_UP;
 8009e3c:	2201      	movs	r2, #1
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8009e3e:	80a0      	strh	r0, [r4, #4]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8009e40:	89ab      	ldrh	r3, [r5, #12]
 8009e42:	6834      	ldr	r4, [r6, #0]
 8009e44:	80e3      	strh	r3, [r4, #6]
 8009e46:	7865      	ldrb	r5, [r4, #1]
  pInformation->ControlState = SETTING_UP;
 8009e48:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1a5      	bne.n	8009d9a <Setup0_Process+0x1e>
 8009e4e:	7823      	ldrb	r3, [r4, #0]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009e50:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8009e54:	d125      	bne.n	8009ea2 <Setup0_Process+0x126>
    if (RequestNo == SET_CONFIGURATION)
 8009e56:	2d09      	cmp	r5, #9
 8009e58:	f000 80c4 	beq.w	8009fe4 <Setup0_Process+0x268>
    else if (RequestNo == SET_ADDRESS)
 8009e5c:	2d05      	cmp	r5, #5
 8009e5e:	f000 8088 	beq.w	8009f72 <Setup0_Process+0x1f6>
    else if (RequestNo == SET_FEATURE)
 8009e62:	2d03      	cmp	r5, #3
 8009e64:	f000 80fd 	beq.w	800a062 <Setup0_Process+0x2e6>
    else if (RequestNo == CLEAR_FEATURE)
 8009e68:	2d01      	cmp	r5, #1
 8009e6a:	f000 80eb 	beq.w	800a044 <Setup0_Process+0x2c8>
 8009e6e:	4b6b      	ldr	r3, [pc, #428]	; (800a01c <Setup0_Process+0x2a0>)
 8009e70:	681b      	ldr	r3, [r3, #0]
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	4628      	mov	r0, r5
 8009e76:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8009e78:	2803      	cmp	r0, #3
 8009e7a:	6834      	ldr	r4, [r6, #0]
 8009e7c:	f000 808c 	beq.w	8009f98 <Setup0_Process+0x21c>
  if (Result != USB_SUCCESS)
 8009e80:	2800      	cmp	r0, #0
 8009e82:	f040 8082 	bne.w	8009f8a <Setup0_Process+0x20e>
  USB_StatusIn();
 8009e86:	2000      	movs	r0, #0
 8009e88:	4a63      	ldr	r2, [pc, #396]	; (800a018 <Setup0_Process+0x29c>)
 8009e8a:	4b69      	ldr	r3, [pc, #420]	; (800a030 <Setup0_Process+0x2b4>)
 8009e8c:	6812      	ldr	r2, [r2, #0]
 8009e8e:	2130      	movs	r1, #48	; 0x30
 8009e90:	b292      	uxth	r2, r2
 8009e92:	4413      	add	r3, r2
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	6018      	str	r0, [r3, #0]
 8009e98:	2306      	movs	r3, #6
 8009e9a:	4a63      	ldr	r2, [pc, #396]	; (800a028 <Setup0_Process+0x2ac>)
  pInformation->ControlState = ControlState;
 8009e9c:	7223      	strb	r3, [r4, #8]
  USB_StatusIn();
 8009e9e:	8011      	strh	r1, [r2, #0]
 8009ea0:	e79e      	b.n	8009de0 <Setup0_Process+0x64>
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d040      	beq.n	8009f28 <Setup0_Process+0x1ac>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d1e1      	bne.n	8009e6e <Setup0_Process+0xf2>
    if (RequestNo == CLEAR_FEATURE)
 8009eaa:	2d01      	cmp	r5, #1
 8009eac:	f000 80d6 	beq.w	800a05c <Setup0_Process+0x2e0>
    else if (RequestNo == SET_FEATURE)
 8009eb0:	2d03      	cmp	r5, #3
 8009eb2:	d1dc      	bne.n	8009e6e <Setup0_Process+0xf2>
      Result = Standard_SetEndPointFeature();
 8009eb4:	f7ff ff0e 	bl	8009cd4 <Standard_SetEndPointFeature>
  if (Result != USB_SUCCESS)
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d1d8      	bne.n	8009e6e <Setup0_Process+0xf2>
 8009ebc:	6834      	ldr	r4, [r6, #0]
 8009ebe:	e7e2      	b.n	8009e86 <Setup0_Process+0x10a>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009ec0:	7822      	ldrb	r2, [r4, #0]
 8009ec2:	4b56      	ldr	r3, [pc, #344]	; (800a01c <Setup0_Process+0x2a0>)
 8009ec4:	0650      	lsls	r0, r2, #25
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f47f af78 	bne.w	8009dbc <Setup0_Process+0x40>
      uint8_t wValue1 = pInformation->USBwValue1;
 8009ecc:	78a2      	ldrb	r2, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
 8009ece:	2a01      	cmp	r2, #1
 8009ed0:	f000 80ec 	beq.w	800a0ac <Setup0_Process+0x330>
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8009ed4:	2a02      	cmp	r2, #2
 8009ed6:	f000 809a 	beq.w	800a00e <Setup0_Process+0x292>
      else if (wValue1 == STRING_DESCRIPTOR)
 8009eda:	2a03      	cmp	r2, #3
 8009edc:	f47f af6e 	bne.w	8009dbc <Setup0_Process+0x40>
        CopyRoutine = pProperty->GetStringDescriptor;
 8009ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (CopyRoutine)
 8009ee2:	b942      	cbnz	r2, 8009ef6 <Setup0_Process+0x17a>
 8009ee4:	2506      	movs	r5, #6
 8009ee6:	e769      	b.n	8009dbc <Setup0_Process+0x40>
  else if (Request_No == GET_CONFIGURATION)
 8009ee8:	2d08      	cmp	r5, #8
 8009eea:	d158      	bne.n	8009f9e <Setup0_Process+0x222>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009eec:	7823      	ldrb	r3, [r4, #0]
 8009eee:	065b      	lsls	r3, r3, #25
 8009ef0:	f47f af62 	bne.w	8009db8 <Setup0_Process+0x3c>
      CopyRoutine = Standard_GetConfiguration;
 8009ef4:	4a4f      	ldr	r2, [pc, #316]	; (800a034 <Setup0_Process+0x2b8>)
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8009ef6:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8009ef8:	61a2      	str	r2, [r4, #24]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8009efa:	8260      	strh	r0, [r4, #18]
    (*CopyRoutine)(0);
 8009efc:	4790      	blx	r2
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8009efe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009f02:	6833      	ldr	r3, [r6, #0]
 8009f04:	8a1a      	ldrh	r2, [r3, #16]
 8009f06:	428a      	cmp	r2, r1
 8009f08:	d030      	beq.n	8009f6c <Setup0_Process+0x1f0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8009f0a:	2a00      	cmp	r2, #0
 8009f0c:	f43f af66 	beq.w	8009ddc <Setup0_Process+0x60>
  if (ValBit(pInformation->USBbmRequestType, 7))
 8009f10:	f993 1000 	ldrsb.w	r1, [r3]
 8009f14:	2900      	cmp	r1, #0
 8009f16:	f2c0 80b9 	blt.w	800a08c <Setup0_Process+0x310>
    pInformation->ControlState = OUT_DATA;
 8009f1a:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8009f1c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8009f20:	4a40      	ldr	r2, [pc, #256]	; (800a024 <Setup0_Process+0x2a8>)
    pInformation->ControlState = OUT_DATA;
 8009f22:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8009f24:	8011      	strh	r1, [r2, #0]
 8009f26:	e75b      	b.n	8009de0 <Setup0_Process+0x64>
 8009f28:	4f3c      	ldr	r7, [pc, #240]	; (800a01c <Setup0_Process+0x2a0>)
    if (RequestNo == SET_INTERFACE)
 8009f2a:	2d0b      	cmp	r5, #11
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	d1a0      	bne.n	8009e72 <Setup0_Process+0xf6>
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	78e1      	ldrb	r1, [r4, #3]
 8009f34:	7960      	ldrb	r0, [r4, #5]
 8009f36:	4798      	blx	r3
  if (pInformation->Current_Configuration != 0)
 8009f38:	6833      	ldr	r3, [r6, #0]
 8009f3a:	7a9a      	ldrb	r2, [r3, #10]
 8009f3c:	2a00      	cmp	r2, #0
 8009f3e:	f000 80dc 	beq.w	800a0fa <Setup0_Process+0x37e>
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8009f42:	2800      	cmp	r0, #0
 8009f44:	f040 80d9 	bne.w	800a0fa <Setup0_Process+0x37e>
 8009f48:	791a      	ldrb	r2, [r3, #4]
 8009f4a:	2a00      	cmp	r2, #0
 8009f4c:	f040 80d5 	bne.w	800a0fa <Setup0_Process+0x37e>
        || (pInformation->USBwValue1 != 0))
 8009f50:	789b      	ldrb	r3, [r3, #2]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f040 80d1 	bne.w	800a0fa <Setup0_Process+0x37e>
      pUser_Standard_Requests->User_SetInterface();
 8009f58:	4b37      	ldr	r3, [pc, #220]	; (800a038 <Setup0_Process+0x2bc>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8009f60:	6834      	ldr	r4, [r6, #0]
 8009f62:	7962      	ldrb	r2, [r4, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8009f64:	78e3      	ldrb	r3, [r4, #3]
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8009f66:	72e2      	strb	r2, [r4, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8009f68:	7323      	strb	r3, [r4, #12]
 8009f6a:	e78c      	b.n	8009e86 <Setup0_Process+0x10a>
    pInformation->ControlState = PAUSE;
 8009f6c:	2209      	movs	r2, #9
 8009f6e:	721a      	strb	r2, [r3, #8]
 8009f70:	e736      	b.n	8009de0 <Setup0_Process+0x64>
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8009f72:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	db07      	blt.n	8009f8a <Setup0_Process+0x20e>
 8009f7a:	78a3      	ldrb	r3, [r4, #2]
 8009f7c:	b92b      	cbnz	r3, 8009f8a <Setup0_Process+0x20e>
          || (pInformation->USBwIndex != 0)
 8009f7e:	88a3      	ldrh	r3, [r4, #4]
 8009f80:	b91b      	cbnz	r3, 8009f8a <Setup0_Process+0x20e>
          || (pInformation->Current_Configuration != 0))
 8009f82:	7aa3      	ldrb	r3, [r4, #10]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f43f af7e 	beq.w	8009e86 <Setup0_Process+0x10a>
  if (Result != USB_SUCCESS)
 8009f8a:	2308      	movs	r3, #8
  pInformation->ControlState = ControlState;
 8009f8c:	7223      	strb	r3, [r4, #8]
 8009f8e:	e727      	b.n	8009de0 <Setup0_Process+0x64>
      pInformation->ControlState = PAUSE;
 8009f90:	2209      	movs	r2, #9
 8009f92:	6833      	ldr	r3, [r6, #0]
 8009f94:	721a      	strb	r2, [r3, #8]
 8009f96:	e723      	b.n	8009de0 <Setup0_Process+0x64>
    if (Result == USB_NOT_READY)
 8009f98:	2309      	movs	r3, #9
  pInformation->ControlState = ControlState;
 8009f9a:	7223      	strb	r3, [r4, #8]
 8009f9c:	e720      	b.n	8009de0 <Setup0_Process+0x64>
 8009f9e:	4f1f      	ldr	r7, [pc, #124]	; (800a01c <Setup0_Process+0x2a0>)
  else if (Request_No == GET_INTERFACE)
 8009fa0:	2d0a      	cmp	r5, #10
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	f47f af0a 	bne.w	8009dbc <Setup0_Process+0x40>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009fa8:	7822      	ldrb	r2, [r4, #0]
 8009faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009fae:	2a01      	cmp	r2, #1
 8009fb0:	f47f af04 	bne.w	8009dbc <Setup0_Process+0x40>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8009fb4:	7aa2      	ldrb	r2, [r4, #10]
 8009fb6:	2a00      	cmp	r2, #0
 8009fb8:	f43f af00 	beq.w	8009dbc <Setup0_Process+0x40>
 8009fbc:	8861      	ldrh	r1, [r4, #2]
 8009fbe:	2900      	cmp	r1, #0
 8009fc0:	f47f aefc 	bne.w	8009dbc <Setup0_Process+0x40>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8009fc4:	6862      	ldr	r2, [r4, #4]
 8009fc6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8009fca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009fce:	f47f aef5 	bne.w	8009dbc <Setup0_Process+0x40>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	7960      	ldrb	r0, [r4, #5]
 8009fd6:	4798      	blx	r3
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f040 808a 	bne.w	800a0f2 <Setup0_Process+0x376>
 8009fde:	6834      	ldr	r4, [r6, #0]
      CopyRoutine = Standard_GetInterface;
 8009fe0:	4a16      	ldr	r2, [pc, #88]	; (800a03c <Setup0_Process+0x2c0>)
 8009fe2:	e788      	b.n	8009ef6 <Setup0_Process+0x17a>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8009fe4:	4a16      	ldr	r2, [pc, #88]	; (800a040 <Setup0_Process+0x2c4>)
  if ((pInformation->USBwValue0 <=
 8009fe6:	78e3      	ldrb	r3, [r4, #3]
 8009fe8:	7852      	ldrb	r2, [r2, #1]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	f4ff af3f 	bcc.w	8009e6e <Setup0_Process+0xf2>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8009ff0:	78a2      	ldrb	r2, [r4, #2]
 8009ff2:	2a00      	cmp	r2, #0
 8009ff4:	f47f af3b 	bne.w	8009e6e <Setup0_Process+0xf2>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8009ff8:	88a2      	ldrh	r2, [r4, #4]
 8009ffa:	2a00      	cmp	r2, #0
 8009ffc:	f47f af37 	bne.w	8009e6e <Setup0_Process+0xf2>
    pUser_Standard_Requests->User_SetConfiguration();
 800a000:	4a0d      	ldr	r2, [pc, #52]	; (800a038 <Setup0_Process+0x2bc>)
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800a002:	72a3      	strb	r3, [r4, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800a004:	6813      	ldr	r3, [r2, #0]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	4798      	blx	r3
 800a00a:	6834      	ldr	r4, [r6, #0]
 800a00c:	e73b      	b.n	8009e86 <Setup0_Process+0x10a>
        CopyRoutine = pProperty->GetConfigDescriptor;
 800a00e:	6a1a      	ldr	r2, [r3, #32]
 800a010:	e767      	b.n	8009ee2 <Setup0_Process+0x166>
 800a012:	bf00      	nop
 800a014:	20001648 	.word	0x20001648
 800a018:	40005c50 	.word	0x40005c50
 800a01c:	20001620 	.word	0x20001620
 800a020:	2000006c 	.word	0x2000006c
 800a024:	2000164e 	.word	0x2000164e
 800a028:	20001650 	.word	0x20001650
 800a02c:	20003004 	.word	0x20003004
 800a030:	20003002 	.word	0x20003002
 800a034:	08009a7d 	.word	0x08009a7d
 800a038:	20001644 	.word	0x20001644
 800a03c:	08009aa5 	.word	0x08009aa5
 800a040:	2000009c 	.word	0x2000009c
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800a044:	78e3      	ldrb	r3, [r4, #3]
 800a046:	2b01      	cmp	r3, #1
 800a048:	f47f af11 	bne.w	8009e6e <Setup0_Process+0xf2>
          && pInformation->USBwIndex == 0
 800a04c:	88a3      	ldrh	r3, [r4, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f47f af0d 	bne.w	8009e6e <Setup0_Process+0xf2>
          && ValBit(pInformation->Current_Feature, 5))
 800a054:	7a63      	ldrb	r3, [r4, #9]
 800a056:	069c      	lsls	r4, r3, #26
 800a058:	f57f af09 	bpl.w	8009e6e <Setup0_Process+0xf2>
        Result = Standard_ClearFeature();
 800a05c:	f7ff fdd4 	bl	8009c08 <Standard_ClearFeature>
 800a060:	e72a      	b.n	8009eb8 <Setup0_Process+0x13c>
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 800a062:	78e3      	ldrb	r3, [r4, #3]
 800a064:	2b01      	cmp	r3, #1
 800a066:	f47f af02 	bne.w	8009e6e <Setup0_Process+0xf2>
          && (pInformation->USBwIndex == 0)
 800a06a:	88a3      	ldrh	r3, [r4, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f47f aefe 	bne.w	8009e6e <Setup0_Process+0xf2>
          && (ValBit(pInformation->Current_Feature, 5)))
 800a072:	7a63      	ldrb	r3, [r4, #9]
 800a074:	069f      	lsls	r7, r3, #26
 800a076:	f57f aefa 	bpl.w	8009e6e <Setup0_Process+0xf2>
  pUser_Standard_Requests->User_SetDeviceFeature();
 800a07a:	4a35      	ldr	r2, [pc, #212]	; (800a150 <Setup0_Process+0x3d4>)
  SetBit(pInformation->Current_Feature, 5);
 800a07c:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 800a080:	6812      	ldr	r2, [r2, #0]
  SetBit(pInformation->Current_Feature, 5);
 800a082:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800a084:	69d3      	ldr	r3, [r2, #28]
 800a086:	4798      	blx	r3
 800a088:	6834      	ldr	r4, [r6, #0]
 800a08a:	e6fc      	b.n	8009e86 <Setup0_Process+0x10a>
 800a08c:	4831      	ldr	r0, [pc, #196]	; (800a154 <Setup0_Process+0x3d8>)
    __IO uint32_t wLength = pInformation->USBwLength;
 800a08e:	88d9      	ldrh	r1, [r3, #6]
 800a090:	6800      	ldr	r0, [r0, #0]
 800a092:	9101      	str	r1, [sp, #4]
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800a094:	9d01      	ldr	r5, [sp, #4]
 800a096:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 800a09a:	42aa      	cmp	r2, r5
 800a09c:	b2a0      	uxth	r0, r4
 800a09e:	d911      	bls.n	800a0c4 <Setup0_Process+0x348>
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 800a0a0:	9a01      	ldr	r2, [sp, #4]
 800a0a2:	821a      	strh	r2, [r3, #16]
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800a0a4:	8298      	strh	r0, [r3, #20]
    DataStageIn();
 800a0a6:	f7ff fd57 	bl	8009b58 <DataStageIn>
 800a0aa:	e699      	b.n	8009de0 <Setup0_Process+0x64>
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800a0ac:	69da      	ldr	r2, [r3, #28]
 800a0ae:	e718      	b.n	8009ee2 <Setup0_Process+0x166>
 800a0b0:	7825      	ldrb	r5, [r4, #0]
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a0b2:	f015 057f 	ands.w	r5, r5, #127	; 0x7f
 800a0b6:	d10d      	bne.n	800a0d4 <Setup0_Process+0x358>
        && (pInformation->USBwIndex == 0))
 800a0b8:	88a3      	ldrh	r3, [r4, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f47f ae7c 	bne.w	8009db8 <Setup0_Process+0x3c>
        CopyRoutine = Standard_GetStatus;
 800a0c0:	4a25      	ldr	r2, [pc, #148]	; (800a158 <Setup0_Process+0x3dc>)
 800a0c2:	e718      	b.n	8009ef6 <Setup0_Process+0x17a>
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800a0c4:	4291      	cmp	r1, r2
 800a0c6:	d9ed      	bls.n	800a0a4 <Setup0_Process+0x328>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800a0c8:	4290      	cmp	r0, r2
 800a0ca:	d918      	bls.n	800a0fe <Setup0_Process+0x382>
        Data_Mul_MaxPacketSize = FALSE;
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	4a23      	ldr	r2, [pc, #140]	; (800a15c <Setup0_Process+0x3e0>)
 800a0d0:	6011      	str	r1, [r2, #0]
 800a0d2:	e7e7      	b.n	800a0a4 <Setup0_Process+0x328>
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a0d4:	2d01      	cmp	r5, #1
 800a0d6:	d11c      	bne.n	800a112 <Setup0_Process+0x396>
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800a0d8:	4f1e      	ldr	r7, [pc, #120]	; (800a154 <Setup0_Process+0x3d8>)
 800a0da:	7960      	ldrb	r0, [r4, #5]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	4798      	blx	r3
 800a0e2:	b930      	cbnz	r0, 800a0f2 <Setup0_Process+0x376>
          && (pInformation->Current_Configuration != 0))
 800a0e4:	6834      	ldr	r4, [r6, #0]
 800a0e6:	7aa3      	ldrb	r3, [r4, #10]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1e9      	bne.n	800a0c0 <Setup0_Process+0x344>
 800a0ec:	7865      	ldrb	r5, [r4, #1]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	e664      	b.n	8009dbc <Setup0_Process+0x40>
 800a0f2:	6832      	ldr	r2, [r6, #0]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	7855      	ldrb	r5, [r2, #1]
 800a0f8:	e660      	b.n	8009dbc <Setup0_Process+0x40>
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	e6b9      	b.n	8009e72 <Setup0_Process+0xf6>
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800a0fe:	fb92 f1f4 	sdiv	r1, r2, r4
 800a102:	fb04 2211 	mls	r2, r4, r1, r2
 800a106:	2a00      	cmp	r2, #0
 800a108:	d1cc      	bne.n	800a0a4 <Setup0_Process+0x328>
        Data_Mul_MaxPacketSize = TRUE;
 800a10a:	2101      	movs	r1, #1
 800a10c:	4a13      	ldr	r2, [pc, #76]	; (800a15c <Setup0_Process+0x3e0>)
 800a10e:	6011      	str	r1, [r2, #0]
 800a110:	e7c8      	b.n	800a0a4 <Setup0_Process+0x328>
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a112:	2d02      	cmp	r5, #2
 800a114:	d118      	bne.n	800a148 <Setup0_Process+0x3cc>
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800a116:	7965      	ldrb	r5, [r4, #5]
 800a118:	f005 020f 	and.w	r2, r5, #15
 800a11c:	0093      	lsls	r3, r2, #2
      if (ValBit(pInformation->USBwIndex0, 7))
 800a11e:	0629      	lsls	r1, r5, #24
 800a120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a124:	490e      	ldr	r1, [pc, #56]	; (800a160 <Setup0_Process+0x3e4>)
 800a126:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
        Status = _GetEPTxStatus(Related_Endpoint);
 800a12a:	681b      	ldr	r3, [r3, #0]
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a12c:	7809      	ldrb	r1, [r1, #0]
        Status = _GetEPTxStatus(Related_Endpoint);
 800a12e:	bf4c      	ite	mi
 800a130:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
        Status = _GetEPRxStatus(Related_Endpoint);
 800a134:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a138:	4291      	cmp	r1, r2
 800a13a:	d905      	bls.n	800a148 <Setup0_Process+0x3cc>
 800a13c:	f015 0570 	ands.w	r5, r5, #112	; 0x70
 800a140:	d102      	bne.n	800a148 <Setup0_Process+0x3cc>
          && (Status != 0))
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1bc      	bne.n	800a0c0 <Setup0_Process+0x344>
 800a146:	e637      	b.n	8009db8 <Setup0_Process+0x3c>
 800a148:	4b02      	ldr	r3, [pc, #8]	; (800a154 <Setup0_Process+0x3d8>)
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a14a:	2500      	movs	r5, #0
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	e635      	b.n	8009dbc <Setup0_Process+0x40>
 800a150:	20001644 	.word	0x20001644
 800a154:	20001620 	.word	0x20001620
 800a158:	08009acd 	.word	0x08009acd
 800a15c:	20000f48 	.word	0x20000f48
 800a160:	2000009c 	.word	0x2000009c

0800a164 <In0_Process>:
{
 800a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a166:	4c29      	ldr	r4, [pc, #164]	; (800a20c <In0_Process+0xa8>)
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	7a1a      	ldrb	r2, [r3, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a16c:	2a02      	cmp	r2, #2
 800a16e:	d026      	beq.n	800a1be <In0_Process+0x5a>
 800a170:	2a04      	cmp	r2, #4
 800a172:	d024      	beq.n	800a1be <In0_Process+0x5a>
  else if (ControlState == WAIT_STATUS_IN)
 800a174:	2a06      	cmp	r2, #6
 800a176:	d018      	beq.n	800a1aa <In0_Process+0x46>
 800a178:	2108      	movs	r1, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a17a:	4a25      	ldr	r2, [pc, #148]	; (800a210 <In0_Process+0xac>)
  pInformation->ControlState = ControlState;
 800a17c:	7219      	strb	r1, [r3, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a17e:	2000      	movs	r0, #0
 800a180:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a184:	f000 faee 	bl	800a764 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	7a18      	ldrb	r0, [r3, #8]
 800a18c:	2808      	cmp	r0, #8
 800a18e:	d106      	bne.n	800a19e <In0_Process+0x3a>
    vSetEPRxStatus(EP_RX_STALL);
 800a190:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a194:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a196:	491f      	ldr	r1, [pc, #124]	; (800a214 <In0_Process+0xb0>)
    vSetEPTxStatus(EP_TX_STALL);
 800a198:	4b1f      	ldr	r3, [pc, #124]	; (800a218 <In0_Process+0xb4>)
    vSetEPRxStatus(EP_RX_STALL);
 800a19a:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a19c:	801a      	strh	r2, [r3, #0]
}
 800a19e:	f1a0 0009 	sub.w	r0, r0, #9
 800a1a2:	fab0 f080 	clz	r0, r0
 800a1a6:	0940      	lsrs	r0, r0, #5
 800a1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a1aa:	785a      	ldrb	r2, [r3, #1]
 800a1ac:	2a05      	cmp	r2, #5
 800a1ae:	d00b      	beq.n	800a1c8 <In0_Process+0x64>
    (*pProperty->Process_Status_IN)();
 800a1b0:	4b1a      	ldr	r3, [pc, #104]	; (800a21c <In0_Process+0xb8>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	4798      	blx	r3
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	2108      	movs	r1, #8
 800a1bc:	e7dd      	b.n	800a17a <In0_Process+0x16>
    DataStageIn();
 800a1be:	f7ff fccb 	bl	8009b58 <DataStageIn>
    ControlState = pInformation->ControlState;
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	7a19      	ldrb	r1, [r3, #8]
 800a1c6:	e7d8      	b.n	800a17a <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a1c8:	781a      	ldrb	r2, [r3, #0]
 800a1ca:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800a1ce:	d1ef      	bne.n	800a1b0 <In0_Process+0x4c>
{
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a1d0:	4913      	ldr	r1, [pc, #76]	; (800a220 <In0_Process+0xbc>)
      SetDeviceAddress(pInformation->USBwValue0);
 800a1d2:	f893 c003 	ldrb.w	ip, [r3, #3]
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a1d6:	780d      	ldrb	r5, [r1, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800a1d8:	b175      	cbz	r5, 800a1f8 <In0_Process+0x94>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a1da:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a1de:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a1e2:	4910      	ldr	r1, [pc, #64]	; (800a224 <In0_Process+0xc0>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a1e4:	680b      	ldr	r3, [r1, #0]
 800a1e6:	ea42 0006 	orr.w	r0, r2, r6
 800a1ea:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a1ec:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a1ee:	4303      	orrs	r3, r0
  for (i = 0; i < nEP; i++)
 800a1f0:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a1f2:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a1f6:	d1f5      	bne.n	800a1e4 <In0_Process+0x80>
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a1f8:	490b      	ldr	r1, [pc, #44]	; (800a228 <In0_Process+0xc4>)
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a1fa:	4a0c      	ldr	r2, [pc, #48]	; (800a22c <In0_Process+0xc8>)
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a1fc:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 800a200:	600b      	str	r3, [r1, #0]
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a202:	6813      	ldr	r3, [r2, #0]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	4798      	blx	r3
 800a208:	e7d2      	b.n	800a1b0 <In0_Process+0x4c>
 800a20a:	bf00      	nop
 800a20c:	20001648 	.word	0x20001648
 800a210:	2000006c 	.word	0x2000006c
 800a214:	2000164e 	.word	0x2000164e
 800a218:	20001650 	.word	0x20001650
 800a21c:	20001620 	.word	0x20001620
 800a220:	2000009c 	.word	0x2000009c
 800a224:	40005c00 	.word	0x40005c00
 800a228:	40005c4c 	.word	0x40005c4c
 800a22c:	20001644 	.word	0x20001644

0800a230 <Out0_Process>:
{
 800a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a232:	4d3c      	ldr	r5, [pc, #240]	; (800a324 <Out0_Process+0xf4>)
 800a234:	682c      	ldr	r4, [r5, #0]
 800a236:	7a23      	ldrb	r3, [r4, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d00e      	beq.n	800a25a <Out0_Process+0x2a>
 800a23c:	2b04      	cmp	r3, #4
 800a23e:	d00c      	beq.n	800a25a <Out0_Process+0x2a>
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800a240:	2b03      	cmp	r3, #3
 800a242:	d023      	beq.n	800a28c <Out0_Process+0x5c>
 800a244:	2b05      	cmp	r3, #5
 800a246:	d021      	beq.n	800a28c <Out0_Process+0x5c>
  else if (ControlState == WAIT_STATUS_OUT)
 800a248:	2b07      	cmp	r3, #7
 800a24a:	d106      	bne.n	800a25a <Out0_Process+0x2a>
    (*pProperty->Process_Status_OUT)();
 800a24c:	4b36      	ldr	r3, [pc, #216]	; (800a328 <Out0_Process+0xf8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	4798      	blx	r3
 800a254:	682c      	ldr	r4, [r5, #0]
 800a256:	2308      	movs	r3, #8
 800a258:	e000      	b.n	800a25c <Out0_Process+0x2c>
 800a25a:	2308      	movs	r3, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a25c:	4a33      	ldr	r2, [pc, #204]	; (800a32c <Out0_Process+0xfc>)
  pInformation->ControlState = ControlState;
 800a25e:	7223      	strb	r3, [r4, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a260:	2000      	movs	r0, #0
 800a262:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a266:	f000 fa7d 	bl	800a764 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a26a:	682b      	ldr	r3, [r5, #0]
 800a26c:	7a18      	ldrb	r0, [r3, #8]
 800a26e:	2808      	cmp	r0, #8
 800a270:	d106      	bne.n	800a280 <Out0_Process+0x50>
    vSetEPRxStatus(EP_RX_STALL);
 800a272:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a276:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a278:	492d      	ldr	r1, [pc, #180]	; (800a330 <Out0_Process+0x100>)
    vSetEPTxStatus(EP_TX_STALL);
 800a27a:	4b2e      	ldr	r3, [pc, #184]	; (800a334 <Out0_Process+0x104>)
    vSetEPRxStatus(EP_RX_STALL);
 800a27c:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a27e:	801a      	strh	r2, [r3, #0]
  return Post0_Process();
 800a280:	f1a0 0009 	sub.w	r0, r0, #9
 800a284:	fab0 f080 	clz	r0, r0
 800a288:	0940      	lsrs	r0, r0, #5
}
 800a28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pEPinfo->CopyData && save_rLength)
 800a28c:	69a3      	ldr	r3, [r4, #24]
  save_rLength = pEPinfo->Usb_rLength;
 800a28e:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->CopyData && save_rLength)
 800a290:	b1b3      	cbz	r3, 800a2c0 <Out0_Process+0x90>
 800a292:	8aa6      	ldrh	r6, [r4, #20]
 800a294:	b352      	cbz	r2, 800a2ec <Out0_Process+0xbc>
    Buffer = (*pEPinfo->CopyData)(Length);
 800a296:	4296      	cmp	r6, r2
 800a298:	bf28      	it	cs
 800a29a:	4616      	movcs	r6, r2
 800a29c:	4630      	mov	r0, r6
 800a29e:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 800a2a0:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a2a2:	8a63      	ldrh	r3, [r4, #18]
    pEPinfo->Usb_rLength -= Length;
 800a2a4:	1b92      	subs	r2, r2, r6
    pEPinfo->Usb_rOffset += Length;
 800a2a6:	4433      	add	r3, r6
    Buffer = (*pEPinfo->CopyData)(Length);
 800a2a8:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800a2aa:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a2ac:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	f000 fa3c 	bl	800a72c <GetEPRxAddr>
 800a2b4:	4632      	mov	r2, r6
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	f000 f951 	bl	800a560 <PMAToUserBufferCopy>
 800a2be:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->Usb_rLength != 0)
 800a2c0:	b1ca      	cbz	r2, 800a2f6 <Out0_Process+0xc6>
    SetEPTxCount(ENDP0, 0);
 800a2c2:	2100      	movs	r1, #0
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800a2c4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a2c8:	4b19      	ldr	r3, [pc, #100]	; (800a330 <Out0_Process+0x100>)
    SetEPTxCount(ENDP0, 0);
 800a2ca:	4608      	mov	r0, r1
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800a2cc:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800a2ce:	f000 fa3b 	bl	800a748 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a2d2:	2230      	movs	r2, #48	; 0x30
 800a2d4:	8a23      	ldrh	r3, [r4, #16]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a2d6:	8aa0      	ldrh	r0, [r4, #20]
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a2d8:	4916      	ldr	r1, [pc, #88]	; (800a334 <Out0_Process+0x104>)
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a2da:	4298      	cmp	r0, r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a2dc:	800a      	strh	r2, [r1, #0]
 800a2de:	682a      	ldr	r2, [r5, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a2e0:	d91b      	bls.n	800a31a <Out0_Process+0xea>
    if (pEPinfo->Usb_rLength > 0)
 800a2e2:	b1e3      	cbz	r3, 800a31e <Out0_Process+0xee>
      pInformation->ControlState = LAST_OUT_DATA;
 800a2e4:	2305      	movs	r3, #5
 800a2e6:	4614      	mov	r4, r2
 800a2e8:	7213      	strb	r3, [r2, #8]
 800a2ea:	e7b7      	b.n	800a25c <Out0_Process+0x2c>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a2ec:	42b2      	cmp	r2, r6
 800a2ee:	d306      	bcc.n	800a2fe <Out0_Process+0xce>
    pInformation->ControlState = OUT_DATA;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	7223      	strb	r3, [r4, #8]
 800a2f4:	e7b2      	b.n	800a25c <Out0_Process+0x2c>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a2f6:	8aa3      	ldrh	r3, [r4, #20]
 800a2f8:	682c      	ldr	r4, [r5, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0f8      	beq.n	800a2f0 <Out0_Process+0xc0>
 800a2fe:	490d      	ldr	r1, [pc, #52]	; (800a334 <Out0_Process+0x104>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800a300:	2306      	movs	r3, #6
      USB_StatusIn();
 800a302:	2700      	movs	r7, #0
 800a304:	2630      	movs	r6, #48	; 0x30
 800a306:	4a0c      	ldr	r2, [pc, #48]	; (800a338 <Out0_Process+0x108>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800a308:	7223      	strb	r3, [r4, #8]
      USB_StatusIn();
 800a30a:	6810      	ldr	r0, [r2, #0]
 800a30c:	4a0b      	ldr	r2, [pc, #44]	; (800a33c <Out0_Process+0x10c>)
 800a30e:	b280      	uxth	r0, r0
 800a310:	4402      	add	r2, r0
 800a312:	0052      	lsls	r2, r2, #1
 800a314:	6017      	str	r7, [r2, #0]
 800a316:	800e      	strh	r6, [r1, #0]
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800a318:	e7a0      	b.n	800a25c <Out0_Process+0x2c>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a31a:	4614      	mov	r4, r2
 800a31c:	e7e8      	b.n	800a2f0 <Out0_Process+0xc0>
    if (pEPinfo->Usb_rLength > 0)
 800a31e:	4614      	mov	r4, r2
 800a320:	e7ee      	b.n	800a300 <Out0_Process+0xd0>
 800a322:	bf00      	nop
 800a324:	20001648 	.word	0x20001648
 800a328:	20001620 	.word	0x20001620
 800a32c:	2000006c 	.word	0x2000006c
 800a330:	2000164e 	.word	0x2000164e
 800a334:	20001650 	.word	0x20001650
 800a338:	40005c50 	.word	0x40005c50
 800a33c:	20003002 	.word	0x20003002

0800a340 <SetDeviceAddress>:
{
 800a340:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a342:	4b0c      	ldr	r3, [pc, #48]	; (800a374 <SetDeviceAddress+0x34>)
 800a344:	781d      	ldrb	r5, [r3, #0]
  for (i = 0; i < nEP; i++)
 800a346:	b17d      	cbz	r5, 800a368 <SetDeviceAddress+0x28>
 800a348:	2200      	movs	r2, #0
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a34a:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a34e:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a352:	4909      	ldr	r1, [pc, #36]	; (800a378 <SetDeviceAddress+0x38>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a354:	680b      	ldr	r3, [r1, #0]
 800a356:	ea42 0406 	orr.w	r4, r2, r6
 800a35a:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a35c:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a35e:	4323      	orrs	r3, r4
  for (i = 0; i < nEP; i++)
 800a360:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a362:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a366:	d1f5      	bne.n	800a354 <SetDeviceAddress+0x14>
#endif  /* STM32F10X_CL */  
}
 800a368:	bcf0      	pop	{r4, r5, r6, r7}
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a36a:	4b04      	ldr	r3, [pc, #16]	; (800a37c <SetDeviceAddress+0x3c>)
 800a36c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800a370:	6018      	str	r0, [r3, #0]
}
 800a372:	4770      	bx	lr
 800a374:	2000009c 	.word	0x2000009c
 800a378:	40005c00 	.word	0x40005c00
 800a37c:	40005c4c 	.word	0x40005c4c

0800a380 <NOP_Process>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop

0800a384 <USB_Init>:
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 800a384:	2002      	movs	r0, #2
{
 800a386:	b430      	push	{r4, r5}
  pInformation = &Device_Info;
 800a388:	4a06      	ldr	r2, [pc, #24]	; (800a3a4 <USB_Init+0x20>)
 800a38a:	4d07      	ldr	r5, [pc, #28]	; (800a3a8 <USB_Init+0x24>)
  pProperty = &Device_Property;
 800a38c:	4c07      	ldr	r4, [pc, #28]	; (800a3ac <USB_Init+0x28>)
 800a38e:	4b08      	ldr	r3, [pc, #32]	; (800a3b0 <USB_Init+0x2c>)
  pInformation->ControlState = 2;
 800a390:	7210      	strb	r0, [r2, #8]
  pUser_Standard_Requests = &User_Standard_Requests;
 800a392:	4908      	ldr	r1, [pc, #32]	; (800a3b4 <USB_Init+0x30>)
 800a394:	4808      	ldr	r0, [pc, #32]	; (800a3b8 <USB_Init+0x34>)
  pProperty = &Device_Property;
 800a396:	6023      	str	r3, [r4, #0]
  pInformation = &Device_Info;
 800a398:	602a      	str	r2, [r5, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800a39a:	681b      	ldr	r3, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800a39c:	6008      	str	r0, [r1, #0]
}
 800a39e:	bc30      	pop	{r4, r5}
  pProperty->Init();
 800a3a0:	4718      	bx	r3
 800a3a2:	bf00      	nop
 800a3a4:	20001628 	.word	0x20001628
 800a3a8:	20001648 	.word	0x20001648
 800a3ac:	20001620 	.word	0x20001620
 800a3b0:	2000006c 	.word	0x2000006c
 800a3b4:	20001644 	.word	0x20001644
 800a3b8:	200000c0 	.word	0x200000c0

0800a3bc <CTR_LP>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800a3bc:	2300      	movs	r3, #0
{
 800a3be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c2:	f8df 8174 	ldr.w	r8, [pc, #372]	; 800a538 <CTR_LP+0x17c>
 800a3c6:	b084      	sub	sp, #16
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a3c8:	4d55      	ldr	r5, [pc, #340]	; (800a520 <CTR_LP+0x164>)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a3ca:	4c56      	ldr	r4, [pc, #344]	; (800a524 <CTR_LP+0x168>)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800a3cc:	4e56      	ldr	r6, [pc, #344]	; (800a528 <CTR_LP+0x16c>)
  __IO uint16_t wEPVal = 0;
 800a3ce:	f8ad 300e 	strh.w	r3, [sp, #14]
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a3d2:	682b      	ldr	r3, [r5, #0]
	    SaveRState = _GetENDPOINT(ENDP0);
 800a3d4:	4f55      	ldr	r7, [pc, #340]	; (800a52c <CTR_LP+0x170>)
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	041b      	lsls	r3, r3, #16
	    SaveRState = _GetENDPOINT(ENDP0);
 800a3da:	4955      	ldr	r1, [pc, #340]	; (800a530 <CTR_LP+0x174>)
	    SaveTState = SaveRState & EPTX_STAT;
 800a3dc:	f8df 915c 	ldr.w	r9, [pc, #348]	; 800a53c <CTR_LP+0x180>
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a3e0:	f8a8 2000 	strh.w	r2, [r8]
 800a3e4:	f140 808f 	bpl.w	800a506 <CTR_LP+0x14a>
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a3e8:	f8b8 3000 	ldrh.w	r3, [r8]
 800a3ec:	f003 030f 	and.w	r3, r3, #15
      wEPVal = _GetENDPOINT(EPindex);
 800a3f0:	009a      	lsls	r2, r3, #2
 800a3f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a3f6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a3fa:	7023      	strb	r3, [r4, #0]
    if (EPindex == 0)
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d132      	bne.n	800a466 <CTR_LP+0xaa>
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800a400:	f64b 7abf 	movw	sl, #49087	; 0xbfbf
	    SaveRState = _GetENDPOINT(ENDP0);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	b29b      	uxth	r3, r3
 800a408:	800b      	strh	r3, [r1, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800a40a:	880b      	ldrh	r3, [r1, #0]
 800a40c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a410:	f8a9 3000 	strh.w	r3, [r9]
	    SaveRState &=  EPRX_STAT;	
 800a414:	880b      	ldrh	r3, [r1, #0]
 800a416:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a41a:	800b      	strh	r3, [r1, #0]
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	ea03 030a 	and.w	r3, r3, sl
 800a422:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a426:	f083 0320 	eor.w	r3, r3, #32
 800a42a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a42e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a432:	603b      	str	r3, [r7, #0]
      if ((wIstr & ISTR_DIR) == 0)
 800a434:	f8b8 3000 	ldrh.w	r3, [r8]
 800a438:	06d8      	lsls	r0, r3, #27
 800a43a:	d53a      	bpl.n	800a4b2 <CTR_LP+0xf6>
        wEPVal = _GetENDPOINT(ENDP0);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	b29b      	uxth	r3, r3
 800a440:	f8ad 300e 	strh.w	r3, [sp, #14]
        if ((wEPVal &EP_SETUP) != 0)
 800a444:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a448:	051a      	lsls	r2, r3, #20
 800a44a:	d45f      	bmi.n	800a50c <CTR_LP+0x150>
        else if ((wEPVal & EP_CTR_RX) != 0)
 800a44c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a450:	041b      	lsls	r3, r3, #16
 800a452:	d5be      	bpl.n	800a3d2 <CTR_LP+0x16>
          _ClearEP_CTR_RX(ENDP0);
 800a454:	f640 728f 	movw	r2, #3983	; 0xf8f
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	9101      	str	r1, [sp, #4]
 800a45c:	4013      	ands	r3, r2
 800a45e:	603b      	str	r3, [r7, #0]
          Out0_Process();
 800a460:	f7ff fee6 	bl	800a230 <Out0_Process>
 800a464:	e02d      	b.n	800a4c2 <CTR_LP+0x106>
      wEPVal = _GetENDPOINT(EPindex);
 800a466:	6811      	ldr	r1, [r2, #0]
        (*pEpInt_OUT[EPindex-1])();
 800a468:	4832      	ldr	r0, [pc, #200]	; (800a534 <CTR_LP+0x178>)
      wEPVal = _GetENDPOINT(EPindex);
 800a46a:	b289      	uxth	r1, r1
 800a46c:	f8ad 100e 	strh.w	r1, [sp, #14]
      if ((wEPVal & EP_CTR_RX) != 0)
 800a470:	f8bd 100e 	ldrh.w	r1, [sp, #14]
        (*pEpInt_OUT[EPindex-1])();
 800a474:	3b01      	subs	r3, #1
      if ((wEPVal & EP_CTR_RX) != 0)
 800a476:	0409      	lsls	r1, r1, #16
 800a478:	d507      	bpl.n	800a48a <CTR_LP+0xce>
        _ClearEP_CTR_RX(EPindex);
 800a47a:	f640 778f 	movw	r7, #3983	; 0xf8f
 800a47e:	6811      	ldr	r1, [r2, #0]
        (*pEpInt_OUT[EPindex-1])();
 800a480:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
        _ClearEP_CTR_RX(EPindex);
 800a484:	4039      	ands	r1, r7
 800a486:	6011      	str	r1, [r2, #0]
        (*pEpInt_OUT[EPindex-1])();
 800a488:	4780      	blx	r0
      if ((wEPVal & EP_CTR_TX) != 0)
 800a48a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a48e:	061a      	lsls	r2, r3, #24
 800a490:	d59f      	bpl.n	800a3d2 <CTR_LP+0x16>
        _ClearEP_CTR_TX(EPindex);
 800a492:	f648 700f 	movw	r0, #36623	; 0x8f0f
 800a496:	7822      	ldrb	r2, [r4, #0]
 800a498:	0093      	lsls	r3, r2, #2
 800a49a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a49e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800a4a2:	6819      	ldr	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800a4a4:	3a01      	subs	r2, #1
        _ClearEP_CTR_TX(EPindex);
 800a4a6:	4001      	ands	r1, r0
        (*pEpInt_IN[EPindex-1])();
 800a4a8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
        _ClearEP_CTR_TX(EPindex);
 800a4ac:	6019      	str	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800a4ae:	4790      	blx	r2
 800a4b0:	e78f      	b.n	800a3d2 <CTR_LP+0x16>
        _ClearEP_CTR_TX(ENDP0);
 800a4b2:	f648 720f 	movw	r2, #36623	; 0x8f0f
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	9101      	str	r1, [sp, #4]
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	603b      	str	r3, [r7, #0]
        In0_Process();
 800a4be:	f7ff fe51 	bl	800a164 <In0_Process>
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800a4c2:	9901      	ldr	r1, [sp, #4]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	880a      	ldrh	r2, [r1, #0]
 800a4c8:	ea03 0a0a 	and.w	sl, r3, sl
 800a4cc:	880b      	ldrh	r3, [r1, #0]
 800a4ce:	04d6      	lsls	r6, r2, #19
 800a4d0:	bf48      	it	mi
 800a4d2:	f48a 5a80 	eormi.w	sl, sl, #4096	; 0x1000
 800a4d6:	049d      	lsls	r5, r3, #18
 800a4d8:	f8b9 3000 	ldrh.w	r3, [r9]
 800a4dc:	bf48      	it	mi
 800a4de:	f48a 5a00 	eormi.w	sl, sl, #8192	; 0x2000
 800a4e2:	06dc      	lsls	r4, r3, #27
 800a4e4:	f8b9 3000 	ldrh.w	r3, [r9]
 800a4e8:	bf48      	it	mi
 800a4ea:	f08a 0a10 	eormi.w	sl, sl, #16
 800a4ee:	0698      	lsls	r0, r3, #26
 800a4f0:	bf48      	it	mi
 800a4f2:	f08a 0a20 	eormi.w	sl, sl, #32
 800a4f6:	f44a 4a00 	orr.w	sl, sl, #32768	; 0x8000
 800a4fa:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800a4fe:	4a0b      	ldr	r2, [pc, #44]	; (800a52c <CTR_LP+0x170>)
 800a500:	fa1f f38a 	uxth.w	r3, sl
 800a504:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800a506:	b004      	add	sp, #16
 800a508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800a50c:	f640 728f 	movw	r2, #3983	; 0xf8f
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	9101      	str	r1, [sp, #4]
 800a514:	4013      	ands	r3, r2
 800a516:	603b      	str	r3, [r7, #0]
          Setup0_Process();
 800a518:	f7ff fc30 	bl	8009d7c <Setup0_Process>
 800a51c:	e7d1      	b.n	800a4c2 <CTR_LP+0x106>
 800a51e:	bf00      	nop
 800a520:	40005c44 	.word	0x40005c44
 800a524:	20001624 	.word	0x20001624
 800a528:	20000024 	.word	0x20000024
 800a52c:	40005c00 	.word	0x40005c00
 800a530:	2000164e 	.word	0x2000164e
 800a534:	20000040 	.word	0x20000040
 800a538:	20001694 	.word	0x20001694
 800a53c:	20001650 	.word	0x20001650

0800a540 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800a540:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a544:	3201      	adds	r2, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800a546:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 800a54a:	1052      	asrs	r2, r2, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800a54c:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 800a550:	d005      	beq.n	800a55e <UserToPMABufferCopy+0x1e>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a552:	f830 3b02 	ldrh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 800a556:	3a01      	subs	r2, #1
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a558:	f821 3b04 	strh.w	r3, [r1], #4
  for (i = n; i != 0; i--)
 800a55c:	d1f9      	bne.n	800a552 <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800a55e:	4770      	bx	lr

0800a560 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a560:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a564:	3201      	adds	r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a566:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 800a56a:	1052      	asrs	r2, r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a56c:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 800a570:	d006      	beq.n	800a580 <PMAToUserBufferCopy+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a572:	680b      	ldr	r3, [r1, #0]
  for (i = n; i != 0; i--)
 800a574:	3a01      	subs	r2, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a576:	f101 0104 	add.w	r1, r1, #4
 800a57a:	f820 3b02 	strh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 800a57e:	d1f8      	bne.n	800a572 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop

0800a584 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 800a584:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800a588:	4a01      	ldr	r2, [pc, #4]	; (800a590 <SetBTABLE+0xc>)
 800a58a:	4003      	ands	r3, r0
 800a58c:	6013      	str	r3, [r2, #0]
}
 800a58e:	4770      	bx	lr
 800a590:	40005c50 	.word	0x40005c50

0800a594 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800a594:	0080      	lsls	r0, r0, #2
 800a596:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a59a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a59e:	6803      	ldr	r3, [r0, #0]
 800a5a0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a5a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5a8:	4319      	orrs	r1, r3
 800a5aa:	b289      	uxth	r1, r1
 800a5ac:	6001      	str	r1, [r0, #0]
}
 800a5ae:	4770      	bx	lr

0800a5b0 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800a5b0:	0080      	lsls	r0, r0, #2
 800a5b2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a5b6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a5ba:	6803      	ldr	r3, [r0, #0]
 800a5bc:	06ca      	lsls	r2, r1, #27
 800a5be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	bf48      	it	mi
 800a5ca:	f083 0310 	eormi.w	r3, r3, #16
 800a5ce:	068a      	lsls	r2, r1, #26
 800a5d0:	bf48      	it	mi
 800a5d2:	f083 0320 	eormi.w	r3, r3, #32
 800a5d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5de:	6003      	str	r3, [r0, #0]
}
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop

0800a5e4 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800a5e4:	0080      	lsls	r0, r0, #2
 800a5e6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a5ea:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a5ee:	6803      	ldr	r3, [r0, #0]
 800a5f0:	04ca      	lsls	r2, r1, #19
 800a5f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	bf48      	it	mi
 800a5fe:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 800a602:	048a      	lsls	r2, r1, #18
 800a604:	bf48      	it	mi
 800a606:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 800a60a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a612:	6003      	str	r3, [r0, #0]
}
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop

0800a618 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800a618:	0080      	lsls	r0, r0, #2
 800a61a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a61e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a622:	6803      	ldr	r3, [r0, #0]
 800a624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800a632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a63a:	6003      	str	r3, [r0, #0]
}
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop

0800a640 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800a640:	0080      	lsls	r0, r0, #2
 800a642:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a646:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a64a:	6803      	ldr	r3, [r0, #0]
 800a64c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a654:	b29b      	uxth	r3, r3
 800a656:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a65a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a65e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a662:	6003      	str	r3, [r0, #0]
}
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop

0800a668 <Clear_Status_Out>:
 800a668:	f640 630f 	movw	r3, #3599	; 0xe0f
 800a66c:	0080      	lsls	r0, r0, #2
 800a66e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a672:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a676:	6802      	ldr	r2, [r0, #0]
 800a678:	4013      	ands	r3, r2
 800a67a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a682:	6003      	str	r3, [r0, #0]
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop

0800a688 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800a688:	0080      	lsls	r0, r0, #2
 800a68a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a68e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a692:	6803      	ldr	r3, [r0, #0]
 800a694:	045b      	lsls	r3, r3, #17
 800a696:	d508      	bpl.n	800a6aa <ClearDTOG_RX+0x22>
 800a698:	f640 720f 	movw	r2, #3855	; 0xf0f
 800a69c:	6803      	ldr	r3, [r0, #0]
 800a69e:	4013      	ands	r3, r2
 800a6a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6a8:	6003      	str	r3, [r0, #0]
}
 800a6aa:	4770      	bx	lr

0800a6ac <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 800a6ac:	0080      	lsls	r0, r0, #2
 800a6ae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a6b2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a6b6:	6803      	ldr	r3, [r0, #0]
 800a6b8:	065b      	lsls	r3, r3, #25
 800a6ba:	d508      	bpl.n	800a6ce <ClearDTOG_TX+0x22>
 800a6bc:	f640 720f 	movw	r2, #3855	; 0xf0f
 800a6c0:	6803      	ldr	r3, [r0, #0]
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a6cc:	6003      	str	r3, [r0, #0]
}
 800a6ce:	4770      	bx	lr

0800a6d0 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800a6d0:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <SetEPTxAddr+0x1c>)
 800a6d2:	0849      	lsrs	r1, r1, #1
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	0049      	lsls	r1, r1, #1
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a6de:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800a6e2:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800a6e6:	0040      	lsls	r0, r0, #1
 800a6e8:	6001      	str	r1, [r0, #0]
}
 800a6ea:	4770      	bx	lr
 800a6ec:	40005c50 	.word	0x40005c50

0800a6f0 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 800a6f0:	4a05      	ldr	r2, [pc, #20]	; (800a708 <SetEPRxAddr+0x18>)
 800a6f2:	4b06      	ldr	r3, [pc, #24]	; (800a70c <SetEPRxAddr+0x1c>)
 800a6f4:	6812      	ldr	r2, [r2, #0]
 800a6f6:	0849      	lsrs	r1, r1, #1
 800a6f8:	b292      	uxth	r2, r2
 800a6fa:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a6fe:	4413      	add	r3, r2
 800a700:	0049      	lsls	r1, r1, #1
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	6019      	str	r1, [r3, #0]
}
 800a706:	4770      	bx	lr
 800a708:	40005c50 	.word	0x40005c50
 800a70c:	20003004 	.word	0x20003004

0800a710 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 800a710:	4b05      	ldr	r3, [pc, #20]	; (800a728 <GetEPTxAddr+0x18>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	b29b      	uxth	r3, r3
 800a716:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a71a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800a71e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800a722:	0040      	lsls	r0, r0, #1
}
 800a724:	8800      	ldrh	r0, [r0, #0]
 800a726:	4770      	bx	lr
 800a728:	40005c50 	.word	0x40005c50

0800a72c <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 800a72c:	4a04      	ldr	r2, [pc, #16]	; (800a740 <GetEPRxAddr+0x14>)
 800a72e:	4b05      	ldr	r3, [pc, #20]	; (800a744 <GetEPRxAddr+0x18>)
 800a730:	6812      	ldr	r2, [r2, #0]
 800a732:	b292      	uxth	r2, r2
 800a734:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a738:	4403      	add	r3, r0
 800a73a:	005b      	lsls	r3, r3, #1
}
 800a73c:	8818      	ldrh	r0, [r3, #0]
 800a73e:	4770      	bx	lr
 800a740:	40005c50 	.word	0x40005c50
 800a744:	20003004 	.word	0x20003004

0800a748 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800a748:	4a04      	ldr	r2, [pc, #16]	; (800a75c <SetEPTxCount+0x14>)
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <SetEPTxCount+0x18>)
 800a74c:	6812      	ldr	r2, [r2, #0]
 800a74e:	b292      	uxth	r2, r2
 800a750:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a754:	4403      	add	r3, r0
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	6019      	str	r1, [r3, #0]
}
 800a75a:	4770      	bx	lr
 800a75c:	40005c50 	.word	0x40005c50
 800a760:	20003002 	.word	0x20003002

0800a764 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800a764:	4a0e      	ldr	r2, [pc, #56]	; (800a7a0 <SetEPRxCount+0x3c>)
 800a766:	4b0f      	ldr	r3, [pc, #60]	; (800a7a4 <SetEPRxCount+0x40>)
 800a768:	6812      	ldr	r2, [r2, #0]
 800a76a:	293e      	cmp	r1, #62	; 0x3e
 800a76c:	b292      	uxth	r2, r2
 800a76e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a772:	4403      	add	r3, r0
 800a774:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a778:	d90a      	bls.n	800a790 <SetEPRxCount+0x2c>
 800a77a:	094a      	lsrs	r2, r1, #5
 800a77c:	06c8      	lsls	r0, r1, #27
 800a77e:	bf04      	itt	eq
 800a780:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800a784:	b292      	uxtheq	r2, r2
 800a786:	0292      	lsls	r2, r2, #10
 800a788:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	4770      	bx	lr
 800a790:	084a      	lsrs	r2, r1, #1
 800a792:	07c9      	lsls	r1, r1, #31
 800a794:	bf48      	it	mi
 800a796:	3201      	addmi	r2, #1
 800a798:	0292      	lsls	r2, r2, #10
 800a79a:	601a      	str	r2, [r3, #0]
}
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	40005c50 	.word	0x40005c50
 800a7a4:	20003006 	.word	0x20003006

0800a7a8 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800a7a8:	4a05      	ldr	r2, [pc, #20]	; (800a7c0 <GetEPRxCount+0x18>)
 800a7aa:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <GetEPRxCount+0x1c>)
 800a7ac:	6812      	ldr	r2, [r2, #0]
 800a7ae:	b292      	uxth	r2, r2
 800a7b0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a7b4:	4403      	add	r3, r0
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	6818      	ldr	r0, [r3, #0]
}
 800a7ba:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a7be:	4770      	bx	lr
 800a7c0:	40005c50 	.word	0x40005c50
 800a7c4:	20003006 	.word	0x20003006

0800a7c8 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800a7c8:	b2c3      	uxtb	r3, r0
 800a7ca:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800a7cc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop

0800a7d4 <USB_SIL_Init>:
{
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800a7d4:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 800a7d6:	f44f 4306 	mov.w	r3, #34304	; 0x8600
{
 800a7da:	b410      	push	{r4}
  wInterrupt_Mask = IMR_MSK;
 800a7dc:	4903      	ldr	r1, [pc, #12]	; (800a7ec <USB_SIL_Init+0x18>)
  _SetISTR(0);
 800a7de:	4c04      	ldr	r4, [pc, #16]	; (800a7f0 <USB_SIL_Init+0x1c>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800a7e0:	4a04      	ldr	r2, [pc, #16]	; (800a7f4 <USB_SIL_Init+0x20>)
  _SetISTR(0);
 800a7e2:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800a7e4:	800b      	strh	r3, [r1, #0]
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
}
 800a7e6:	bc10      	pop	{r4}
  _SetCNTR(wInterrupt_Mask);
 800a7e8:	6013      	str	r3, [r2, #0]
}
 800a7ea:	4770      	bx	lr
 800a7ec:	2000164c 	.word	0x2000164c
 800a7f0:	40005c44 	.word	0x40005c44
 800a7f4:	40005c40 	.word	0x40005c40

0800a7f8 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800a7f8:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800a7fa:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800a7fe:	4628      	mov	r0, r5
{
 800a800:	460e      	mov	r6, r1
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800a802:	f7ff ffd1 	bl	800a7a8 <GetEPRxCount>
 800a806:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800a808:	4628      	mov	r0, r5
 800a80a:	f7ff ff8f 	bl	800a72c <GetEPRxAddr>
 800a80e:	4622      	mov	r2, r4
 800a810:	4601      	mov	r1, r0
 800a812:	4630      	mov	r0, r6
 800a814:	f7ff fea4 	bl	800a560 <PMAToUserBufferCopy>
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
}
 800a818:	4620      	mov	r0, r4
 800a81a:	bd70      	pop	{r4, r5, r6, pc}

0800a81c <Set_USBClock>:

/*******************************************************************************
 * Description    : Configures USB Clock input (48MHz)
 *******************************************************************************/
void Set_USBClock(void)
{
 800a81c:	b508      	push	{r3, lr}
	/* Select USBCLK source */
	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 800a81e:	2000      	movs	r0, #0
 800a820:	f7f6 ffb2 	bl	8001788 <RCC_USBCLKConfig>

	/* Enable the USB clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
}
 800a824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 800a828:	2101      	movs	r1, #1
 800a82a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a82e:	f7f6 bfbd 	b.w	80017ac <RCC_APB1PeriphClockCmd>
 800a832:	bf00      	nop

0800a834 <USB_Interrupts_Config>:

/*******************************************************************************
 * Description    : Configures the USB interrupts
 *******************************************************************************/
void USB_Interrupts_Config(void)
{
 800a834:	b500      	push	{lr}
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800a836:	f44f 60c0 	mov.w	r0, #1536	; 0x600
{
 800a83a:	b083      	sub	sp, #12
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800a83c:	f7f6 fc5e 	bl	80010fc <NVIC_PriorityGroupConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 800a840:	4b04      	ldr	r3, [pc, #16]	; (800a854 <USB_Interrupts_Config+0x20>)
 800a842:	a802      	add	r0, sp, #8
 800a844:	f840 3d04 	str.w	r3, [r0, #-4]!
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800a848:	f7f6 fc62 	bl	8001110 <NVIC_Init>
}
 800a84c:	b003      	add	sp, #12
 800a84e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a852:	bf00      	nop
 800a854:	01000114 	.word	0x01000114

0800a858 <USB_Cable_Config>:
/*******************************************************************************
 * Description    : Software Connection/Disconnection of USB Cable
 *******************************************************************************/
void USB_Cable_Config(FunctionalState NewState)
{
}
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop

0800a85c <Get_SerialNum>:
 *******************************************************************************/
void Get_SerialNum(void)
{
	uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800a85c:	4a43      	ldr	r2, [pc, #268]	; (800a96c <Get_SerialNum+0x110>)
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800a85e:	4944      	ldr	r1, [pc, #272]	; (800a970 <Get_SerialNum+0x114>)
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800a860:	4b44      	ldr	r3, [pc, #272]	; (800a974 <Get_SerialNum+0x118>)
	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800a862:	6812      	ldr	r2, [r2, #0]
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800a864:	6809      	ldr	r1, [r1, #0]
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800a866:	681b      	ldr	r3, [r3, #0]

	Device_Serial0 += Device_Serial2;

	if (Device_Serial0 != 0)
 800a868:	18d2      	adds	r2, r2, r3
 800a86a:	d100      	bne.n	800a86e <Get_SerialNum+0x12>
 800a86c:	4770      	bx	lr
{
 800a86e:	b410      	push	{r4}
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
		}

		value = value << 4;

		pbuf[2 * idx + 1] = 0;
 800a870:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800a872:	0f13      	lsrs	r3, r2, #28
 800a874:	b2d8      	uxtb	r0, r3
 800a876:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a878:	4b3f      	ldr	r3, [pc, #252]	; (800a978 <Get_SerialNum+0x11c>)
 800a87a:	bf94      	ite	ls
 800a87c:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a87e:	3037      	addhi	r0, #55	; 0x37
 800a880:	7098      	strb	r0, [r3, #2]
		if (((value >> 28)) < 0xA)
 800a882:	f3c2 6003 	ubfx	r0, r2, #24, #4
 800a886:	2809      	cmp	r0, #9
		pbuf[2 * idx + 1] = 0;
 800a888:	70dc      	strb	r4, [r3, #3]
 800a88a:	b2c4      	uxtb	r4, r0
			pbuf[2 * idx] = (value >> 28) + '0';
 800a88c:	bf94      	ite	ls
 800a88e:	3430      	addls	r4, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a890:	3437      	addhi	r4, #55	; 0x37
 800a892:	711c      	strb	r4, [r3, #4]
		pbuf[2 * idx + 1] = 0;
 800a894:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800a896:	f3c2 5003 	ubfx	r0, r2, #20, #4
 800a89a:	2809      	cmp	r0, #9
		pbuf[2 * idx + 1] = 0;
 800a89c:	715c      	strb	r4, [r3, #5]
 800a89e:	b2c4      	uxtb	r4, r0
			pbuf[2 * idx] = (value >> 28) + '0';
 800a8a0:	bf94      	ite	ls
 800a8a2:	3430      	addls	r4, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8a4:	3437      	addhi	r4, #55	; 0x37
 800a8a6:	719c      	strb	r4, [r3, #6]
		pbuf[2 * idx + 1] = 0;
 800a8a8:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800a8aa:	f3c2 4003 	ubfx	r0, r2, #16, #4
 800a8ae:	2809      	cmp	r0, #9
		pbuf[2 * idx + 1] = 0;
 800a8b0:	71dc      	strb	r4, [r3, #7]
 800a8b2:	b2c4      	uxtb	r4, r0
			pbuf[2 * idx] = (value >> 28) + '0';
 800a8b4:	bf94      	ite	ls
 800a8b6:	3430      	addls	r4, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8b8:	3437      	addhi	r4, #55	; 0x37
 800a8ba:	721c      	strb	r4, [r3, #8]
		pbuf[2 * idx + 1] = 0;
 800a8bc:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800a8be:	f3c2 3003 	ubfx	r0, r2, #12, #4
 800a8c2:	2809      	cmp	r0, #9
		pbuf[2 * idx + 1] = 0;
 800a8c4:	725c      	strb	r4, [r3, #9]
 800a8c6:	b2c4      	uxtb	r4, r0
			pbuf[2 * idx] = (value >> 28) + '0';
 800a8c8:	bf94      	ite	ls
 800a8ca:	3430      	addls	r4, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8cc:	3437      	addhi	r4, #55	; 0x37
 800a8ce:	729c      	strb	r4, [r3, #10]
		pbuf[2 * idx + 1] = 0;
 800a8d0:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800a8d2:	f3c2 2003 	ubfx	r0, r2, #8, #4
 800a8d6:	2809      	cmp	r0, #9
		pbuf[2 * idx + 1] = 0;
 800a8d8:	72dc      	strb	r4, [r3, #11]
 800a8da:	b2c4      	uxtb	r4, r0
			pbuf[2 * idx] = (value >> 28) + '0';
 800a8dc:	bf94      	ite	ls
 800a8de:	3430      	addls	r4, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8e0:	3437      	addhi	r4, #55	; 0x37
 800a8e2:	731c      	strb	r4, [r3, #12]
		pbuf[2 * idx + 1] = 0;
 800a8e4:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800a8e6:	f3c2 1003 	ubfx	r0, r2, #4, #4
 800a8ea:	2809      	cmp	r0, #9
 800a8ec:	f002 020f 	and.w	r2, r2, #15
		pbuf[2 * idx + 1] = 0;
 800a8f0:	735c      	strb	r4, [r3, #13]
 800a8f2:	b2c4      	uxtb	r4, r0
			pbuf[2 * idx] = (value >> 28) + '0';
 800a8f4:	bf98      	it	ls
 800a8f6:	3430      	addls	r4, #48	; 0x30
 800a8f8:	b2d0      	uxtb	r0, r2
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8fa:	bf88      	it	hi
 800a8fc:	3437      	addhi	r4, #55	; 0x37
		if (((value >> 28)) < 0xA)
 800a8fe:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a900:	bf94      	ite	ls
 800a902:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a904:	3037      	addhi	r0, #55	; 0x37
 800a906:	7418      	strb	r0, [r3, #16]
		pbuf[2 * idx + 1] = 0;
 800a908:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 800a90a:	0f0a      	lsrs	r2, r1, #28
 800a90c:	2a09      	cmp	r2, #9
		pbuf[2 * idx + 1] = 0;
 800a90e:	7458      	strb	r0, [r3, #17]
 800a910:	b2d0      	uxtb	r0, r2
			pbuf[2 * idx] = (value >> 28) + '0';
 800a912:	bf94      	ite	ls
 800a914:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a916:	3037      	addhi	r0, #55	; 0x37
 800a918:	7498      	strb	r0, [r3, #18]
		pbuf[2 * idx + 1] = 0;
 800a91a:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 800a91c:	f3c1 6203 	ubfx	r2, r1, #24, #4
 800a920:	2a09      	cmp	r2, #9
		pbuf[2 * idx + 1] = 0;
 800a922:	74d8      	strb	r0, [r3, #19]
 800a924:	b2d0      	uxtb	r0, r2
			pbuf[2 * idx] = (value >> 28) + '0';
 800a926:	bf94      	ite	ls
 800a928:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a92a:	3037      	addhi	r0, #55	; 0x37
 800a92c:	7518      	strb	r0, [r3, #20]
		pbuf[2 * idx + 1] = 0;
 800a92e:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 800a930:	f3c1 5203 	ubfx	r2, r1, #20, #4
 800a934:	2a09      	cmp	r2, #9
		pbuf[2 * idx + 1] = 0;
 800a936:	7558      	strb	r0, [r3, #21]
 800a938:	b2d0      	uxtb	r0, r2
			pbuf[2 * idx] = (value >> 28) + '0';
 800a93a:	bf94      	ite	ls
 800a93c:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a93e:	3037      	addhi	r0, #55	; 0x37
		if (((value >> 28)) < 0xA)
 800a940:	f3c1 4203 	ubfx	r2, r1, #16, #4
 800a944:	b2d1      	uxtb	r1, r2
 800a946:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a948:	739c      	strb	r4, [r3, #14]
 800a94a:	7598      	strb	r0, [r3, #22]
		pbuf[2 * idx + 1] = 0;
 800a94c:	f04f 0400 	mov.w	r4, #0
 800a950:	f04f 0000 	mov.w	r0, #0
 800a954:	f04f 0200 	mov.w	r2, #0
			pbuf[2 * idx] = (value >> 28) + '0';
 800a958:	bf94      	ite	ls
 800a95a:	3130      	addls	r1, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a95c:	3137      	addhi	r1, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800a95e:	73dc      	strb	r4, [r3, #15]
 800a960:	75d8      	strb	r0, [r3, #23]
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a962:	7619      	strb	r1, [r3, #24]
		pbuf[2 * idx + 1] = 0;
 800a964:	765a      	strb	r2, [r3, #25]
}
 800a966:	bc10      	pop	{r4}
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	1ffff7e8 	.word	0x1ffff7e8
 800a970:	1ffff7ec 	.word	0x1ffff7ec
 800a974:	1ffff7f0 	.word	0x1ffff7f0
 800a978:	20000008 	.word	0x20000008

0800a97c <EP3_OUT_Callback>:
#ifdef USB_CHANGED_DEBUG
volatile uint8_t txUsbLock = 0;
#endif

void EP3_OUT_Callback(void)
{
 800a97c:	b510      	push	{r4, lr}
	uint16_t USB_Rx_Cnt;

	/* Get the received data buffer and update the counter */
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800a97e:	4c07      	ldr	r4, [pc, #28]	; (800a99c <EP3_OUT_Callback+0x20>)
 800a980:	2003      	movs	r0, #3
 800a982:	4621      	mov	r1, r4
 800a984:	f7ff ff38 	bl	800a7f8 <USB_SIL_Read>

	/* USB data will be immediately processed, this allow next USB traffic being
	NAKed till the end of the USART Xfer */

	OnUsbDataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 800a988:	b2c1      	uxtb	r1, r0
 800a98a:	4620      	mov	r0, r4
 800a98c:	f7fc fd34 	bl	80073f8 <OnUsbDataRx>

	/* Enable the receive of data on EP3 */
	SetEPRxValid(ENDP3);
}
 800a990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SetEPRxValid(ENDP3);
 800a994:	2003      	movs	r0, #3
 800a996:	f7ff be53 	b.w	800a640 <SetEPRxValid>
 800a99a:	bf00      	nop
 800a99c:	20001654 	.word	0x20001654

0800a9a0 <EP1_IN_Callback>:

#ifdef USB_CHANGED_DEBUG
void EP1_IN_Callback(void)
{
 800a9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t USB_Tx_length;
	uint8_t head;

	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800a9a2:	4b29      	ldr	r3, [pc, #164]	; (800aa48 <EP1_IN_Callback+0xa8>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9aa:	2b20      	cmp	r3, #32
 800a9ac:	d000      	beq.n	800a9b0 <EP1_IN_Callback+0x10>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
		SetEPTxCount(ENDP1, USB_Tx_length);
		SetEPTxValid(ENDP1);
		}
	}
}
 800a9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	txUsbLock = 0; // this may be removed
 800a9b0:	2200      	movs	r2, #0
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	4b25      	ldr	r3, [pc, #148]	; (800aa4c <EP1_IN_Callback+0xac>)
	if ((head != serial_tx_buffer_tail)) {
 800a9b6:	4d26      	ldr	r5, [pc, #152]	; (800aa50 <EP1_IN_Callback+0xb0>)
	head = serial_tx_buffer_head;
 800a9b8:	4926      	ldr	r1, [pc, #152]	; (800aa54 <EP1_IN_Callback+0xb4>)
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800a9ba:	7018      	strb	r0, [r3, #0]
	txUsbLock = 0; // this may be removed
 800a9bc:	701a      	strb	r2, [r3, #0]
	if ((head != serial_tx_buffer_tail)) {
 800a9be:	782a      	ldrb	r2, [r5, #0]
	head = serial_tx_buffer_head;
 800a9c0:	780b      	ldrb	r3, [r1, #0]
	if ((head != serial_tx_buffer_tail)) {
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d0f3      	beq.n	800a9ae <EP1_IN_Callback+0xe>
		if (head > serial_tx_buffer_tail)
 800a9c6:	782a      	ldrb	r2, [r5, #0]
 800a9c8:	b299      	uxth	r1, r3
 800a9ca:	4293      	cmp	r3, r2
			USB_Tx_length = head - serial_tx_buffer_tail;
 800a9cc:	782b      	ldrb	r3, [r5, #0]
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;
 800a9ce:	bf98      	it	ls
 800a9d0:	3180      	addls	r1, #128	; 0x80
 800a9d2:	1ac9      	subs	r1, r1, r3
 800a9d4:	b289      	uxth	r1, r1
		if (USB_Tx_length != 0) {
 800a9d6:	2900      	cmp	r1, #0
 800a9d8:	d0e9      	beq.n	800a9ae <EP1_IN_Callback+0xe>
 800a9da:	2940      	cmp	r1, #64	; 0x40
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800a9dc:	4c1e      	ldr	r4, [pc, #120]	; (800aa58 <EP1_IN_Callback+0xb8>)
 800a9de:	bf28      	it	cs
 800a9e0:	2140      	movcs	r1, #64	; 0x40
				for (i = 0; i<n; i++) {
 800a9e2:	2000      	movs	r0, #0
						pbUsrBuf = serial_tx_buffer;
 800a9e4:	4627      	mov	r7, r4
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800a9e6:	782b      	ldrb	r3, [r5, #0]
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800a9e8:	f101 0e01 	add.w	lr, r1, #1
				uint16_t *pdwVal= (uint16_t *)(ENDP1_TXADDR * 2 + PMAAddr);
 800a9ec:	4e1b      	ldr	r6, [pc, #108]	; (800aa5c <EP1_IN_Callback+0xbc>)
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800a9ee:	ea4f 0e6e 	mov.w	lr, lr, asr #1
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800a9f2:	4423      	add	r3, r4
					temp1 = (uint16_t) *pbUsrBuf;
 800a9f4:	f813 2b01 	ldrb.w	r2, [r3], #1
				for (i = 0; i<n; i++) {
 800a9f8:	3001      	adds	r0, #1
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800a9fa:	eba3 0c04 	sub.w	ip, r3, r4
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a9fe:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 800aa02:	bf08      	it	eq
 800aa04:	463b      	moveq	r3, r7
 800aa06:	f813 cb01 	ldrb.w	ip, [r3], #1
 800aa0a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800aa0e:	eba3 0c04 	sub.w	ip, r3, r4
						pbUsrBuf = serial_tx_buffer;
 800aa12:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 800aa16:	bf08      	it	eq
 800aa18:	463b      	moveq	r3, r7
				for (i = 0; i<n; i++) {
 800aa1a:	4586      	cmp	lr, r0
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800aa1c:	f826 2b04 	strh.w	r2, [r6], #4
				for (i = 0; i<n; i++) {
 800aa20:	d8e8      	bhi.n	800a9f4 <EP1_IN_Callback+0x54>
		serial_tx_buffer_tail += USB_Tx_length;
 800aa22:	782b      	ldrb	r3, [r5, #0]
 800aa24:	440b      	add	r3, r1
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	702b      	strb	r3, [r5, #0]
		if (serial_tx_buffer_tail >= TX_BUFFER_SIZE)
 800aa2a:	782b      	ldrb	r3, [r5, #0]
 800aa2c:	061b      	lsls	r3, r3, #24
 800aa2e:	d503      	bpl.n	800aa38 <EP1_IN_Callback+0x98>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
 800aa30:	782b      	ldrb	r3, [r5, #0]
 800aa32:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800aa36:	702b      	strb	r3, [r5, #0]
		SetEPTxCount(ENDP1, USB_Tx_length);
 800aa38:	2001      	movs	r0, #1
 800aa3a:	f7ff fe85 	bl	800a748 <SetEPTxCount>
}
 800aa3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SetEPTxValid(ENDP1);
 800aa42:	2001      	movs	r0, #1
 800aa44:	f7ff bde8 	b.w	800a618 <SetEPTxValid>
 800aa48:	40005c04 	.word	0x40005c04
 800aa4c:	20000f4c 	.word	0x20000f4c
 800aa50:	20000d9b 	.word	0x20000d9b
 800aa54:	20000d9a 	.word	0x20000d9a
 800aa58:	2000142c 	.word	0x2000142c
 800aa5c:	40006180 	.word	0x40006180

0800aa60 <SOF_Callback>:


/*	\brief Start Of Frame (SOF) callback
 */
void SOF_Callback(void)
{
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(bDeviceState == CONFIGURED)
 800aa62:	4b2b      	ldr	r3, [pc, #172]	; (800ab10 <SOF_Callback+0xb0>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b05      	cmp	r3, #5
 800aa68:	d000      	beq.n	800aa6c <SOF_Callback+0xc>
	{
		/* Check the data to be sent through IN pipe */
		EP1_IN_Callback();
	}
}
 800aa6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800aa6c:	4b29      	ldr	r3, [pc, #164]	; (800ab14 <SOF_Callback+0xb4>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aa74:	2b20      	cmp	r3, #32
 800aa76:	d1f8      	bne.n	800aa6a <SOF_Callback+0xa>
	txUsbLock = 0; // this may be removed
 800aa78:	2200      	movs	r2, #0
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800aa7a:	2001      	movs	r0, #1
 800aa7c:	4b26      	ldr	r3, [pc, #152]	; (800ab18 <SOF_Callback+0xb8>)
	if ((head != serial_tx_buffer_tail)) {
 800aa7e:	4d27      	ldr	r5, [pc, #156]	; (800ab1c <SOF_Callback+0xbc>)
	head = serial_tx_buffer_head;
 800aa80:	4927      	ldr	r1, [pc, #156]	; (800ab20 <SOF_Callback+0xc0>)
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800aa82:	7018      	strb	r0, [r3, #0]
	txUsbLock = 0; // this may be removed
 800aa84:	701a      	strb	r2, [r3, #0]
	if ((head != serial_tx_buffer_tail)) {
 800aa86:	782a      	ldrb	r2, [r5, #0]
	head = serial_tx_buffer_head;
 800aa88:	780b      	ldrb	r3, [r1, #0]
	if ((head != serial_tx_buffer_tail)) {
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d0ed      	beq.n	800aa6a <SOF_Callback+0xa>
		if (head > serial_tx_buffer_tail)
 800aa8e:	782a      	ldrb	r2, [r5, #0]
 800aa90:	b299      	uxth	r1, r3
 800aa92:	4293      	cmp	r3, r2
			USB_Tx_length = head - serial_tx_buffer_tail;
 800aa94:	782b      	ldrb	r3, [r5, #0]
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;
 800aa96:	bf98      	it	ls
 800aa98:	3180      	addls	r1, #128	; 0x80
 800aa9a:	1ac9      	subs	r1, r1, r3
 800aa9c:	b289      	uxth	r1, r1
		if (USB_Tx_length != 0) {
 800aa9e:	2900      	cmp	r1, #0
 800aaa0:	d0e3      	beq.n	800aa6a <SOF_Callback+0xa>
 800aaa2:	2940      	cmp	r1, #64	; 0x40
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800aaa4:	4c1f      	ldr	r4, [pc, #124]	; (800ab24 <SOF_Callback+0xc4>)
 800aaa6:	bf28      	it	cs
 800aaa8:	2140      	movcs	r1, #64	; 0x40
				for (i = 0; i<n; i++) {
 800aaaa:	2000      	movs	r0, #0
						pbUsrBuf = serial_tx_buffer;
 800aaac:	4627      	mov	r7, r4
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800aaae:	782b      	ldrb	r3, [r5, #0]
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800aab0:	f101 0e01 	add.w	lr, r1, #1
				uint16_t *pdwVal= (uint16_t *)(ENDP1_TXADDR * 2 + PMAAddr);
 800aab4:	4e1c      	ldr	r6, [pc, #112]	; (800ab28 <SOF_Callback+0xc8>)
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800aab6:	ea4f 0e6e 	mov.w	lr, lr, asr #1
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800aaba:	4423      	add	r3, r4
					temp1 = (uint16_t) *pbUsrBuf;
 800aabc:	f813 2b01 	ldrb.w	r2, [r3], #1
				for (i = 0; i<n; i++) {
 800aac0:	3001      	adds	r0, #1
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800aac2:	eba3 0c04 	sub.w	ip, r3, r4
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800aac6:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 800aaca:	bf08      	it	eq
 800aacc:	463b      	moveq	r3, r7
 800aace:	f813 cb01 	ldrb.w	ip, [r3], #1
 800aad2:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800aad6:	eba3 0c04 	sub.w	ip, r3, r4
						pbUsrBuf = serial_tx_buffer;
 800aada:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 800aade:	bf08      	it	eq
 800aae0:	463b      	moveq	r3, r7
				for (i = 0; i<n; i++) {
 800aae2:	4586      	cmp	lr, r0
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800aae4:	f826 2b04 	strh.w	r2, [r6], #4
				for (i = 0; i<n; i++) {
 800aae8:	d8e8      	bhi.n	800aabc <SOF_Callback+0x5c>
		serial_tx_buffer_tail += USB_Tx_length;
 800aaea:	782b      	ldrb	r3, [r5, #0]
 800aaec:	440b      	add	r3, r1
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	702b      	strb	r3, [r5, #0]
		if (serial_tx_buffer_tail >= TX_BUFFER_SIZE)
 800aaf2:	782b      	ldrb	r3, [r5, #0]
 800aaf4:	061b      	lsls	r3, r3, #24
 800aaf6:	d503      	bpl.n	800ab00 <SOF_Callback+0xa0>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
 800aaf8:	782b      	ldrb	r3, [r5, #0]
 800aafa:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800aafe:	702b      	strb	r3, [r5, #0]
		SetEPTxCount(ENDP1, USB_Tx_length);
 800ab00:	2001      	movs	r0, #1
 800ab02:	f7ff fe21 	bl	800a748 <SetEPTxCount>
}
 800ab06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SetEPTxValid(ENDP1);
 800ab0a:	2001      	movs	r0, #1
 800ab0c:	f7ff bd84 	b.w	800a618 <SetEPTxValid>
 800ab10:	20000f50 	.word	0x20000f50
 800ab14:	40005c04 	.word	0x40005c04
 800ab18:	20000f4c 	.word	0x20000f4c
 800ab1c:	20000d9b 	.word	0x20000d9b
 800ab20:	20000d9a 	.word	0x20000d9a
 800ab24:	2000142c 	.word	0x2000142c
 800ab28:	40006180 	.word	0x40006180

0800ab2c <USB_Istr>:
* Return         :
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 800ab2c:	491a      	ldr	r1, [pc, #104]	; (800ab98 <USB_Istr+0x6c>)
{
 800ab2e:	b570      	push	{r4, r5, r6, lr}
  wIstr = _GetISTR();
 800ab30:	680b      	ldr	r3, [r1, #0]
 800ab32:	4c1a      	ldr	r4, [pc, #104]	; (800ab9c <USB_Istr+0x70>)
 800ab34:	b29b      	uxth	r3, r3

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800ab36:	4d1a      	ldr	r5, [pc, #104]	; (800aba0 <USB_Istr+0x74>)
  wIstr = _GetISTR();
 800ab38:	8023      	strh	r3, [r4, #0]
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800ab3a:	8822      	ldrh	r2, [r4, #0]
 800ab3c:	882b      	ldrh	r3, [r5, #0]
 800ab3e:	401a      	ands	r2, r3
 800ab40:	0590      	lsls	r0, r2, #22
 800ab42:	d411      	bmi.n	800ab68 <USB_Istr+0x3c>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800ab44:	8822      	ldrh	r2, [r4, #0]
 800ab46:	401a      	ands	r2, r3
 800ab48:	0412      	lsls	r2, r2, #16
 800ab4a:	d41c      	bmi.n	800ab86 <USB_Istr+0x5a>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800ab4c:	8822      	ldrh	r2, [r4, #0]
 800ab4e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800ab52:	4213      	tst	r3, r2
 800ab54:	d01f      	beq.n	800ab96 <USB_Istr+0x6a>
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800ab56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _SetISTR((uint16_t)CLR_RESET);
 800ab5a:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 800ab5e:	4a0e      	ldr	r2, [pc, #56]	; (800ab98 <USB_Istr+0x6c>)
    Device_Property.Reset();
 800ab60:	4b10      	ldr	r3, [pc, #64]	; (800aba4 <USB_Istr+0x78>)
    _SetISTR((uint16_t)CLR_RESET);
 800ab62:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	4718      	bx	r3
    _SetISTR((uint16_t)CLR_SOF);
 800ab68:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 800ab6c:	4a0e      	ldr	r2, [pc, #56]	; (800aba8 <USB_Istr+0x7c>)
    _SetISTR((uint16_t)CLR_SOF);
 800ab6e:	600b      	str	r3, [r1, #0]
    bIntPackSOF++;
 800ab70:	7813      	ldrb	r3, [r2, #0]
 800ab72:	3301      	adds	r3, #1
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	7013      	strb	r3, [r2, #0]
    SOF_Callback();
 800ab78:	f7ff ff72 	bl	800aa60 <SOF_Callback>
 800ab7c:	882b      	ldrh	r3, [r5, #0]
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800ab7e:	8822      	ldrh	r2, [r4, #0]
 800ab80:	401a      	ands	r2, r3
 800ab82:	0412      	lsls	r2, r2, #16
 800ab84:	d5e2      	bpl.n	800ab4c <USB_Istr+0x20>
    CTR_LP();
 800ab86:	f7ff fc19 	bl	800a3bc <CTR_LP>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800ab8a:	8822      	ldrh	r2, [r4, #0]
 800ab8c:	882b      	ldrh	r3, [r5, #0]
 800ab8e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800ab92:	4213      	tst	r3, r2
 800ab94:	d1df      	bne.n	800ab56 <USB_Istr+0x2a>
} /* USB_Istr */
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	40005c44 	.word	0x40005c44
 800ab9c:	20001694 	.word	0x20001694
 800aba0:	2000164c 	.word	0x2000164c
 800aba4:	2000006c 	.word	0x2000006c
 800aba8:	20000f4d 	.word	0x20000f4d

0800abac <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 800abac:	4b03      	ldr	r3, [pc, #12]	; (800abbc <Virtual_Com_Port_SetConfiguration+0x10>)
 800abae:	7a9b      	ldrb	r3, [r3, #10]
 800abb0:	b113      	cbz	r3, 800abb8 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800abb2:	2205      	movs	r2, #5
 800abb4:	4b02      	ldr	r3, [pc, #8]	; (800abc0 <Virtual_Com_Port_SetConfiguration+0x14>)
 800abb6:	601a      	str	r2, [r3, #0]
  }
}
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	20001628 	.word	0x20001628
 800abc0:	20000f50 	.word	0x20000f50

0800abc4 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 800abc4:	2204      	movs	r2, #4
 800abc6:	4b01      	ldr	r3, [pc, #4]	; (800abcc <Virtual_Com_Port_SetDeviceAddress+0x8>)
 800abc8:	601a      	str	r2, [r3, #0]
}
 800abca:	4770      	bx	lr
 800abcc:	20000f50 	.word	0x20000f50

0800abd0 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 800abd0:	4b03      	ldr	r3, [pc, #12]	; (800abe0 <Virtual_Com_Port_Status_In+0x10>)
 800abd2:	781a      	ldrb	r2, [r3, #0]
 800abd4:	2a20      	cmp	r2, #32
  {
    Request = 0;
 800abd6:	bf04      	itt	eq
 800abd8:	2200      	moveq	r2, #0
 800abda:	701a      	strbeq	r2, [r3, #0]
  }
}
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	20000f4e 	.word	0x20000f4e

0800abe4 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop

0800abe8 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800abe8:	2821      	cmp	r0, #33	; 0x21
 800abea:	d014      	beq.n	800ac16 <Virtual_Com_Port_Data_Setup+0x2e>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800abec:	2820      	cmp	r0, #32
 800abee:	4603      	mov	r3, r0
 800abf0:	d118      	bne.n	800ac24 <Virtual_Com_Port_Data_Setup+0x3c>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800abf2:	4a10      	ldr	r2, [pc, #64]	; (800ac34 <Virtual_Com_Port_Data_Setup+0x4c>)
 800abf4:	6812      	ldr	r2, [r2, #0]
 800abf6:	7811      	ldrb	r1, [r2, #0]
 800abf8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800abfc:	2921      	cmp	r1, #33	; 0x21
 800abfe:	d115      	bne.n	800ac2c <Virtual_Com_Port_Data_Setup+0x44>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800ac00:	480d      	ldr	r0, [pc, #52]	; (800ac38 <Virtual_Com_Port_Data_Setup+0x50>)
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800ac02:	490e      	ldr	r1, [pc, #56]	; (800ac3c <Virtual_Com_Port_Data_Setup+0x54>)
    Request = SET_LINE_CODING;
 800ac04:	7003      	strb	r3, [r0, #0]
{
 800ac06:	b510      	push	{r4, lr}
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800ac08:	2400      	movs	r4, #0
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800ac0a:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800ac0c:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 800ac0e:	4620      	mov	r0, r4
 800ac10:	4788      	blx	r1
  return USB_SUCCESS;
 800ac12:	4620      	mov	r0, r4
}
 800ac14:	bd10      	pop	{r4, pc}
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800ac16:	4b07      	ldr	r3, [pc, #28]	; (800ac34 <Virtual_Com_Port_Data_Setup+0x4c>)
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	7813      	ldrb	r3, [r2, #0]
 800ac1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac20:	2b21      	cmp	r3, #33	; 0x21
 800ac22:	d001      	beq.n	800ac28 <Virtual_Com_Port_Data_Setup+0x40>
    return USB_UNSUPPORT;
 800ac24:	2002      	movs	r0, #2
}
 800ac26:	4770      	bx	lr
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800ac28:	4905      	ldr	r1, [pc, #20]	; (800ac40 <Virtual_Com_Port_Data_Setup+0x58>)
 800ac2a:	e7ec      	b.n	800ac06 <Virtual_Com_Port_Data_Setup+0x1e>
    Request = SET_LINE_CODING;
 800ac2c:	4a02      	ldr	r2, [pc, #8]	; (800ac38 <Virtual_Com_Port_Data_Setup+0x50>)
    return USB_UNSUPPORT;
 800ac2e:	2002      	movs	r0, #2
    Request = SET_LINE_CODING;
 800ac30:	7013      	strb	r3, [r2, #0]
 800ac32:	4770      	bx	lr
 800ac34:	20001648 	.word	0x20001648
 800ac38:	20000f4e 	.word	0x20000f4e
 800ac3c:	0800adcd 	.word	0x0800adcd
 800ac40:	0800ac79 	.word	0x0800ac79

0800ac44 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800ac44:	4b07      	ldr	r3, [pc, #28]	; (800ac64 <Virtual_Com_Port_NoData_Setup+0x20>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac4e:	2b21      	cmp	r3, #33	; 0x21
 800ac50:	d106      	bne.n	800ac60 <Virtual_Com_Port_NoData_Setup+0x1c>
  {
    if (RequestNo == SET_COMM_FEATURE)
 800ac52:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ac56:	2802      	cmp	r0, #2
    {
      return USB_SUCCESS;
 800ac58:	bf14      	ite	ne
 800ac5a:	2002      	movne	r0, #2
 800ac5c:	2000      	moveq	r0, #0
 800ac5e:	4770      	bx	lr
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 800ac60:	2002      	movs	r0, #2
}
 800ac62:	4770      	bx	lr
 800ac64:	20001648 	.word	0x20001648

0800ac68 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 800ac68:	b921      	cbnz	r1, 800ac74 <Virtual_Com_Port_Get_Interface_Setting+0xc>
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 1)
 800ac6a:	2801      	cmp	r0, #1
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 800ac6c:	bf8c      	ite	hi
 800ac6e:	2002      	movhi	r0, #2
 800ac70:	2000      	movls	r0, #0
 800ac72:	4770      	bx	lr
    return USB_UNSUPPORT;
 800ac74:	2002      	movs	r0, #2
}
 800ac76:	4770      	bx	lr

0800ac78 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800ac78:	b108      	cbz	r0, 800ac7e <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800ac7a:	4803      	ldr	r0, [pc, #12]	; (800ac88 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 800ac7c:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800ac7e:	2208      	movs	r2, #8
 800ac80:	4b02      	ldr	r3, [pc, #8]	; (800ac8c <Virtual_Com_Port_GetLineCoding+0x14>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	821a      	strh	r2, [r3, #16]
    return NULL;
 800ac86:	4770      	bx	lr
 800ac88:	200000e4 	.word	0x200000e4
 800ac8c:	20001648 	.word	0x20001648

0800ac90 <Virtual_Com_Port_init>:
{
 800ac90:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800ac92:	2400      	movs	r4, #0
  Get_SerialNum();
 800ac94:	f7ff fde2 	bl	800a85c <Get_SerialNum>
  pInformation->Current_Configuration = 0;
 800ac98:	4b04      	ldr	r3, [pc, #16]	; (800acac <Virtual_Com_Port_init+0x1c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	729c      	strb	r4, [r3, #10]
  PowerOn();
 800ac9e:	f000 f8a1 	bl	800ade4 <PowerOn>
  USB_SIL_Init();
 800aca2:	f7ff fd97 	bl	800a7d4 <USB_SIL_Init>
  bDeviceState = UNCONNECTED;
 800aca6:	4b02      	ldr	r3, [pc, #8]	; (800acb0 <Virtual_Com_Port_init+0x20>)
 800aca8:	601c      	str	r4, [r3, #0]
}
 800acaa:	bd10      	pop	{r4, pc}
 800acac:	20001648 	.word	0x20001648
 800acb0:	20000f50 	.word	0x20000f50

0800acb4 <Virtual_Com_Port_Reset>:
{
 800acb4:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800acb6:	2400      	movs	r4, #0
 800acb8:	4b32      	ldr	r3, [pc, #200]	; (800ad84 <Virtual_Com_Port_Reset+0xd0>)
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800acba:	4a33      	ldr	r2, [pc, #204]	; (800ad88 <Virtual_Com_Port_Reset+0xd4>)
  pInformation->Current_Configuration = 0;
 800acbc:	681b      	ldr	r3, [r3, #0]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800acbe:	79d2      	ldrb	r2, [r2, #7]
  pInformation->Current_Configuration = 0;
 800acc0:	815c      	strh	r4, [r3, #10]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800acc2:	725a      	strb	r2, [r3, #9]
  SetBTABLE(BTABLE_ADDRESS);
 800acc4:	4620      	mov	r0, r4
 800acc6:	f7ff fc5d 	bl	800a584 <SetBTABLE>
  SetEPType(ENDP0, EP_CONTROL);
 800acca:	4620      	mov	r0, r4
 800accc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800acd0:	f7ff fc60 	bl	800a594 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800acd4:	4620      	mov	r0, r4
 800acd6:	2110      	movs	r1, #16
 800acd8:	f7ff fc6a 	bl	800a5b0 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800acdc:	4620      	mov	r0, r4
 800acde:	2140      	movs	r1, #64	; 0x40
 800ace0:	f7ff fd06 	bl	800a6f0 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800ace4:	2180      	movs	r1, #128	; 0x80
 800ace6:	4620      	mov	r0, r4
 800ace8:	f7ff fcf2 	bl	800a6d0 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 800acec:	4620      	mov	r0, r4
 800acee:	f7ff fcbb 	bl	800a668 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800acf2:	4b26      	ldr	r3, [pc, #152]	; (800ad8c <Virtual_Com_Port_Reset+0xd8>)
 800acf4:	4620      	mov	r0, r4
 800acf6:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800acfa:	f7ff fd33 	bl	800a764 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 800acfe:	4620      	mov	r0, r4
 800ad00:	f7ff fc9e 	bl	800a640 <SetEPRxValid>
  SetEPType(ENDP1, EP_BULK);
 800ad04:	4621      	mov	r1, r4
 800ad06:	2001      	movs	r0, #1
 800ad08:	f7ff fc44 	bl	800a594 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800ad0c:	21c0      	movs	r1, #192	; 0xc0
 800ad0e:	2001      	movs	r0, #1
 800ad10:	f7ff fcde 	bl	800a6d0 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800ad14:	2120      	movs	r1, #32
 800ad16:	2001      	movs	r0, #1
 800ad18:	f7ff fc4a 	bl	800a5b0 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	2001      	movs	r0, #1
 800ad20:	f7ff fc60 	bl	800a5e4 <SetEPRxStatus>
  SetEPType(ENDP2, EP_INTERRUPT);
 800ad24:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ad28:	2002      	movs	r0, #2
 800ad2a:	f7ff fc33 	bl	800a594 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800ad2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad32:	2002      	movs	r0, #2
 800ad34:	f7ff fccc 	bl	800a6d0 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800ad38:	4621      	mov	r1, r4
 800ad3a:	2002      	movs	r0, #2
 800ad3c:	f7ff fc52 	bl	800a5e4 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800ad40:	2120      	movs	r1, #32
 800ad42:	2002      	movs	r0, #2
 800ad44:	f7ff fc34 	bl	800a5b0 <SetEPTxStatus>
  SetEPType(ENDP3, EP_BULK);
 800ad48:	4621      	mov	r1, r4
 800ad4a:	2003      	movs	r0, #3
 800ad4c:	f7ff fc22 	bl	800a594 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800ad50:	f44f 7188 	mov.w	r1, #272	; 0x110
 800ad54:	2003      	movs	r0, #3
 800ad56:	f7ff fccb 	bl	800a6f0 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800ad5a:	2140      	movs	r1, #64	; 0x40
 800ad5c:	2003      	movs	r0, #3
 800ad5e:	f7ff fd01 	bl	800a764 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 800ad62:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800ad66:	2003      	movs	r0, #3
 800ad68:	f7ff fc3c 	bl	800a5e4 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800ad6c:	4621      	mov	r1, r4
 800ad6e:	2003      	movs	r0, #3
 800ad70:	f7ff fc1e 	bl	800a5b0 <SetEPTxStatus>
  SetDeviceAddress(0);
 800ad74:	4620      	mov	r0, r4
 800ad76:	f7ff fae3 	bl	800a340 <SetDeviceAddress>
  bDeviceState = ATTACHED;
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	4b04      	ldr	r3, [pc, #16]	; (800ad90 <Virtual_Com_Port_Reset+0xdc>)
 800ad7e:	601a      	str	r2, [r3, #0]
}
 800ad80:	bd10      	pop	{r4, pc}
 800ad82:	bf00      	nop
 800ad84:	20001648 	.word	0x20001648
 800ad88:	0800c328 	.word	0x0800c328
 800ad8c:	2000006c 	.word	0x2000006c
 800ad90:	20000f50 	.word	0x20000f50

0800ad94 <Virtual_Com_Port_GetDeviceDescriptor>:
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800ad94:	4901      	ldr	r1, [pc, #4]	; (800ad9c <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 800ad96:	f7fe bfe3 	b.w	8009d60 <Standard_GetDescriptorData>
 800ad9a:	bf00      	nop
 800ad9c:	20000064 	.word	0x20000064

0800ada0 <Virtual_Com_Port_GetConfigDescriptor>:
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800ada0:	4901      	ldr	r1, [pc, #4]	; (800ada8 <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 800ada2:	f7fe bfdd 	b.w	8009d60 <Standard_GetDescriptorData>
 800ada6:	bf00      	nop
 800ada8:	2000005c 	.word	0x2000005c

0800adac <Virtual_Com_Port_GetStringDescriptor>:
  uint8_t wValue0 = pInformation->USBwValue0;
 800adac:	4b05      	ldr	r3, [pc, #20]	; (800adc4 <Virtual_Com_Port_GetStringDescriptor+0x18>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 800adb2:	2b04      	cmp	r3, #4
 800adb4:	d804      	bhi.n	800adc0 <Virtual_Com_Port_GetStringDescriptor+0x14>
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800adb6:	4904      	ldr	r1, [pc, #16]	; (800adc8 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800adb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adbc:	f7fe bfd0 	b.w	8009d60 <Standard_GetDescriptorData>
}
 800adc0:	2000      	movs	r0, #0
 800adc2:	4770      	bx	lr
 800adc4:	20001648 	.word	0x20001648
 800adc8:	200000a0 	.word	0x200000a0

0800adcc <Virtual_Com_Port_SetLineCoding>:
 800adcc:	b108      	cbz	r0, 800add2 <Virtual_Com_Port_SetLineCoding+0x6>
 800adce:	4803      	ldr	r0, [pc, #12]	; (800addc <Virtual_Com_Port_SetLineCoding+0x10>)
 800add0:	4770      	bx	lr
 800add2:	2208      	movs	r2, #8
 800add4:	4b02      	ldr	r3, [pc, #8]	; (800ade0 <Virtual_Com_Port_SetLineCoding+0x14>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	821a      	strh	r2, [r3, #16]
 800adda:	4770      	bx	lr
 800addc:	200000e4 	.word	0x200000e4
 800ade0:	20001648 	.word	0x20001648

0800ade4 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800ade4:	b538      	push	{r3, r4, r5, lr}
#ifndef STM32F10X_CL
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800ade6:	2001      	movs	r0, #1
 800ade8:	f7ff fd36 	bl	800a858 <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800adec:	2501      	movs	r5, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800adee:	2000      	movs	r0, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800adf0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  _SetCNTR(wRegVal);
 800adf4:	4b04      	ldr	r3, [pc, #16]	; (800ae08 <PowerOn+0x24>)
  _SetISTR(0);
 800adf6:	4c05      	ldr	r4, [pc, #20]	; (800ae0c <PowerOn+0x28>)
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800adf8:	4905      	ldr	r1, [pc, #20]	; (800ae10 <PowerOn+0x2c>)
  _SetCNTR(wRegVal);
 800adfa:	601d      	str	r5, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 800adfc:	6018      	str	r0, [r3, #0]
  _SetISTR(0);
 800adfe:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800ae00:	800a      	strh	r2, [r1, #0]
  _SetCNTR(wInterrupt_Mask);
 800ae02:	601a      	str	r2, [r3, #0]
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
}
 800ae04:	bd38      	pop	{r3, r4, r5, pc}
 800ae06:	bf00      	nop
 800ae08:	40005c40 	.word	0x40005c40
 800ae0c:	40005c44 	.word	0x40005c44
 800ae10:	2000164c 	.word	0x2000164c

0800ae14 <NMI_Handler>:
* Output         : None
* Return         : None
*******************************************************************************/
void NMI_Handler(void)
{
}
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop

0800ae18 <HardFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
 800ae18:	e7fe      	b.n	800ae18 <HardFault_Handler>
 800ae1a:	bf00      	nop

0800ae1c <MemManage_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
 800ae1c:	e7fe      	b.n	800ae1c <MemManage_Handler>
 800ae1e:	bf00      	nop

0800ae20 <BusFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
 800ae20:	e7fe      	b.n	800ae20 <BusFault_Handler>
 800ae22:	bf00      	nop

0800ae24 <UsageFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
 800ae24:	e7fe      	b.n	800ae24 <UsageFault_Handler>
 800ae26:	bf00      	nop

0800ae28 <SVC_Handler>:
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop

0800ae2c <DebugMon_Handler>:
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop

0800ae30 <PendSV_Handler>:
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop

0800ae34 <USB_LP_CAN1_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  USB_Istr();
 800ae34:	f7ff be7a 	b.w	800ab2c <USB_Istr>

0800ae38 <__libc_init_array>:
 800ae38:	b570      	push	{r4, r5, r6, lr}
 800ae3a:	2500      	movs	r5, #0
 800ae3c:	4e0c      	ldr	r6, [pc, #48]	; (800ae70 <__libc_init_array+0x38>)
 800ae3e:	4c0d      	ldr	r4, [pc, #52]	; (800ae74 <__libc_init_array+0x3c>)
 800ae40:	1ba4      	subs	r4, r4, r6
 800ae42:	10a4      	asrs	r4, r4, #2
 800ae44:	42a5      	cmp	r5, r4
 800ae46:	d109      	bne.n	800ae5c <__libc_init_array+0x24>
 800ae48:	f001 f94a 	bl	800c0e0 <_init>
 800ae4c:	2500      	movs	r5, #0
 800ae4e:	4e0a      	ldr	r6, [pc, #40]	; (800ae78 <__libc_init_array+0x40>)
 800ae50:	4c0a      	ldr	r4, [pc, #40]	; (800ae7c <__libc_init_array+0x44>)
 800ae52:	1ba4      	subs	r4, r4, r6
 800ae54:	10a4      	asrs	r4, r4, #2
 800ae56:	42a5      	cmp	r5, r4
 800ae58:	d105      	bne.n	800ae66 <__libc_init_array+0x2e>
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}
 800ae5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae60:	4798      	blx	r3
 800ae62:	3501      	adds	r5, #1
 800ae64:	e7ee      	b.n	800ae44 <__libc_init_array+0xc>
 800ae66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae6a:	4798      	blx	r3
 800ae6c:	3501      	adds	r5, #1
 800ae6e:	e7f2      	b.n	800ae56 <__libc_init_array+0x1e>
 800ae70:	0800c7b4 	.word	0x0800c7b4
 800ae74:	0800c7b4 	.word	0x0800c7b4
 800ae78:	0800c7b4 	.word	0x0800c7b4
 800ae7c:	0800c7bc 	.word	0x0800c7bc

0800ae80 <memcmp>:
 800ae80:	b530      	push	{r4, r5, lr}
 800ae82:	2400      	movs	r4, #0
 800ae84:	42a2      	cmp	r2, r4
 800ae86:	d101      	bne.n	800ae8c <memcmp+0xc>
 800ae88:	2000      	movs	r0, #0
 800ae8a:	e007      	b.n	800ae9c <memcmp+0x1c>
 800ae8c:	5d03      	ldrb	r3, [r0, r4]
 800ae8e:	3401      	adds	r4, #1
 800ae90:	190d      	adds	r5, r1, r4
 800ae92:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800ae96:	42ab      	cmp	r3, r5
 800ae98:	d0f4      	beq.n	800ae84 <memcmp+0x4>
 800ae9a:	1b58      	subs	r0, r3, r5
 800ae9c:	bd30      	pop	{r4, r5, pc}

0800ae9e <memset>:
 800ae9e:	4603      	mov	r3, r0
 800aea0:	4402      	add	r2, r0
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d100      	bne.n	800aea8 <memset+0xa>
 800aea6:	4770      	bx	lr
 800aea8:	f803 1b01 	strb.w	r1, [r3], #1
 800aeac:	e7f9      	b.n	800aea2 <memset+0x4>
	...

0800aeb0 <register_fini>:
 800aeb0:	4b02      	ldr	r3, [pc, #8]	; (800aebc <register_fini+0xc>)
 800aeb2:	b113      	cbz	r3, 800aeba <register_fini+0xa>
 800aeb4:	4802      	ldr	r0, [pc, #8]	; (800aec0 <register_fini+0x10>)
 800aeb6:	f000 b805 	b.w	800aec4 <atexit>
 800aeba:	4770      	bx	lr
 800aebc:	00000000 	.word	0x00000000
 800aec0:	0800aed1 	.word	0x0800aed1

0800aec4 <atexit>:
 800aec4:	2300      	movs	r3, #0
 800aec6:	4601      	mov	r1, r0
 800aec8:	461a      	mov	r2, r3
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 b816 	b.w	800aefc <__register_exitproc>

0800aed0 <__libc_fini_array>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	4d07      	ldr	r5, [pc, #28]	; (800aef0 <__libc_fini_array+0x20>)
 800aed4:	4c07      	ldr	r4, [pc, #28]	; (800aef4 <__libc_fini_array+0x24>)
 800aed6:	1b64      	subs	r4, r4, r5
 800aed8:	10a4      	asrs	r4, r4, #2
 800aeda:	b91c      	cbnz	r4, 800aee4 <__libc_fini_array+0x14>
 800aedc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aee0:	f001 b904 	b.w	800c0ec <_fini>
 800aee4:	3c01      	subs	r4, #1
 800aee6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800aeea:	4798      	blx	r3
 800aeec:	e7f5      	b.n	800aeda <__libc_fini_array+0xa>
 800aeee:	bf00      	nop
 800aef0:	0800c7bc 	.word	0x0800c7bc
 800aef4:	0800c7c0 	.word	0x0800c7c0

0800aef8 <__retarget_lock_acquire_recursive>:
 800aef8:	4770      	bx	lr

0800aefa <__retarget_lock_release_recursive>:
 800aefa:	4770      	bx	lr

0800aefc <__register_exitproc>:
 800aefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af00:	4c26      	ldr	r4, [pc, #152]	; (800af9c <__register_exitproc+0xa0>)
 800af02:	4606      	mov	r6, r0
 800af04:	6820      	ldr	r0, [r4, #0]
 800af06:	4698      	mov	r8, r3
 800af08:	460f      	mov	r7, r1
 800af0a:	4691      	mov	r9, r2
 800af0c:	f7ff fff4 	bl	800aef8 <__retarget_lock_acquire_recursive>
 800af10:	4b23      	ldr	r3, [pc, #140]	; (800afa0 <__register_exitproc+0xa4>)
 800af12:	681d      	ldr	r5, [r3, #0]
 800af14:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800af18:	b918      	cbnz	r0, 800af22 <__register_exitproc+0x26>
 800af1a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800af1e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800af22:	6843      	ldr	r3, [r0, #4]
 800af24:	2b1f      	cmp	r3, #31
 800af26:	dd19      	ble.n	800af5c <__register_exitproc+0x60>
 800af28:	4b1e      	ldr	r3, [pc, #120]	; (800afa4 <__register_exitproc+0xa8>)
 800af2a:	b933      	cbnz	r3, 800af3a <__register_exitproc+0x3e>
 800af2c:	6820      	ldr	r0, [r4, #0]
 800af2e:	f7ff ffe4 	bl	800aefa <__retarget_lock_release_recursive>
 800af32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af3a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800af3e:	f3af 8000 	nop.w
 800af42:	2800      	cmp	r0, #0
 800af44:	d0f2      	beq.n	800af2c <__register_exitproc+0x30>
 800af46:	2200      	movs	r2, #0
 800af48:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800af4c:	6042      	str	r2, [r0, #4]
 800af4e:	6003      	str	r3, [r0, #0]
 800af50:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800af54:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800af58:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800af5c:	6843      	ldr	r3, [r0, #4]
 800af5e:	b19e      	cbz	r6, 800af88 <__register_exitproc+0x8c>
 800af60:	2201      	movs	r2, #1
 800af62:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800af66:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800af6a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800af6e:	409a      	lsls	r2, r3
 800af70:	4311      	orrs	r1, r2
 800af72:	2e02      	cmp	r6, #2
 800af74:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800af78:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800af7c:	bf02      	ittt	eq
 800af7e:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800af82:	430a      	orreq	r2, r1
 800af84:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	3302      	adds	r3, #2
 800af8c:	6042      	str	r2, [r0, #4]
 800af8e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800af92:	6820      	ldr	r0, [r4, #0]
 800af94:	f7ff ffb1 	bl	800aefa <__retarget_lock_release_recursive>
 800af98:	2000      	movs	r0, #0
 800af9a:	e7cc      	b.n	800af36 <__register_exitproc+0x3a>
 800af9c:	20000518 	.word	0x20000518
 800afa0:	0800c3b8 	.word	0x0800c3b8
 800afa4:	00000000 	.word	0x00000000

0800afa8 <ceilf>:
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800afae:	0df5      	lsrs	r5, r6, #23
 800afb0:	3d7f      	subs	r5, #127	; 0x7f
 800afb2:	2d16      	cmp	r5, #22
 800afb4:	4601      	mov	r1, r0
 800afb6:	4604      	mov	r4, r0
 800afb8:	dc26      	bgt.n	800b008 <ceilf+0x60>
 800afba:	2d00      	cmp	r5, #0
 800afbc:	da0e      	bge.n	800afdc <ceilf+0x34>
 800afbe:	4918      	ldr	r1, [pc, #96]	; (800b020 <ceilf+0x78>)
 800afc0:	f7f5 fd72 	bl	8000aa8 <__addsf3>
 800afc4:	2100      	movs	r1, #0
 800afc6:	f7f6 f833 	bl	8001030 <__aeabi_fcmpgt>
 800afca:	b128      	cbz	r0, 800afd8 <ceilf+0x30>
 800afcc:	2c00      	cmp	r4, #0
 800afce:	db23      	blt.n	800b018 <ceilf+0x70>
 800afd0:	2e00      	cmp	r6, #0
 800afd2:	bf18      	it	ne
 800afd4:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 800afd8:	4621      	mov	r1, r4
 800afda:	e01b      	b.n	800b014 <ceilf+0x6c>
 800afdc:	4e11      	ldr	r6, [pc, #68]	; (800b024 <ceilf+0x7c>)
 800afde:	412e      	asrs	r6, r5
 800afe0:	4230      	tst	r0, r6
 800afe2:	d017      	beq.n	800b014 <ceilf+0x6c>
 800afe4:	490e      	ldr	r1, [pc, #56]	; (800b020 <ceilf+0x78>)
 800afe6:	f7f5 fd5f 	bl	8000aa8 <__addsf3>
 800afea:	2100      	movs	r1, #0
 800afec:	f7f6 f820 	bl	8001030 <__aeabi_fcmpgt>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d0f1      	beq.n	800afd8 <ceilf+0x30>
 800aff4:	2c00      	cmp	r4, #0
 800aff6:	bfc2      	ittt	gt
 800aff8:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 800affc:	fa43 f505 	asrgt.w	r5, r3, r5
 800b000:	1964      	addgt	r4, r4, r5
 800b002:	ea24 0406 	bic.w	r4, r4, r6
 800b006:	e7e7      	b.n	800afd8 <ceilf+0x30>
 800b008:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b00c:	d302      	bcc.n	800b014 <ceilf+0x6c>
 800b00e:	f7f5 fd4b 	bl	8000aa8 <__addsf3>
 800b012:	4601      	mov	r1, r0
 800b014:	4608      	mov	r0, r1
 800b016:	bd70      	pop	{r4, r5, r6, pc}
 800b018:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b01c:	e7dc      	b.n	800afd8 <ceilf+0x30>
 800b01e:	bf00      	nop
 800b020:	7149f2ca 	.word	0x7149f2ca
 800b024:	007fffff 	.word	0x007fffff

0800b028 <cosf>:
 800b028:	b507      	push	{r0, r1, r2, lr}
 800b02a:	4a18      	ldr	r2, [pc, #96]	; (800b08c <cosf+0x64>)
 800b02c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b030:	4293      	cmp	r3, r2
 800b032:	4601      	mov	r1, r0
 800b034:	dc03      	bgt.n	800b03e <cosf+0x16>
 800b036:	2100      	movs	r1, #0
 800b038:	f000 fb54 	bl	800b6e4 <__kernel_cosf>
 800b03c:	e004      	b.n	800b048 <cosf+0x20>
 800b03e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b042:	db04      	blt.n	800b04e <cosf+0x26>
 800b044:	f7f5 fd2e 	bl	8000aa4 <__aeabi_fsub>
 800b048:	b003      	add	sp, #12
 800b04a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b04e:	4669      	mov	r1, sp
 800b050:	f000 f99c 	bl	800b38c <__ieee754_rem_pio2f>
 800b054:	f000 0203 	and.w	r2, r0, #3
 800b058:	2a01      	cmp	r2, #1
 800b05a:	d005      	beq.n	800b068 <cosf+0x40>
 800b05c:	2a02      	cmp	r2, #2
 800b05e:	d00a      	beq.n	800b076 <cosf+0x4e>
 800b060:	b972      	cbnz	r2, 800b080 <cosf+0x58>
 800b062:	9901      	ldr	r1, [sp, #4]
 800b064:	9800      	ldr	r0, [sp, #0]
 800b066:	e7e7      	b.n	800b038 <cosf+0x10>
 800b068:	9901      	ldr	r1, [sp, #4]
 800b06a:	9800      	ldr	r0, [sp, #0]
 800b06c:	f000 fe58 	bl	800bd20 <__kernel_sinf>
 800b070:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b074:	e7e8      	b.n	800b048 <cosf+0x20>
 800b076:	9901      	ldr	r1, [sp, #4]
 800b078:	9800      	ldr	r0, [sp, #0]
 800b07a:	f000 fb33 	bl	800b6e4 <__kernel_cosf>
 800b07e:	e7f7      	b.n	800b070 <cosf+0x48>
 800b080:	2201      	movs	r2, #1
 800b082:	9901      	ldr	r1, [sp, #4]
 800b084:	9800      	ldr	r0, [sp, #0]
 800b086:	f000 fe4b 	bl	800bd20 <__kernel_sinf>
 800b08a:	e7dd      	b.n	800b048 <cosf+0x20>
 800b08c:	3f490fd8 	.word	0x3f490fd8

0800b090 <floorf>:
 800b090:	b570      	push	{r4, r5, r6, lr}
 800b092:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800b096:	0df5      	lsrs	r5, r6, #23
 800b098:	3d7f      	subs	r5, #127	; 0x7f
 800b09a:	2d16      	cmp	r5, #22
 800b09c:	4601      	mov	r1, r0
 800b09e:	4604      	mov	r4, r0
 800b0a0:	dc26      	bgt.n	800b0f0 <floorf+0x60>
 800b0a2:	2d00      	cmp	r5, #0
 800b0a4:	da0e      	bge.n	800b0c4 <floorf+0x34>
 800b0a6:	4917      	ldr	r1, [pc, #92]	; (800b104 <floorf+0x74>)
 800b0a8:	f7f5 fcfe 	bl	8000aa8 <__addsf3>
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	f7f5 ffbf 	bl	8001030 <__aeabi_fcmpgt>
 800b0b2:	b128      	cbz	r0, 800b0c0 <floorf+0x30>
 800b0b4:	2c00      	cmp	r4, #0
 800b0b6:	da23      	bge.n	800b100 <floorf+0x70>
 800b0b8:	4b13      	ldr	r3, [pc, #76]	; (800b108 <floorf+0x78>)
 800b0ba:	2e00      	cmp	r6, #0
 800b0bc:	bf18      	it	ne
 800b0be:	461c      	movne	r4, r3
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	e01b      	b.n	800b0fc <floorf+0x6c>
 800b0c4:	4e11      	ldr	r6, [pc, #68]	; (800b10c <floorf+0x7c>)
 800b0c6:	412e      	asrs	r6, r5
 800b0c8:	4230      	tst	r0, r6
 800b0ca:	d017      	beq.n	800b0fc <floorf+0x6c>
 800b0cc:	490d      	ldr	r1, [pc, #52]	; (800b104 <floorf+0x74>)
 800b0ce:	f7f5 fceb 	bl	8000aa8 <__addsf3>
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	f7f5 ffac 	bl	8001030 <__aeabi_fcmpgt>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d0f1      	beq.n	800b0c0 <floorf+0x30>
 800b0dc:	2c00      	cmp	r4, #0
 800b0de:	bfbe      	ittt	lt
 800b0e0:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800b0e4:	fa43 f505 	asrlt.w	r5, r3, r5
 800b0e8:	1964      	addlt	r4, r4, r5
 800b0ea:	ea24 0406 	bic.w	r4, r4, r6
 800b0ee:	e7e7      	b.n	800b0c0 <floorf+0x30>
 800b0f0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b0f4:	d302      	bcc.n	800b0fc <floorf+0x6c>
 800b0f6:	f7f5 fcd7 	bl	8000aa8 <__addsf3>
 800b0fa:	4601      	mov	r1, r0
 800b0fc:	4608      	mov	r0, r1
 800b0fe:	bd70      	pop	{r4, r5, r6, pc}
 800b100:	2400      	movs	r4, #0
 800b102:	e7dd      	b.n	800b0c0 <floorf+0x30>
 800b104:	7149f2ca 	.word	0x7149f2ca
 800b108:	bf800000 	.word	0xbf800000
 800b10c:	007fffff 	.word	0x007fffff

0800b110 <lroundf>:
 800b110:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b114:	2800      	cmp	r0, #0
 800b116:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b11a:	b510      	push	{r4, lr}
 800b11c:	bfb4      	ite	lt
 800b11e:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 800b122:	2401      	movge	r4, #1
 800b124:	2a1e      	cmp	r2, #30
 800b126:	dc1b      	bgt.n	800b160 <lroundf+0x50>
 800b128:	2a00      	cmp	r2, #0
 800b12a:	da04      	bge.n	800b136 <lroundf+0x26>
 800b12c:	3201      	adds	r2, #1
 800b12e:	bf18      	it	ne
 800b130:	2400      	movne	r4, #0
 800b132:	4620      	mov	r0, r4
 800b134:	bd10      	pop	{r4, pc}
 800b136:	2a16      	cmp	r2, #22
 800b138:	bfd8      	it	le
 800b13a:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 800b13e:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800b142:	bfd8      	it	le
 800b144:	4113      	asrle	r3, r2
 800b146:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800b14a:	bfcd      	iteet	gt
 800b14c:	3b96      	subgt	r3, #150	; 0x96
 800b14e:	185b      	addle	r3, r3, r1
 800b150:	f1c2 0217 	rsble	r2, r2, #23
 800b154:	fa01 f303 	lslgt.w	r3, r1, r3
 800b158:	bfd8      	it	le
 800b15a:	40d3      	lsrle	r3, r2
 800b15c:	435c      	muls	r4, r3
 800b15e:	e7e8      	b.n	800b132 <lroundf+0x22>
 800b160:	f7f5 ff86 	bl	8001070 <__aeabi_f2iz>
 800b164:	4604      	mov	r4, r0
 800b166:	e7e4      	b.n	800b132 <lroundf+0x22>

0800b168 <sinf>:
 800b168:	b507      	push	{r0, r1, r2, lr}
 800b16a:	4a19      	ldr	r2, [pc, #100]	; (800b1d0 <sinf+0x68>)
 800b16c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b170:	4293      	cmp	r3, r2
 800b172:	4601      	mov	r1, r0
 800b174:	dc04      	bgt.n	800b180 <sinf+0x18>
 800b176:	2200      	movs	r2, #0
 800b178:	2100      	movs	r1, #0
 800b17a:	f000 fdd1 	bl	800bd20 <__kernel_sinf>
 800b17e:	e004      	b.n	800b18a <sinf+0x22>
 800b180:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b184:	db04      	blt.n	800b190 <sinf+0x28>
 800b186:	f7f5 fc8d 	bl	8000aa4 <__aeabi_fsub>
 800b18a:	b003      	add	sp, #12
 800b18c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b190:	4669      	mov	r1, sp
 800b192:	f000 f8fb 	bl	800b38c <__ieee754_rem_pio2f>
 800b196:	f000 0003 	and.w	r0, r0, #3
 800b19a:	2801      	cmp	r0, #1
 800b19c:	d006      	beq.n	800b1ac <sinf+0x44>
 800b19e:	2802      	cmp	r0, #2
 800b1a0:	d009      	beq.n	800b1b6 <sinf+0x4e>
 800b1a2:	b980      	cbnz	r0, 800b1c6 <sinf+0x5e>
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	9901      	ldr	r1, [sp, #4]
 800b1a8:	9800      	ldr	r0, [sp, #0]
 800b1aa:	e7e6      	b.n	800b17a <sinf+0x12>
 800b1ac:	9901      	ldr	r1, [sp, #4]
 800b1ae:	9800      	ldr	r0, [sp, #0]
 800b1b0:	f000 fa98 	bl	800b6e4 <__kernel_cosf>
 800b1b4:	e7e9      	b.n	800b18a <sinf+0x22>
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	9901      	ldr	r1, [sp, #4]
 800b1ba:	9800      	ldr	r0, [sp, #0]
 800b1bc:	f000 fdb0 	bl	800bd20 <__kernel_sinf>
 800b1c0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b1c4:	e7e1      	b.n	800b18a <sinf+0x22>
 800b1c6:	9901      	ldr	r1, [sp, #4]
 800b1c8:	9800      	ldr	r0, [sp, #0]
 800b1ca:	f000 fa8b 	bl	800b6e4 <__kernel_cosf>
 800b1ce:	e7f7      	b.n	800b1c0 <sinf+0x58>
 800b1d0:	3f490fd8 	.word	0x3f490fd8

0800b1d4 <atan2f>:
 800b1d4:	f000 b84a 	b.w	800b26c <__ieee754_atan2f>

0800b1d8 <sqrtf>:
 800b1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1da:	b08b      	sub	sp, #44	; 0x2c
 800b1dc:	4604      	mov	r4, r0
 800b1de:	f000 fa2d 	bl	800b63c <__ieee754_sqrtf>
 800b1e2:	4b20      	ldr	r3, [pc, #128]	; (800b264 <sqrtf+0x8c>)
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	f993 5000 	ldrsb.w	r5, [r3]
 800b1ea:	1c6b      	adds	r3, r5, #1
 800b1ec:	d02a      	beq.n	800b244 <sqrtf+0x6c>
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f7f5 ff27 	bl	8001044 <__aeabi_fcmpun>
 800b1f6:	4607      	mov	r7, r0
 800b1f8:	bb20      	cbnz	r0, 800b244 <sqrtf+0x6c>
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f7f5 fef9 	bl	8000ff4 <__aeabi_fcmplt>
 800b202:	b1f8      	cbz	r0, 800b244 <sqrtf+0x6c>
 800b204:	2301      	movs	r3, #1
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	4b17      	ldr	r3, [pc, #92]	; (800b268 <sqrtf+0x90>)
 800b20a:	4620      	mov	r0, r4
 800b20c:	9301      	str	r3, [sp, #4]
 800b20e:	9708      	str	r7, [sp, #32]
 800b210:	f7f5 f902 	bl	8000418 <__aeabi_f2d>
 800b214:	2200      	movs	r2, #0
 800b216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b21a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b21e:	2300      	movs	r3, #0
 800b220:	b99d      	cbnz	r5, 800b24a <sqrtf+0x72>
 800b222:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b226:	4668      	mov	r0, sp
 800b228:	f000 fdf0 	bl	800be0c <matherr>
 800b22c:	b1a8      	cbz	r0, 800b25a <sqrtf+0x82>
 800b22e:	9b08      	ldr	r3, [sp, #32]
 800b230:	b11b      	cbz	r3, 800b23a <sqrtf+0x62>
 800b232:	f000 ff4f 	bl	800c0d4 <__errno>
 800b236:	9b08      	ldr	r3, [sp, #32]
 800b238:	6003      	str	r3, [r0, #0]
 800b23a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b23e:	f7f5 fbdd 	bl	80009fc <__aeabi_d2f>
 800b242:	4606      	mov	r6, r0
 800b244:	4630      	mov	r0, r6
 800b246:	b00b      	add	sp, #44	; 0x2c
 800b248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b24a:	4610      	mov	r0, r2
 800b24c:	4619      	mov	r1, r3
 800b24e:	f7f5 fa65 	bl	800071c <__aeabi_ddiv>
 800b252:	2d02      	cmp	r5, #2
 800b254:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b258:	d1e5      	bne.n	800b226 <sqrtf+0x4e>
 800b25a:	f000 ff3b 	bl	800c0d4 <__errno>
 800b25e:	2321      	movs	r3, #33	; 0x21
 800b260:	6003      	str	r3, [r0, #0]
 800b262:	e7e4      	b.n	800b22e <sqrtf+0x56>
 800b264:	2000051c 	.word	0x2000051c
 800b268:	0800c3bc 	.word	0x0800c3bc

0800b26c <__ieee754_atan2f>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b272:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b276:	4603      	mov	r3, r0
 800b278:	dc05      	bgt.n	800b286 <__ieee754_atan2f+0x1a>
 800b27a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b27e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b282:	4607      	mov	r7, r0
 800b284:	dd04      	ble.n	800b290 <__ieee754_atan2f+0x24>
 800b286:	4618      	mov	r0, r3
 800b288:	f7f5 fc0e 	bl	8000aa8 <__addsf3>
 800b28c:	4603      	mov	r3, r0
 800b28e:	e024      	b.n	800b2da <__ieee754_atan2f+0x6e>
 800b290:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800b294:	d103      	bne.n	800b29e <__ieee754_atan2f+0x32>
 800b296:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b29a:	f000 bdb9 	b.w	800be10 <atanf>
 800b29e:	178c      	asrs	r4, r1, #30
 800b2a0:	f004 0402 	and.w	r4, r4, #2
 800b2a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b2a8:	b92a      	cbnz	r2, 800b2b6 <__ieee754_atan2f+0x4a>
 800b2aa:	2c02      	cmp	r4, #2
 800b2ac:	d057      	beq.n	800b35e <__ieee754_atan2f+0xf2>
 800b2ae:	2c03      	cmp	r4, #3
 800b2b0:	d113      	bne.n	800b2da <__ieee754_atan2f+0x6e>
 800b2b2:	4b2d      	ldr	r3, [pc, #180]	; (800b368 <__ieee754_atan2f+0xfc>)
 800b2b4:	e011      	b.n	800b2da <__ieee754_atan2f+0x6e>
 800b2b6:	b91e      	cbnz	r6, 800b2c0 <__ieee754_atan2f+0x54>
 800b2b8:	2f00      	cmp	r7, #0
 800b2ba:	da52      	bge.n	800b362 <__ieee754_atan2f+0xf6>
 800b2bc:	4b2b      	ldr	r3, [pc, #172]	; (800b36c <__ieee754_atan2f+0x100>)
 800b2be:	e00c      	b.n	800b2da <__ieee754_atan2f+0x6e>
 800b2c0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b2c4:	d11a      	bne.n	800b2fc <__ieee754_atan2f+0x90>
 800b2c6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b2ca:	d10c      	bne.n	800b2e6 <__ieee754_atan2f+0x7a>
 800b2cc:	2c02      	cmp	r4, #2
 800b2ce:	d006      	beq.n	800b2de <__ieee754_atan2f+0x72>
 800b2d0:	2c03      	cmp	r4, #3
 800b2d2:	d006      	beq.n	800b2e2 <__ieee754_atan2f+0x76>
 800b2d4:	2c01      	cmp	r4, #1
 800b2d6:	d140      	bne.n	800b35a <__ieee754_atan2f+0xee>
 800b2d8:	4b25      	ldr	r3, [pc, #148]	; (800b370 <__ieee754_atan2f+0x104>)
 800b2da:	4618      	mov	r0, r3
 800b2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2de:	4b25      	ldr	r3, [pc, #148]	; (800b374 <__ieee754_atan2f+0x108>)
 800b2e0:	e7fb      	b.n	800b2da <__ieee754_atan2f+0x6e>
 800b2e2:	4b25      	ldr	r3, [pc, #148]	; (800b378 <__ieee754_atan2f+0x10c>)
 800b2e4:	e7f9      	b.n	800b2da <__ieee754_atan2f+0x6e>
 800b2e6:	2c02      	cmp	r4, #2
 800b2e8:	d039      	beq.n	800b35e <__ieee754_atan2f+0xf2>
 800b2ea:	2c03      	cmp	r4, #3
 800b2ec:	d0e1      	beq.n	800b2b2 <__ieee754_atan2f+0x46>
 800b2ee:	2c01      	cmp	r4, #1
 800b2f0:	d102      	bne.n	800b2f8 <__ieee754_atan2f+0x8c>
 800b2f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2f6:	e7f0      	b.n	800b2da <__ieee754_atan2f+0x6e>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	e7ee      	b.n	800b2da <__ieee754_atan2f+0x6e>
 800b2fc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b300:	d0da      	beq.n	800b2b8 <__ieee754_atan2f+0x4c>
 800b302:	1b92      	subs	r2, r2, r6
 800b304:	15d2      	asrs	r2, r2, #23
 800b306:	2a3c      	cmp	r2, #60	; 0x3c
 800b308:	dc17      	bgt.n	800b33a <__ieee754_atan2f+0xce>
 800b30a:	2900      	cmp	r1, #0
 800b30c:	da01      	bge.n	800b312 <__ieee754_atan2f+0xa6>
 800b30e:	323c      	adds	r2, #60	; 0x3c
 800b310:	db15      	blt.n	800b33e <__ieee754_atan2f+0xd2>
 800b312:	4618      	mov	r0, r3
 800b314:	f7f5 fd84 	bl	8000e20 <__aeabi_fdiv>
 800b318:	f000 fe86 	bl	800c028 <fabsf>
 800b31c:	f000 fd78 	bl	800be10 <atanf>
 800b320:	4603      	mov	r3, r0
 800b322:	2c01      	cmp	r4, #1
 800b324:	d00d      	beq.n	800b342 <__ieee754_atan2f+0xd6>
 800b326:	2c02      	cmp	r4, #2
 800b328:	d00e      	beq.n	800b348 <__ieee754_atan2f+0xdc>
 800b32a:	2c00      	cmp	r4, #0
 800b32c:	d0d5      	beq.n	800b2da <__ieee754_atan2f+0x6e>
 800b32e:	4913      	ldr	r1, [pc, #76]	; (800b37c <__ieee754_atan2f+0x110>)
 800b330:	4618      	mov	r0, r3
 800b332:	f7f5 fbb9 	bl	8000aa8 <__addsf3>
 800b336:	4912      	ldr	r1, [pc, #72]	; (800b380 <__ieee754_atan2f+0x114>)
 800b338:	e00c      	b.n	800b354 <__ieee754_atan2f+0xe8>
 800b33a:	4b12      	ldr	r3, [pc, #72]	; (800b384 <__ieee754_atan2f+0x118>)
 800b33c:	e7f1      	b.n	800b322 <__ieee754_atan2f+0xb6>
 800b33e:	2300      	movs	r3, #0
 800b340:	e7ef      	b.n	800b322 <__ieee754_atan2f+0xb6>
 800b342:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b346:	e7c8      	b.n	800b2da <__ieee754_atan2f+0x6e>
 800b348:	490c      	ldr	r1, [pc, #48]	; (800b37c <__ieee754_atan2f+0x110>)
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7f5 fbac 	bl	8000aa8 <__addsf3>
 800b350:	4601      	mov	r1, r0
 800b352:	480b      	ldr	r0, [pc, #44]	; (800b380 <__ieee754_atan2f+0x114>)
 800b354:	f7f5 fba6 	bl	8000aa4 <__aeabi_fsub>
 800b358:	e798      	b.n	800b28c <__ieee754_atan2f+0x20>
 800b35a:	4b0b      	ldr	r3, [pc, #44]	; (800b388 <__ieee754_atan2f+0x11c>)
 800b35c:	e7bd      	b.n	800b2da <__ieee754_atan2f+0x6e>
 800b35e:	4b08      	ldr	r3, [pc, #32]	; (800b380 <__ieee754_atan2f+0x114>)
 800b360:	e7bb      	b.n	800b2da <__ieee754_atan2f+0x6e>
 800b362:	4b08      	ldr	r3, [pc, #32]	; (800b384 <__ieee754_atan2f+0x118>)
 800b364:	e7b9      	b.n	800b2da <__ieee754_atan2f+0x6e>
 800b366:	bf00      	nop
 800b368:	c0490fdb 	.word	0xc0490fdb
 800b36c:	bfc90fdb 	.word	0xbfc90fdb
 800b370:	bf490fdb 	.word	0xbf490fdb
 800b374:	4016cbe4 	.word	0x4016cbe4
 800b378:	c016cbe4 	.word	0xc016cbe4
 800b37c:	33bbbd2e 	.word	0x33bbbd2e
 800b380:	40490fdb 	.word	0x40490fdb
 800b384:	3fc90fdb 	.word	0x3fc90fdb
 800b388:	3f490fdb 	.word	0x3f490fdb

0800b38c <__ieee754_rem_pio2f>:
 800b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b390:	4a9d      	ldr	r2, [pc, #628]	; (800b608 <__ieee754_rem_pio2f+0x27c>)
 800b392:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b396:	4295      	cmp	r5, r2
 800b398:	b087      	sub	sp, #28
 800b39a:	460c      	mov	r4, r1
 800b39c:	4607      	mov	r7, r0
 800b39e:	dc04      	bgt.n	800b3aa <__ieee754_rem_pio2f+0x1e>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	6020      	str	r0, [r4, #0]
 800b3a4:	604b      	str	r3, [r1, #4]
 800b3a6:	2600      	movs	r6, #0
 800b3a8:	e01a      	b.n	800b3e0 <__ieee754_rem_pio2f+0x54>
 800b3aa:	4a98      	ldr	r2, [pc, #608]	; (800b60c <__ieee754_rem_pio2f+0x280>)
 800b3ac:	4295      	cmp	r5, r2
 800b3ae:	dc4b      	bgt.n	800b448 <__ieee754_rem_pio2f+0xbc>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	f025 050f 	bic.w	r5, r5, #15
 800b3b6:	4996      	ldr	r1, [pc, #600]	; (800b610 <__ieee754_rem_pio2f+0x284>)
 800b3b8:	4e96      	ldr	r6, [pc, #600]	; (800b614 <__ieee754_rem_pio2f+0x288>)
 800b3ba:	dd23      	ble.n	800b404 <__ieee754_rem_pio2f+0x78>
 800b3bc:	f7f5 fb72 	bl	8000aa4 <__aeabi_fsub>
 800b3c0:	42b5      	cmp	r5, r6
 800b3c2:	4607      	mov	r7, r0
 800b3c4:	d010      	beq.n	800b3e8 <__ieee754_rem_pio2f+0x5c>
 800b3c6:	4994      	ldr	r1, [pc, #592]	; (800b618 <__ieee754_rem_pio2f+0x28c>)
 800b3c8:	f7f5 fb6c 	bl	8000aa4 <__aeabi_fsub>
 800b3cc:	4601      	mov	r1, r0
 800b3ce:	6020      	str	r0, [r4, #0]
 800b3d0:	4638      	mov	r0, r7
 800b3d2:	f7f5 fb67 	bl	8000aa4 <__aeabi_fsub>
 800b3d6:	4990      	ldr	r1, [pc, #576]	; (800b618 <__ieee754_rem_pio2f+0x28c>)
 800b3d8:	f7f5 fb64 	bl	8000aa4 <__aeabi_fsub>
 800b3dc:	2601      	movs	r6, #1
 800b3de:	6060      	str	r0, [r4, #4]
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	b007      	add	sp, #28
 800b3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e8:	498c      	ldr	r1, [pc, #560]	; (800b61c <__ieee754_rem_pio2f+0x290>)
 800b3ea:	f7f5 fb5b 	bl	8000aa4 <__aeabi_fsub>
 800b3ee:	498c      	ldr	r1, [pc, #560]	; (800b620 <__ieee754_rem_pio2f+0x294>)
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	f7f5 fb57 	bl	8000aa4 <__aeabi_fsub>
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	6020      	str	r0, [r4, #0]
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f7f5 fb52 	bl	8000aa4 <__aeabi_fsub>
 800b400:	4987      	ldr	r1, [pc, #540]	; (800b620 <__ieee754_rem_pio2f+0x294>)
 800b402:	e7e9      	b.n	800b3d8 <__ieee754_rem_pio2f+0x4c>
 800b404:	f7f5 fb50 	bl	8000aa8 <__addsf3>
 800b408:	42b5      	cmp	r5, r6
 800b40a:	4607      	mov	r7, r0
 800b40c:	d00e      	beq.n	800b42c <__ieee754_rem_pio2f+0xa0>
 800b40e:	4982      	ldr	r1, [pc, #520]	; (800b618 <__ieee754_rem_pio2f+0x28c>)
 800b410:	f7f5 fb4a 	bl	8000aa8 <__addsf3>
 800b414:	4601      	mov	r1, r0
 800b416:	6020      	str	r0, [r4, #0]
 800b418:	4638      	mov	r0, r7
 800b41a:	f7f5 fb43 	bl	8000aa4 <__aeabi_fsub>
 800b41e:	497e      	ldr	r1, [pc, #504]	; (800b618 <__ieee754_rem_pio2f+0x28c>)
 800b420:	f7f5 fb42 	bl	8000aa8 <__addsf3>
 800b424:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b428:	6060      	str	r0, [r4, #4]
 800b42a:	e7d9      	b.n	800b3e0 <__ieee754_rem_pio2f+0x54>
 800b42c:	497b      	ldr	r1, [pc, #492]	; (800b61c <__ieee754_rem_pio2f+0x290>)
 800b42e:	f7f5 fb3b 	bl	8000aa8 <__addsf3>
 800b432:	497b      	ldr	r1, [pc, #492]	; (800b620 <__ieee754_rem_pio2f+0x294>)
 800b434:	4605      	mov	r5, r0
 800b436:	f7f5 fb37 	bl	8000aa8 <__addsf3>
 800b43a:	4601      	mov	r1, r0
 800b43c:	6020      	str	r0, [r4, #0]
 800b43e:	4628      	mov	r0, r5
 800b440:	f7f5 fb30 	bl	8000aa4 <__aeabi_fsub>
 800b444:	4976      	ldr	r1, [pc, #472]	; (800b620 <__ieee754_rem_pio2f+0x294>)
 800b446:	e7eb      	b.n	800b420 <__ieee754_rem_pio2f+0x94>
 800b448:	4a76      	ldr	r2, [pc, #472]	; (800b624 <__ieee754_rem_pio2f+0x298>)
 800b44a:	4295      	cmp	r5, r2
 800b44c:	f300 808c 	bgt.w	800b568 <__ieee754_rem_pio2f+0x1dc>
 800b450:	f000 fdea 	bl	800c028 <fabsf>
 800b454:	4974      	ldr	r1, [pc, #464]	; (800b628 <__ieee754_rem_pio2f+0x29c>)
 800b456:	4680      	mov	r8, r0
 800b458:	f7f5 fc2e 	bl	8000cb8 <__aeabi_fmul>
 800b45c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b460:	f7f5 fb22 	bl	8000aa8 <__addsf3>
 800b464:	f7f5 fe04 	bl	8001070 <__aeabi_f2iz>
 800b468:	4606      	mov	r6, r0
 800b46a:	f7f5 fbd1 	bl	8000c10 <__aeabi_i2f>
 800b46e:	4968      	ldr	r1, [pc, #416]	; (800b610 <__ieee754_rem_pio2f+0x284>)
 800b470:	4682      	mov	sl, r0
 800b472:	f7f5 fc21 	bl	8000cb8 <__aeabi_fmul>
 800b476:	4601      	mov	r1, r0
 800b478:	4640      	mov	r0, r8
 800b47a:	f7f5 fb13 	bl	8000aa4 <__aeabi_fsub>
 800b47e:	4966      	ldr	r1, [pc, #408]	; (800b618 <__ieee754_rem_pio2f+0x28c>)
 800b480:	4680      	mov	r8, r0
 800b482:	4650      	mov	r0, sl
 800b484:	f7f5 fc18 	bl	8000cb8 <__aeabi_fmul>
 800b488:	2e1f      	cmp	r6, #31
 800b48a:	4681      	mov	r9, r0
 800b48c:	dc0c      	bgt.n	800b4a8 <__ieee754_rem_pio2f+0x11c>
 800b48e:	4a67      	ldr	r2, [pc, #412]	; (800b62c <__ieee754_rem_pio2f+0x2a0>)
 800b490:	1e71      	subs	r1, r6, #1
 800b492:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b496:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d004      	beq.n	800b4a8 <__ieee754_rem_pio2f+0x11c>
 800b49e:	4649      	mov	r1, r9
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	f7f5 faff 	bl	8000aa4 <__aeabi_fsub>
 800b4a6:	e009      	b.n	800b4bc <__ieee754_rem_pio2f+0x130>
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	f7f5 fafa 	bl	8000aa4 <__aeabi_fsub>
 800b4b0:	15ed      	asrs	r5, r5, #23
 800b4b2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b4b6:	1aeb      	subs	r3, r5, r3
 800b4b8:	2b08      	cmp	r3, #8
 800b4ba:	dc01      	bgt.n	800b4c0 <__ieee754_rem_pio2f+0x134>
 800b4bc:	6020      	str	r0, [r4, #0]
 800b4be:	e024      	b.n	800b50a <__ieee754_rem_pio2f+0x17e>
 800b4c0:	4956      	ldr	r1, [pc, #344]	; (800b61c <__ieee754_rem_pio2f+0x290>)
 800b4c2:	4650      	mov	r0, sl
 800b4c4:	f7f5 fbf8 	bl	8000cb8 <__aeabi_fmul>
 800b4c8:	4681      	mov	r9, r0
 800b4ca:	4601      	mov	r1, r0
 800b4cc:	4640      	mov	r0, r8
 800b4ce:	f7f5 fae9 	bl	8000aa4 <__aeabi_fsub>
 800b4d2:	4601      	mov	r1, r0
 800b4d4:	4683      	mov	fp, r0
 800b4d6:	4640      	mov	r0, r8
 800b4d8:	f7f5 fae4 	bl	8000aa4 <__aeabi_fsub>
 800b4dc:	4649      	mov	r1, r9
 800b4de:	f7f5 fae1 	bl	8000aa4 <__aeabi_fsub>
 800b4e2:	4680      	mov	r8, r0
 800b4e4:	494e      	ldr	r1, [pc, #312]	; (800b620 <__ieee754_rem_pio2f+0x294>)
 800b4e6:	4650      	mov	r0, sl
 800b4e8:	f7f5 fbe6 	bl	8000cb8 <__aeabi_fmul>
 800b4ec:	4641      	mov	r1, r8
 800b4ee:	f7f5 fad9 	bl	8000aa4 <__aeabi_fsub>
 800b4f2:	4601      	mov	r1, r0
 800b4f4:	4681      	mov	r9, r0
 800b4f6:	4658      	mov	r0, fp
 800b4f8:	f7f5 fad4 	bl	8000aa4 <__aeabi_fsub>
 800b4fc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b500:	1aed      	subs	r5, r5, r3
 800b502:	2d19      	cmp	r5, #25
 800b504:	dc15      	bgt.n	800b532 <__ieee754_rem_pio2f+0x1a6>
 800b506:	46d8      	mov	r8, fp
 800b508:	6020      	str	r0, [r4, #0]
 800b50a:	6825      	ldr	r5, [r4, #0]
 800b50c:	4640      	mov	r0, r8
 800b50e:	4629      	mov	r1, r5
 800b510:	f7f5 fac8 	bl	8000aa4 <__aeabi_fsub>
 800b514:	4649      	mov	r1, r9
 800b516:	f7f5 fac5 	bl	8000aa4 <__aeabi_fsub>
 800b51a:	2f00      	cmp	r7, #0
 800b51c:	6060      	str	r0, [r4, #4]
 800b51e:	f6bf af5f 	bge.w	800b3e0 <__ieee754_rem_pio2f+0x54>
 800b522:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b526:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b52a:	6025      	str	r5, [r4, #0]
 800b52c:	6060      	str	r0, [r4, #4]
 800b52e:	4276      	negs	r6, r6
 800b530:	e756      	b.n	800b3e0 <__ieee754_rem_pio2f+0x54>
 800b532:	493f      	ldr	r1, [pc, #252]	; (800b630 <__ieee754_rem_pio2f+0x2a4>)
 800b534:	4650      	mov	r0, sl
 800b536:	f7f5 fbbf 	bl	8000cb8 <__aeabi_fmul>
 800b53a:	4605      	mov	r5, r0
 800b53c:	4601      	mov	r1, r0
 800b53e:	4658      	mov	r0, fp
 800b540:	f7f5 fab0 	bl	8000aa4 <__aeabi_fsub>
 800b544:	4601      	mov	r1, r0
 800b546:	4680      	mov	r8, r0
 800b548:	4658      	mov	r0, fp
 800b54a:	f7f5 faab 	bl	8000aa4 <__aeabi_fsub>
 800b54e:	4629      	mov	r1, r5
 800b550:	f7f5 faa8 	bl	8000aa4 <__aeabi_fsub>
 800b554:	4605      	mov	r5, r0
 800b556:	4937      	ldr	r1, [pc, #220]	; (800b634 <__ieee754_rem_pio2f+0x2a8>)
 800b558:	4650      	mov	r0, sl
 800b55a:	f7f5 fbad 	bl	8000cb8 <__aeabi_fmul>
 800b55e:	4629      	mov	r1, r5
 800b560:	f7f5 faa0 	bl	8000aa4 <__aeabi_fsub>
 800b564:	4681      	mov	r9, r0
 800b566:	e79a      	b.n	800b49e <__ieee754_rem_pio2f+0x112>
 800b568:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b56c:	db05      	blt.n	800b57a <__ieee754_rem_pio2f+0x1ee>
 800b56e:	4601      	mov	r1, r0
 800b570:	f7f5 fa98 	bl	8000aa4 <__aeabi_fsub>
 800b574:	6060      	str	r0, [r4, #4]
 800b576:	6020      	str	r0, [r4, #0]
 800b578:	e715      	b.n	800b3a6 <__ieee754_rem_pio2f+0x1a>
 800b57a:	15ee      	asrs	r6, r5, #23
 800b57c:	3e86      	subs	r6, #134	; 0x86
 800b57e:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800b582:	4628      	mov	r0, r5
 800b584:	f7f5 fd74 	bl	8001070 <__aeabi_f2iz>
 800b588:	f7f5 fb42 	bl	8000c10 <__aeabi_i2f>
 800b58c:	4601      	mov	r1, r0
 800b58e:	9003      	str	r0, [sp, #12]
 800b590:	4628      	mov	r0, r5
 800b592:	f7f5 fa87 	bl	8000aa4 <__aeabi_fsub>
 800b596:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b59a:	f7f5 fb8d 	bl	8000cb8 <__aeabi_fmul>
 800b59e:	4680      	mov	r8, r0
 800b5a0:	f7f5 fd66 	bl	8001070 <__aeabi_f2iz>
 800b5a4:	f7f5 fb34 	bl	8000c10 <__aeabi_i2f>
 800b5a8:	4601      	mov	r1, r0
 800b5aa:	9004      	str	r0, [sp, #16]
 800b5ac:	4605      	mov	r5, r0
 800b5ae:	4640      	mov	r0, r8
 800b5b0:	f7f5 fa78 	bl	8000aa4 <__aeabi_fsub>
 800b5b4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b5b8:	f7f5 fb7e 	bl	8000cb8 <__aeabi_fmul>
 800b5bc:	2100      	movs	r1, #0
 800b5be:	9005      	str	r0, [sp, #20]
 800b5c0:	f7f5 fd0e 	bl	8000fe0 <__aeabi_fcmpeq>
 800b5c4:	b1e8      	cbz	r0, 800b602 <__ieee754_rem_pio2f+0x276>
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	f7f5 fd09 	bl	8000fe0 <__aeabi_fcmpeq>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	bf14      	ite	ne
 800b5d2:	2301      	movne	r3, #1
 800b5d4:	2302      	moveq	r3, #2
 800b5d6:	4a18      	ldr	r2, [pc, #96]	; (800b638 <__ieee754_rem_pio2f+0x2ac>)
 800b5d8:	4621      	mov	r1, r4
 800b5da:	9201      	str	r2, [sp, #4]
 800b5dc:	2202      	movs	r2, #2
 800b5de:	a803      	add	r0, sp, #12
 800b5e0:	9200      	str	r2, [sp, #0]
 800b5e2:	4632      	mov	r2, r6
 800b5e4:	f000 f8fe 	bl	800b7e4 <__kernel_rem_pio2f>
 800b5e8:	2f00      	cmp	r7, #0
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	f6bf aef8 	bge.w	800b3e0 <__ieee754_rem_pio2f+0x54>
 800b5f0:	6823      	ldr	r3, [r4, #0]
 800b5f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b5f6:	6023      	str	r3, [r4, #0]
 800b5f8:	6863      	ldr	r3, [r4, #4]
 800b5fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b5fe:	6063      	str	r3, [r4, #4]
 800b600:	e795      	b.n	800b52e <__ieee754_rem_pio2f+0x1a2>
 800b602:	2303      	movs	r3, #3
 800b604:	e7e7      	b.n	800b5d6 <__ieee754_rem_pio2f+0x24a>
 800b606:	bf00      	nop
 800b608:	3f490fd8 	.word	0x3f490fd8
 800b60c:	4016cbe3 	.word	0x4016cbe3
 800b610:	3fc90f80 	.word	0x3fc90f80
 800b614:	3fc90fd0 	.word	0x3fc90fd0
 800b618:	37354443 	.word	0x37354443
 800b61c:	37354400 	.word	0x37354400
 800b620:	2e85a308 	.word	0x2e85a308
 800b624:	43490f80 	.word	0x43490f80
 800b628:	3f22f984 	.word	0x3f22f984
 800b62c:	0800c3c4 	.word	0x0800c3c4
 800b630:	2e85a300 	.word	0x2e85a300
 800b634:	248d3132 	.word	0x248d3132
 800b638:	0800c444 	.word	0x0800c444

0800b63c <__ieee754_sqrtf>:
 800b63c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b640:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b644:	b570      	push	{r4, r5, r6, lr}
 800b646:	4603      	mov	r3, r0
 800b648:	4604      	mov	r4, r0
 800b64a:	d309      	bcc.n	800b660 <__ieee754_sqrtf+0x24>
 800b64c:	4601      	mov	r1, r0
 800b64e:	f7f5 fb33 	bl	8000cb8 <__aeabi_fmul>
 800b652:	4601      	mov	r1, r0
 800b654:	4620      	mov	r0, r4
 800b656:	f7f5 fa27 	bl	8000aa8 <__addsf3>
 800b65a:	4604      	mov	r4, r0
 800b65c:	4620      	mov	r0, r4
 800b65e:	bd70      	pop	{r4, r5, r6, pc}
 800b660:	2a00      	cmp	r2, #0
 800b662:	d0fb      	beq.n	800b65c <__ieee754_sqrtf+0x20>
 800b664:	2800      	cmp	r0, #0
 800b666:	da06      	bge.n	800b676 <__ieee754_sqrtf+0x3a>
 800b668:	4601      	mov	r1, r0
 800b66a:	f7f5 fa1b 	bl	8000aa4 <__aeabi_fsub>
 800b66e:	4601      	mov	r1, r0
 800b670:	f7f5 fbd6 	bl	8000e20 <__aeabi_fdiv>
 800b674:	e7f1      	b.n	800b65a <__ieee754_sqrtf+0x1e>
 800b676:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b67a:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800b67e:	d32e      	bcc.n	800b6de <__ieee754_sqrtf+0xa2>
 800b680:	3c7f      	subs	r4, #127	; 0x7f
 800b682:	07e2      	lsls	r2, r4, #31
 800b684:	f04f 0200 	mov.w	r2, #0
 800b688:	ea4f 0164 	mov.w	r1, r4, asr #1
 800b68c:	4616      	mov	r6, r2
 800b68e:	f04f 0419 	mov.w	r4, #25
 800b692:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800b696:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b69a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b69e:	bf48      	it	mi
 800b6a0:	005b      	lslmi	r3, r3, #1
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	1835      	adds	r5, r6, r0
 800b6a6:	429d      	cmp	r5, r3
 800b6a8:	bfde      	ittt	le
 800b6aa:	182e      	addle	r6, r5, r0
 800b6ac:	1b5b      	suble	r3, r3, r5
 800b6ae:	1812      	addle	r2, r2, r0
 800b6b0:	3c01      	subs	r4, #1
 800b6b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b6b6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b6ba:	d1f3      	bne.n	800b6a4 <__ieee754_sqrtf+0x68>
 800b6bc:	b113      	cbz	r3, 800b6c4 <__ieee754_sqrtf+0x88>
 800b6be:	3201      	adds	r2, #1
 800b6c0:	f022 0201 	bic.w	r2, r2, #1
 800b6c4:	1054      	asrs	r4, r2, #1
 800b6c6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800b6ca:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800b6ce:	e7c5      	b.n	800b65c <__ieee754_sqrtf+0x20>
 800b6d0:	005b      	lsls	r3, r3, #1
 800b6d2:	3201      	adds	r2, #1
 800b6d4:	0219      	lsls	r1, r3, #8
 800b6d6:	d5fb      	bpl.n	800b6d0 <__ieee754_sqrtf+0x94>
 800b6d8:	3a01      	subs	r2, #1
 800b6da:	1aa4      	subs	r4, r4, r2
 800b6dc:	e7d0      	b.n	800b680 <__ieee754_sqrtf+0x44>
 800b6de:	2200      	movs	r2, #0
 800b6e0:	e7f8      	b.n	800b6d4 <__ieee754_sqrtf+0x98>
	...

0800b6e4 <__kernel_cosf>:
 800b6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e8:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800b6ec:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b6f0:	4606      	mov	r6, r0
 800b6f2:	4688      	mov	r8, r1
 800b6f4:	da03      	bge.n	800b6fe <__kernel_cosf+0x1a>
 800b6f6:	f7f5 fcbb 	bl	8001070 <__aeabi_f2iz>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d05c      	beq.n	800b7b8 <__kernel_cosf+0xd4>
 800b6fe:	4631      	mov	r1, r6
 800b700:	4630      	mov	r0, r6
 800b702:	f7f5 fad9 	bl	8000cb8 <__aeabi_fmul>
 800b706:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b70a:	4605      	mov	r5, r0
 800b70c:	f7f5 fad4 	bl	8000cb8 <__aeabi_fmul>
 800b710:	492b      	ldr	r1, [pc, #172]	; (800b7c0 <__kernel_cosf+0xdc>)
 800b712:	4607      	mov	r7, r0
 800b714:	4628      	mov	r0, r5
 800b716:	f7f5 facf 	bl	8000cb8 <__aeabi_fmul>
 800b71a:	492a      	ldr	r1, [pc, #168]	; (800b7c4 <__kernel_cosf+0xe0>)
 800b71c:	f7f5 f9c4 	bl	8000aa8 <__addsf3>
 800b720:	4629      	mov	r1, r5
 800b722:	f7f5 fac9 	bl	8000cb8 <__aeabi_fmul>
 800b726:	4928      	ldr	r1, [pc, #160]	; (800b7c8 <__kernel_cosf+0xe4>)
 800b728:	f7f5 f9bc 	bl	8000aa4 <__aeabi_fsub>
 800b72c:	4629      	mov	r1, r5
 800b72e:	f7f5 fac3 	bl	8000cb8 <__aeabi_fmul>
 800b732:	4926      	ldr	r1, [pc, #152]	; (800b7cc <__kernel_cosf+0xe8>)
 800b734:	f7f5 f9b8 	bl	8000aa8 <__addsf3>
 800b738:	4629      	mov	r1, r5
 800b73a:	f7f5 fabd 	bl	8000cb8 <__aeabi_fmul>
 800b73e:	4924      	ldr	r1, [pc, #144]	; (800b7d0 <__kernel_cosf+0xec>)
 800b740:	f7f5 f9b0 	bl	8000aa4 <__aeabi_fsub>
 800b744:	4629      	mov	r1, r5
 800b746:	f7f5 fab7 	bl	8000cb8 <__aeabi_fmul>
 800b74a:	4922      	ldr	r1, [pc, #136]	; (800b7d4 <__kernel_cosf+0xf0>)
 800b74c:	f7f5 f9ac 	bl	8000aa8 <__addsf3>
 800b750:	4629      	mov	r1, r5
 800b752:	f7f5 fab1 	bl	8000cb8 <__aeabi_fmul>
 800b756:	4629      	mov	r1, r5
 800b758:	f7f5 faae 	bl	8000cb8 <__aeabi_fmul>
 800b75c:	4641      	mov	r1, r8
 800b75e:	4605      	mov	r5, r0
 800b760:	4630      	mov	r0, r6
 800b762:	f7f5 faa9 	bl	8000cb8 <__aeabi_fmul>
 800b766:	4601      	mov	r1, r0
 800b768:	4628      	mov	r0, r5
 800b76a:	f7f5 f99b 	bl	8000aa4 <__aeabi_fsub>
 800b76e:	4b1a      	ldr	r3, [pc, #104]	; (800b7d8 <__kernel_cosf+0xf4>)
 800b770:	4605      	mov	r5, r0
 800b772:	429c      	cmp	r4, r3
 800b774:	dc0a      	bgt.n	800b78c <__kernel_cosf+0xa8>
 800b776:	4601      	mov	r1, r0
 800b778:	4638      	mov	r0, r7
 800b77a:	f7f5 f993 	bl	8000aa4 <__aeabi_fsub>
 800b77e:	4601      	mov	r1, r0
 800b780:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b784:	f7f5 f98e 	bl	8000aa4 <__aeabi_fsub>
 800b788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b78c:	4b13      	ldr	r3, [pc, #76]	; (800b7dc <__kernel_cosf+0xf8>)
 800b78e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b792:	429c      	cmp	r4, r3
 800b794:	bfcc      	ite	gt
 800b796:	4c12      	ldrgt	r4, [pc, #72]	; (800b7e0 <__kernel_cosf+0xfc>)
 800b798:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800b79c:	4621      	mov	r1, r4
 800b79e:	f7f5 f981 	bl	8000aa4 <__aeabi_fsub>
 800b7a2:	4621      	mov	r1, r4
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	f7f5 f97c 	bl	8000aa4 <__aeabi_fsub>
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	f7f5 f979 	bl	8000aa4 <__aeabi_fsub>
 800b7b2:	4601      	mov	r1, r0
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	e7e5      	b.n	800b784 <__kernel_cosf+0xa0>
 800b7b8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b7bc:	e7e4      	b.n	800b788 <__kernel_cosf+0xa4>
 800b7be:	bf00      	nop
 800b7c0:	ad47d74e 	.word	0xad47d74e
 800b7c4:	310f74f6 	.word	0x310f74f6
 800b7c8:	3493f27c 	.word	0x3493f27c
 800b7cc:	37d00d01 	.word	0x37d00d01
 800b7d0:	3ab60b61 	.word	0x3ab60b61
 800b7d4:	3d2aaaab 	.word	0x3d2aaaab
 800b7d8:	3e999999 	.word	0x3e999999
 800b7dc:	3f480000 	.word	0x3f480000
 800b7e0:	3e900000 	.word	0x3e900000

0800b7e4 <__kernel_rem_pio2f>:
 800b7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e8:	b0d9      	sub	sp, #356	; 0x164
 800b7ea:	9304      	str	r3, [sp, #16]
 800b7ec:	9101      	str	r1, [sp, #4]
 800b7ee:	4bc3      	ldr	r3, [pc, #780]	; (800bafc <__kernel_rem_pio2f+0x318>)
 800b7f0:	9962      	ldr	r1, [sp, #392]	; 0x188
 800b7f2:	1ed4      	subs	r4, r2, #3
 800b7f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7f8:	2500      	movs	r5, #0
 800b7fa:	9302      	str	r3, [sp, #8]
 800b7fc:	9b04      	ldr	r3, [sp, #16]
 800b7fe:	f04f 0a00 	mov.w	sl, #0
 800b802:	3b01      	subs	r3, #1
 800b804:	9303      	str	r3, [sp, #12]
 800b806:	2308      	movs	r3, #8
 800b808:	fb94 f4f3 	sdiv	r4, r4, r3
 800b80c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b810:	1c66      	adds	r6, r4, #1
 800b812:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800b816:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b81a:	eb03 0802 	add.w	r8, r3, r2
 800b81e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800b820:	1aa7      	subs	r7, r4, r2
 800b822:	9005      	str	r0, [sp, #20]
 800b824:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b828:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800b82c:	4545      	cmp	r5, r8
 800b82e:	dd7f      	ble.n	800b930 <__kernel_rem_pio2f+0x14c>
 800b830:	f04f 0800 	mov.w	r8, #0
 800b834:	f04f 0a00 	mov.w	sl, #0
 800b838:	f06f 0b03 	mvn.w	fp, #3
 800b83c:	9b04      	ldr	r3, [sp, #16]
 800b83e:	aa1c      	add	r2, sp, #112	; 0x70
 800b840:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b844:	ab44      	add	r3, sp, #272	; 0x110
 800b846:	9a02      	ldr	r2, [sp, #8]
 800b848:	4590      	cmp	r8, r2
 800b84a:	f340 8097 	ble.w	800b97c <__kernel_rem_pio2f+0x198>
 800b84e:	4613      	mov	r3, r2
 800b850:	aa08      	add	r2, sp, #32
 800b852:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b856:	9307      	str	r3, [sp, #28]
 800b858:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800b85a:	9f02      	ldr	r7, [sp, #8]
 800b85c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b860:	9306      	str	r3, [sp, #24]
 800b862:	46ba      	mov	sl, r7
 800b864:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800b868:	ab58      	add	r3, sp, #352	; 0x160
 800b86a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b86e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800b872:	ad07      	add	r5, sp, #28
 800b874:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b878:	f1ba 0f00 	cmp.w	sl, #0
 800b87c:	f300 8081 	bgt.w	800b982 <__kernel_rem_pio2f+0x19e>
 800b880:	4631      	mov	r1, r6
 800b882:	4620      	mov	r0, r4
 800b884:	f000 fbd4 	bl	800c030 <scalbnf>
 800b888:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800b88c:	4604      	mov	r4, r0
 800b88e:	f7f5 fa13 	bl	8000cb8 <__aeabi_fmul>
 800b892:	f7ff fbfd 	bl	800b090 <floorf>
 800b896:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800b89a:	f7f5 fa0d 	bl	8000cb8 <__aeabi_fmul>
 800b89e:	4601      	mov	r1, r0
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f7f5 f8ff 	bl	8000aa4 <__aeabi_fsub>
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	f7f5 fbe2 	bl	8001070 <__aeabi_f2iz>
 800b8ac:	4681      	mov	r9, r0
 800b8ae:	f7f5 f9af 	bl	8000c10 <__aeabi_i2f>
 800b8b2:	4601      	mov	r1, r0
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f7f5 f8f5 	bl	8000aa4 <__aeabi_fsub>
 800b8ba:	2e00      	cmp	r6, #0
 800b8bc:	4604      	mov	r4, r0
 800b8be:	dd7e      	ble.n	800b9be <__kernel_rem_pio2f+0x1da>
 800b8c0:	1e7b      	subs	r3, r7, #1
 800b8c2:	aa08      	add	r2, sp, #32
 800b8c4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b8c8:	f1c6 0208 	rsb	r2, r6, #8
 800b8cc:	fa45 f002 	asr.w	r0, r5, r2
 800b8d0:	4481      	add	r9, r0
 800b8d2:	4090      	lsls	r0, r2
 800b8d4:	1a2d      	subs	r5, r5, r0
 800b8d6:	aa08      	add	r2, sp, #32
 800b8d8:	f1c6 0007 	rsb	r0, r6, #7
 800b8dc:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800b8e0:	4105      	asrs	r5, r0
 800b8e2:	2d00      	cmp	r5, #0
 800b8e4:	dd79      	ble.n	800b9da <__kernel_rem_pio2f+0x1f6>
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	4690      	mov	r8, r2
 800b8ea:	f109 0901 	add.w	r9, r9, #1
 800b8ee:	4297      	cmp	r7, r2
 800b8f0:	f300 80ae 	bgt.w	800ba50 <__kernel_rem_pio2f+0x26c>
 800b8f4:	2e00      	cmp	r6, #0
 800b8f6:	dd05      	ble.n	800b904 <__kernel_rem_pio2f+0x120>
 800b8f8:	2e01      	cmp	r6, #1
 800b8fa:	f000 80c0 	beq.w	800ba7e <__kernel_rem_pio2f+0x29a>
 800b8fe:	2e02      	cmp	r6, #2
 800b900:	f000 80c7 	beq.w	800ba92 <__kernel_rem_pio2f+0x2ae>
 800b904:	2d02      	cmp	r5, #2
 800b906:	d168      	bne.n	800b9da <__kernel_rem_pio2f+0x1f6>
 800b908:	4621      	mov	r1, r4
 800b90a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b90e:	f7f5 f8c9 	bl	8000aa4 <__aeabi_fsub>
 800b912:	4604      	mov	r4, r0
 800b914:	f1b8 0f00 	cmp.w	r8, #0
 800b918:	d05f      	beq.n	800b9da <__kernel_rem_pio2f+0x1f6>
 800b91a:	4631      	mov	r1, r6
 800b91c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b920:	f000 fb86 	bl	800c030 <scalbnf>
 800b924:	4601      	mov	r1, r0
 800b926:	4620      	mov	r0, r4
 800b928:	f7f5 f8bc 	bl	8000aa4 <__aeabi_fsub>
 800b92c:	4604      	mov	r4, r0
 800b92e:	e054      	b.n	800b9da <__kernel_rem_pio2f+0x1f6>
 800b930:	42ef      	cmn	r7, r5
 800b932:	d407      	bmi.n	800b944 <__kernel_rem_pio2f+0x160>
 800b934:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b938:	f7f5 f96a 	bl	8000c10 <__aeabi_i2f>
 800b93c:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800b940:	3501      	adds	r5, #1
 800b942:	e773      	b.n	800b82c <__kernel_rem_pio2f+0x48>
 800b944:	4650      	mov	r0, sl
 800b946:	e7f9      	b.n	800b93c <__kernel_rem_pio2f+0x158>
 800b948:	fb0b 5207 	mla	r2, fp, r7, r5
 800b94c:	9306      	str	r3, [sp, #24]
 800b94e:	9b05      	ldr	r3, [sp, #20]
 800b950:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b954:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800b958:	f7f5 f9ae 	bl	8000cb8 <__aeabi_fmul>
 800b95c:	4601      	mov	r1, r0
 800b95e:	4648      	mov	r0, r9
 800b960:	f7f5 f8a2 	bl	8000aa8 <__addsf3>
 800b964:	4681      	mov	r9, r0
 800b966:	9b06      	ldr	r3, [sp, #24]
 800b968:	3701      	adds	r7, #1
 800b96a:	9a03      	ldr	r2, [sp, #12]
 800b96c:	4297      	cmp	r7, r2
 800b96e:	ddeb      	ble.n	800b948 <__kernel_rem_pio2f+0x164>
 800b970:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 800b974:	3504      	adds	r5, #4
 800b976:	f108 0801 	add.w	r8, r8, #1
 800b97a:	e764      	b.n	800b846 <__kernel_rem_pio2f+0x62>
 800b97c:	46d1      	mov	r9, sl
 800b97e:	2700      	movs	r7, #0
 800b980:	e7f3      	b.n	800b96a <__kernel_rem_pio2f+0x186>
 800b982:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b986:	4620      	mov	r0, r4
 800b988:	f7f5 f996 	bl	8000cb8 <__aeabi_fmul>
 800b98c:	f7f5 fb70 	bl	8001070 <__aeabi_f2iz>
 800b990:	f7f5 f93e 	bl	8000c10 <__aeabi_i2f>
 800b994:	4641      	mov	r1, r8
 800b996:	4683      	mov	fp, r0
 800b998:	f7f5 f98e 	bl	8000cb8 <__aeabi_fmul>
 800b99c:	4601      	mov	r1, r0
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f7f5 f880 	bl	8000aa4 <__aeabi_fsub>
 800b9a4:	f7f5 fb64 	bl	8001070 <__aeabi_f2iz>
 800b9a8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b9ac:	f845 0f04 	str.w	r0, [r5, #4]!
 800b9b0:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800b9b4:	4658      	mov	r0, fp
 800b9b6:	f7f5 f877 	bl	8000aa8 <__addsf3>
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	e75c      	b.n	800b878 <__kernel_rem_pio2f+0x94>
 800b9be:	d105      	bne.n	800b9cc <__kernel_rem_pio2f+0x1e8>
 800b9c0:	1e7b      	subs	r3, r7, #1
 800b9c2:	aa08      	add	r2, sp, #32
 800b9c4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b9c8:	122d      	asrs	r5, r5, #8
 800b9ca:	e78a      	b.n	800b8e2 <__kernel_rem_pio2f+0xfe>
 800b9cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b9d0:	f7f5 fb24 	bl	800101c <__aeabi_fcmpge>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d139      	bne.n	800ba4c <__kernel_rem_pio2f+0x268>
 800b9d8:	4605      	mov	r5, r0
 800b9da:	2100      	movs	r1, #0
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f7f5 faff 	bl	8000fe0 <__aeabi_fcmpeq>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	f000 80a0 	beq.w	800bb28 <__kernel_rem_pio2f+0x344>
 800b9e8:	1e7c      	subs	r4, r7, #1
 800b9ea:	4623      	mov	r3, r4
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	9902      	ldr	r1, [sp, #8]
 800b9f0:	428b      	cmp	r3, r1
 800b9f2:	da55      	bge.n	800baa0 <__kernel_rem_pio2f+0x2bc>
 800b9f4:	2a00      	cmp	r2, #0
 800b9f6:	d07e      	beq.n	800baf6 <__kernel_rem_pio2f+0x312>
 800b9f8:	ab08      	add	r3, sp, #32
 800b9fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b9fe:	3e08      	subs	r6, #8
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 808f 	beq.w	800bb24 <__kernel_rem_pio2f+0x340>
 800ba06:	4631      	mov	r1, r6
 800ba08:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ba0c:	f000 fb10 	bl	800c030 <scalbnf>
 800ba10:	46a0      	mov	r8, r4
 800ba12:	4682      	mov	sl, r0
 800ba14:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 800ba18:	af44      	add	r7, sp, #272	; 0x110
 800ba1a:	f1b8 0f00 	cmp.w	r8, #0
 800ba1e:	f280 80b5 	bge.w	800bb8c <__kernel_rem_pio2f+0x3a8>
 800ba22:	f04f 0a00 	mov.w	sl, #0
 800ba26:	2300      	movs	r3, #0
 800ba28:	00a6      	lsls	r6, r4, #2
 800ba2a:	4a35      	ldr	r2, [pc, #212]	; (800bb00 <__kernel_rem_pio2f+0x31c>)
 800ba2c:	4437      	add	r7, r6
 800ba2e:	eba4 010a 	sub.w	r1, r4, sl
 800ba32:	2900      	cmp	r1, #0
 800ba34:	f280 80db 	bge.w	800bbee <__kernel_rem_pio2f+0x40a>
 800ba38:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	f200 80ff 	bhi.w	800bc3e <__kernel_rem_pio2f+0x45a>
 800ba40:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ba44:	01200102 	.word	0x01200102
 800ba48:	00d90120 	.word	0x00d90120
 800ba4c:	2502      	movs	r5, #2
 800ba4e:	e74a      	b.n	800b8e6 <__kernel_rem_pio2f+0x102>
 800ba50:	ab08      	add	r3, sp, #32
 800ba52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba56:	f1b8 0f00 	cmp.w	r8, #0
 800ba5a:	d109      	bne.n	800ba70 <__kernel_rem_pio2f+0x28c>
 800ba5c:	b12b      	cbz	r3, 800ba6a <__kernel_rem_pio2f+0x286>
 800ba5e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800ba62:	a908      	add	r1, sp, #32
 800ba64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ba68:	2301      	movs	r3, #1
 800ba6a:	3201      	adds	r2, #1
 800ba6c:	4698      	mov	r8, r3
 800ba6e:	e73e      	b.n	800b8ee <__kernel_rem_pio2f+0x10a>
 800ba70:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800ba74:	a908      	add	r1, sp, #32
 800ba76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ba7a:	4643      	mov	r3, r8
 800ba7c:	e7f5      	b.n	800ba6a <__kernel_rem_pio2f+0x286>
 800ba7e:	1e7a      	subs	r2, r7, #1
 800ba80:	ab08      	add	r3, sp, #32
 800ba82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba8a:	a908      	add	r1, sp, #32
 800ba8c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ba90:	e738      	b.n	800b904 <__kernel_rem_pio2f+0x120>
 800ba92:	1e7a      	subs	r2, r7, #1
 800ba94:	ab08      	add	r3, sp, #32
 800ba96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba9e:	e7f4      	b.n	800ba8a <__kernel_rem_pio2f+0x2a6>
 800baa0:	a908      	add	r1, sp, #32
 800baa2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800baa6:	3b01      	subs	r3, #1
 800baa8:	430a      	orrs	r2, r1
 800baaa:	e7a0      	b.n	800b9ee <__kernel_rem_pio2f+0x20a>
 800baac:	3301      	adds	r3, #1
 800baae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bab2:	2900      	cmp	r1, #0
 800bab4:	d0fa      	beq.n	800baac <__kernel_rem_pio2f+0x2c8>
 800bab6:	f06f 0803 	mvn.w	r8, #3
 800baba:	9a04      	ldr	r2, [sp, #16]
 800babc:	1c7d      	adds	r5, r7, #1
 800babe:	18bc      	adds	r4, r7, r2
 800bac0:	aa1c      	add	r2, sp, #112	; 0x70
 800bac2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800bac6:	441f      	add	r7, r3
 800bac8:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800bacc:	42af      	cmp	r7, r5
 800bace:	f6ff aec8 	blt.w	800b862 <__kernel_rem_pio2f+0x7e>
 800bad2:	9b06      	ldr	r3, [sp, #24]
 800bad4:	f04f 0a00 	mov.w	sl, #0
 800bad8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800badc:	f7f5 f898 	bl	8000c10 <__aeabi_i2f>
 800bae0:	f04f 0b00 	mov.w	fp, #0
 800bae4:	6020      	str	r0, [r4, #0]
 800bae6:	9b03      	ldr	r3, [sp, #12]
 800bae8:	459a      	cmp	sl, r3
 800baea:	dd0b      	ble.n	800bb04 <__kernel_rem_pio2f+0x320>
 800baec:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800baf0:	3404      	adds	r4, #4
 800baf2:	3501      	adds	r5, #1
 800baf4:	e7ea      	b.n	800bacc <__kernel_rem_pio2f+0x2e8>
 800baf6:	9a07      	ldr	r2, [sp, #28]
 800baf8:	2301      	movs	r3, #1
 800bafa:	e7d8      	b.n	800baae <__kernel_rem_pio2f+0x2ca>
 800bafc:	0800c788 	.word	0x0800c788
 800bb00:	0800c75c 	.word	0x0800c75c
 800bb04:	fb08 f30a 	mul.w	r3, r8, sl
 800bb08:	9a05      	ldr	r2, [sp, #20]
 800bb0a:	58e0      	ldr	r0, [r4, r3]
 800bb0c:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800bb10:	f7f5 f8d2 	bl	8000cb8 <__aeabi_fmul>
 800bb14:	4601      	mov	r1, r0
 800bb16:	4658      	mov	r0, fp
 800bb18:	f7f4 ffc6 	bl	8000aa8 <__addsf3>
 800bb1c:	f10a 0a01 	add.w	sl, sl, #1
 800bb20:	4683      	mov	fp, r0
 800bb22:	e7e0      	b.n	800bae6 <__kernel_rem_pio2f+0x302>
 800bb24:	3c01      	subs	r4, #1
 800bb26:	e767      	b.n	800b9f8 <__kernel_rem_pio2f+0x214>
 800bb28:	4271      	negs	r1, r6
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f000 fa80 	bl	800c030 <scalbnf>
 800bb30:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800bb34:	4604      	mov	r4, r0
 800bb36:	f7f5 fa71 	bl	800101c <__aeabi_fcmpge>
 800bb3a:	b1f8      	cbz	r0, 800bb7c <__kernel_rem_pio2f+0x398>
 800bb3c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800bb40:	4620      	mov	r0, r4
 800bb42:	f7f5 f8b9 	bl	8000cb8 <__aeabi_fmul>
 800bb46:	f7f5 fa93 	bl	8001070 <__aeabi_f2iz>
 800bb4a:	f7f5 f861 	bl	8000c10 <__aeabi_i2f>
 800bb4e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800bb52:	4680      	mov	r8, r0
 800bb54:	f7f5 f8b0 	bl	8000cb8 <__aeabi_fmul>
 800bb58:	4601      	mov	r1, r0
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	f7f4 ffa2 	bl	8000aa4 <__aeabi_fsub>
 800bb60:	f7f5 fa86 	bl	8001070 <__aeabi_f2iz>
 800bb64:	ab08      	add	r3, sp, #32
 800bb66:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bb6a:	4640      	mov	r0, r8
 800bb6c:	f7f5 fa80 	bl	8001070 <__aeabi_f2iz>
 800bb70:	1c7c      	adds	r4, r7, #1
 800bb72:	ab08      	add	r3, sp, #32
 800bb74:	3608      	adds	r6, #8
 800bb76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bb7a:	e744      	b.n	800ba06 <__kernel_rem_pio2f+0x222>
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f7f5 fa77 	bl	8001070 <__aeabi_f2iz>
 800bb82:	ab08      	add	r3, sp, #32
 800bb84:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bb88:	463c      	mov	r4, r7
 800bb8a:	e73c      	b.n	800ba06 <__kernel_rem_pio2f+0x222>
 800bb8c:	ab08      	add	r3, sp, #32
 800bb8e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bb92:	f7f5 f83d 	bl	8000c10 <__aeabi_i2f>
 800bb96:	4651      	mov	r1, sl
 800bb98:	f7f5 f88e 	bl	8000cb8 <__aeabi_fmul>
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 800bba2:	4650      	mov	r0, sl
 800bba4:	f7f5 f888 	bl	8000cb8 <__aeabi_fmul>
 800bba8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bbac:	4682      	mov	sl, r0
 800bbae:	e734      	b.n	800ba1a <__kernel_rem_pio2f+0x236>
 800bbb0:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 800bbb4:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800bbb8:	9304      	str	r3, [sp, #16]
 800bbba:	9203      	str	r2, [sp, #12]
 800bbbc:	f7f5 f87c 	bl	8000cb8 <__aeabi_fmul>
 800bbc0:	4601      	mov	r1, r0
 800bbc2:	4658      	mov	r0, fp
 800bbc4:	f7f4 ff70 	bl	8000aa8 <__addsf3>
 800bbc8:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800bbcc:	4683      	mov	fp, r0
 800bbce:	f108 0801 	add.w	r8, r8, #1
 800bbd2:	9902      	ldr	r1, [sp, #8]
 800bbd4:	4588      	cmp	r8, r1
 800bbd6:	dc01      	bgt.n	800bbdc <__kernel_rem_pio2f+0x3f8>
 800bbd8:	45c2      	cmp	sl, r8
 800bbda:	dae9      	bge.n	800bbb0 <__kernel_rem_pio2f+0x3cc>
 800bbdc:	a958      	add	r1, sp, #352	; 0x160
 800bbde:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbe2:	f841 bca0 	str.w	fp, [r1, #-160]
 800bbe6:	f10a 0a01 	add.w	sl, sl, #1
 800bbea:	3f04      	subs	r7, #4
 800bbec:	e71f      	b.n	800ba2e <__kernel_rem_pio2f+0x24a>
 800bbee:	469b      	mov	fp, r3
 800bbf0:	f04f 0800 	mov.w	r8, #0
 800bbf4:	e7ed      	b.n	800bbd2 <__kernel_rem_pio2f+0x3ee>
 800bbf6:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800bbfa:	4456      	add	r6, sl
 800bbfc:	4637      	mov	r7, r6
 800bbfe:	46a0      	mov	r8, r4
 800bc00:	f1b8 0f00 	cmp.w	r8, #0
 800bc04:	dc4a      	bgt.n	800bc9c <__kernel_rem_pio2f+0x4b8>
 800bc06:	4627      	mov	r7, r4
 800bc08:	2f01      	cmp	r7, #1
 800bc0a:	dc60      	bgt.n	800bcce <__kernel_rem_pio2f+0x4ea>
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	2c01      	cmp	r4, #1
 800bc10:	dc74      	bgt.n	800bcfc <__kernel_rem_pio2f+0x518>
 800bc12:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800bc14:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800bc16:	2d00      	cmp	r5, #0
 800bc18:	d176      	bne.n	800bd08 <__kernel_rem_pio2f+0x524>
 800bc1a:	9901      	ldr	r1, [sp, #4]
 800bc1c:	600a      	str	r2, [r1, #0]
 800bc1e:	460a      	mov	r2, r1
 800bc20:	604b      	str	r3, [r1, #4]
 800bc22:	6090      	str	r0, [r2, #8]
 800bc24:	e00b      	b.n	800bc3e <__kernel_rem_pio2f+0x45a>
 800bc26:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800bc2a:	f7f4 ff3d 	bl	8000aa8 <__addsf3>
 800bc2e:	3c01      	subs	r4, #1
 800bc30:	2c00      	cmp	r4, #0
 800bc32:	daf8      	bge.n	800bc26 <__kernel_rem_pio2f+0x442>
 800bc34:	b10d      	cbz	r5, 800bc3a <__kernel_rem_pio2f+0x456>
 800bc36:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bc3a:	9b01      	ldr	r3, [sp, #4]
 800bc3c:	6018      	str	r0, [r3, #0]
 800bc3e:	f009 0007 	and.w	r0, r9, #7
 800bc42:	b059      	add	sp, #356	; 0x164
 800bc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc48:	2000      	movs	r0, #0
 800bc4a:	ae30      	add	r6, sp, #192	; 0xc0
 800bc4c:	e7f0      	b.n	800bc30 <__kernel_rem_pio2f+0x44c>
 800bc4e:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800bc52:	f7f4 ff29 	bl	8000aa8 <__addsf3>
 800bc56:	3e01      	subs	r6, #1
 800bc58:	2e00      	cmp	r6, #0
 800bc5a:	daf8      	bge.n	800bc4e <__kernel_rem_pio2f+0x46a>
 800bc5c:	b1b5      	cbz	r5, 800bc8c <__kernel_rem_pio2f+0x4a8>
 800bc5e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800bc62:	9a01      	ldr	r2, [sp, #4]
 800bc64:	af58      	add	r7, sp, #352	; 0x160
 800bc66:	4601      	mov	r1, r0
 800bc68:	6013      	str	r3, [r2, #0]
 800bc6a:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800bc6e:	f7f4 ff19 	bl	8000aa4 <__aeabi_fsub>
 800bc72:	2601      	movs	r6, #1
 800bc74:	42b4      	cmp	r4, r6
 800bc76:	da0b      	bge.n	800bc90 <__kernel_rem_pio2f+0x4ac>
 800bc78:	b10d      	cbz	r5, 800bc7e <__kernel_rem_pio2f+0x49a>
 800bc7a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	6058      	str	r0, [r3, #4]
 800bc82:	e7dc      	b.n	800bc3e <__kernel_rem_pio2f+0x45a>
 800bc84:	4626      	mov	r6, r4
 800bc86:	2000      	movs	r0, #0
 800bc88:	af30      	add	r7, sp, #192	; 0xc0
 800bc8a:	e7e5      	b.n	800bc58 <__kernel_rem_pio2f+0x474>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	e7e8      	b.n	800bc62 <__kernel_rem_pio2f+0x47e>
 800bc90:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800bc94:	f7f4 ff08 	bl	8000aa8 <__addsf3>
 800bc98:	3601      	adds	r6, #1
 800bc9a:	e7eb      	b.n	800bc74 <__kernel_rem_pio2f+0x490>
 800bc9c:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 800bca0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4610      	mov	r0, r2
 800bca8:	4619      	mov	r1, r3
 800bcaa:	9303      	str	r3, [sp, #12]
 800bcac:	9202      	str	r2, [sp, #8]
 800bcae:	f7f4 fefb 	bl	8000aa8 <__addsf3>
 800bcb2:	9a02      	ldr	r2, [sp, #8]
 800bcb4:	4601      	mov	r1, r0
 800bcb6:	4683      	mov	fp, r0
 800bcb8:	4610      	mov	r0, r2
 800bcba:	f7f4 fef3 	bl	8000aa4 <__aeabi_fsub>
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	f7f4 fef1 	bl	8000aa8 <__addsf3>
 800bcc6:	f8c7 b000 	str.w	fp, [r7]
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	e798      	b.n	800bc00 <__kernel_rem_pio2f+0x41c>
 800bcce:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 800bcd2:	3f01      	subs	r7, #1
 800bcd4:	f8d6 b004 	ldr.w	fp, [r6, #4]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	4659      	mov	r1, fp
 800bcdc:	9302      	str	r3, [sp, #8]
 800bcde:	f7f4 fee3 	bl	8000aa8 <__addsf3>
 800bce2:	9b02      	ldr	r3, [sp, #8]
 800bce4:	4601      	mov	r1, r0
 800bce6:	4680      	mov	r8, r0
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7f4 fedb 	bl	8000aa4 <__aeabi_fsub>
 800bcee:	4659      	mov	r1, fp
 800bcf0:	f7f4 feda 	bl	8000aa8 <__addsf3>
 800bcf4:	f8c6 8000 	str.w	r8, [r6]
 800bcf8:	6070      	str	r0, [r6, #4]
 800bcfa:	e785      	b.n	800bc08 <__kernel_rem_pio2f+0x424>
 800bcfc:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800bd00:	f7f4 fed2 	bl	8000aa8 <__addsf3>
 800bd04:	3c01      	subs	r4, #1
 800bd06:	e782      	b.n	800bc0e <__kernel_rem_pio2f+0x42a>
 800bd08:	9901      	ldr	r1, [sp, #4]
 800bd0a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800bd0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd12:	600a      	str	r2, [r1, #0]
 800bd14:	604b      	str	r3, [r1, #4]
 800bd16:	460a      	mov	r2, r1
 800bd18:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bd1c:	e781      	b.n	800bc22 <__kernel_rem_pio2f+0x43e>
 800bd1e:	bf00      	nop

0800bd20 <__kernel_sinf>:
 800bd20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd24:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800bd28:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	460f      	mov	r7, r1
 800bd30:	4691      	mov	r9, r2
 800bd32:	da03      	bge.n	800bd3c <__kernel_sinf+0x1c>
 800bd34:	f7f5 f99c 	bl	8001070 <__aeabi_f2iz>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d035      	beq.n	800bda8 <__kernel_sinf+0x88>
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f7f4 ffba 	bl	8000cb8 <__aeabi_fmul>
 800bd44:	4605      	mov	r5, r0
 800bd46:	4601      	mov	r1, r0
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f7f4 ffb5 	bl	8000cb8 <__aeabi_fmul>
 800bd4e:	4929      	ldr	r1, [pc, #164]	; (800bdf4 <__kernel_sinf+0xd4>)
 800bd50:	4606      	mov	r6, r0
 800bd52:	4628      	mov	r0, r5
 800bd54:	f7f4 ffb0 	bl	8000cb8 <__aeabi_fmul>
 800bd58:	4927      	ldr	r1, [pc, #156]	; (800bdf8 <__kernel_sinf+0xd8>)
 800bd5a:	f7f4 fea3 	bl	8000aa4 <__aeabi_fsub>
 800bd5e:	4629      	mov	r1, r5
 800bd60:	f7f4 ffaa 	bl	8000cb8 <__aeabi_fmul>
 800bd64:	4925      	ldr	r1, [pc, #148]	; (800bdfc <__kernel_sinf+0xdc>)
 800bd66:	f7f4 fe9f 	bl	8000aa8 <__addsf3>
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	f7f4 ffa4 	bl	8000cb8 <__aeabi_fmul>
 800bd70:	4923      	ldr	r1, [pc, #140]	; (800be00 <__kernel_sinf+0xe0>)
 800bd72:	f7f4 fe97 	bl	8000aa4 <__aeabi_fsub>
 800bd76:	4629      	mov	r1, r5
 800bd78:	f7f4 ff9e 	bl	8000cb8 <__aeabi_fmul>
 800bd7c:	4921      	ldr	r1, [pc, #132]	; (800be04 <__kernel_sinf+0xe4>)
 800bd7e:	f7f4 fe93 	bl	8000aa8 <__addsf3>
 800bd82:	4680      	mov	r8, r0
 800bd84:	f1b9 0f00 	cmp.w	r9, #0
 800bd88:	d111      	bne.n	800bdae <__kernel_sinf+0x8e>
 800bd8a:	4601      	mov	r1, r0
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	f7f4 ff93 	bl	8000cb8 <__aeabi_fmul>
 800bd92:	491d      	ldr	r1, [pc, #116]	; (800be08 <__kernel_sinf+0xe8>)
 800bd94:	f7f4 fe86 	bl	8000aa4 <__aeabi_fsub>
 800bd98:	4631      	mov	r1, r6
 800bd9a:	f7f4 ff8d 	bl	8000cb8 <__aeabi_fmul>
 800bd9e:	4601      	mov	r1, r0
 800bda0:	4620      	mov	r0, r4
 800bda2:	f7f4 fe81 	bl	8000aa8 <__addsf3>
 800bda6:	4604      	mov	r4, r0
 800bda8:	4620      	mov	r0, r4
 800bdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	f7f4 ff80 	bl	8000cb8 <__aeabi_fmul>
 800bdb8:	4641      	mov	r1, r8
 800bdba:	4681      	mov	r9, r0
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	f7f4 ff7b 	bl	8000cb8 <__aeabi_fmul>
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	4648      	mov	r0, r9
 800bdc6:	f7f4 fe6d 	bl	8000aa4 <__aeabi_fsub>
 800bdca:	4629      	mov	r1, r5
 800bdcc:	f7f4 ff74 	bl	8000cb8 <__aeabi_fmul>
 800bdd0:	4639      	mov	r1, r7
 800bdd2:	f7f4 fe67 	bl	8000aa4 <__aeabi_fsub>
 800bdd6:	490c      	ldr	r1, [pc, #48]	; (800be08 <__kernel_sinf+0xe8>)
 800bdd8:	4605      	mov	r5, r0
 800bdda:	4630      	mov	r0, r6
 800bddc:	f7f4 ff6c 	bl	8000cb8 <__aeabi_fmul>
 800bde0:	4601      	mov	r1, r0
 800bde2:	4628      	mov	r0, r5
 800bde4:	f7f4 fe60 	bl	8000aa8 <__addsf3>
 800bde8:	4601      	mov	r1, r0
 800bdea:	4620      	mov	r0, r4
 800bdec:	f7f4 fe5a 	bl	8000aa4 <__aeabi_fsub>
 800bdf0:	e7d9      	b.n	800bda6 <__kernel_sinf+0x86>
 800bdf2:	bf00      	nop
 800bdf4:	2f2ec9d3 	.word	0x2f2ec9d3
 800bdf8:	32d72f34 	.word	0x32d72f34
 800bdfc:	3638ef1b 	.word	0x3638ef1b
 800be00:	39500d01 	.word	0x39500d01
 800be04:	3c088889 	.word	0x3c088889
 800be08:	3e2aaaab 	.word	0x3e2aaaab

0800be0c <matherr>:
 800be0c:	2000      	movs	r0, #0
 800be0e:	4770      	bx	lr

0800be10 <atanf>:
 800be10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be14:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800be18:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800be1c:	4604      	mov	r4, r0
 800be1e:	4607      	mov	r7, r0
 800be20:	db0e      	blt.n	800be40 <atanf+0x30>
 800be22:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800be26:	dd04      	ble.n	800be32 <atanf+0x22>
 800be28:	4601      	mov	r1, r0
 800be2a:	f7f4 fe3d 	bl	8000aa8 <__addsf3>
 800be2e:	4604      	mov	r4, r0
 800be30:	e003      	b.n	800be3a <atanf+0x2a>
 800be32:	2800      	cmp	r0, #0
 800be34:	f340 80cd 	ble.w	800bfd2 <atanf+0x1c2>
 800be38:	4c67      	ldr	r4, [pc, #412]	; (800bfd8 <atanf+0x1c8>)
 800be3a:	4620      	mov	r0, r4
 800be3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be40:	4b66      	ldr	r3, [pc, #408]	; (800bfdc <atanf+0x1cc>)
 800be42:	429d      	cmp	r5, r3
 800be44:	dc0e      	bgt.n	800be64 <atanf+0x54>
 800be46:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800be4a:	da08      	bge.n	800be5e <atanf+0x4e>
 800be4c:	4964      	ldr	r1, [pc, #400]	; (800bfe0 <atanf+0x1d0>)
 800be4e:	f7f4 fe2b 	bl	8000aa8 <__addsf3>
 800be52:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800be56:	f7f5 f8eb 	bl	8001030 <__aeabi_fcmpgt>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d1ed      	bne.n	800be3a <atanf+0x2a>
 800be5e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800be62:	e01c      	b.n	800be9e <atanf+0x8e>
 800be64:	f000 f8e0 	bl	800c028 <fabsf>
 800be68:	4b5e      	ldr	r3, [pc, #376]	; (800bfe4 <atanf+0x1d4>)
 800be6a:	4604      	mov	r4, r0
 800be6c:	429d      	cmp	r5, r3
 800be6e:	dc7c      	bgt.n	800bf6a <atanf+0x15a>
 800be70:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800be74:	429d      	cmp	r5, r3
 800be76:	dc67      	bgt.n	800bf48 <atanf+0x138>
 800be78:	4601      	mov	r1, r0
 800be7a:	f7f4 fe15 	bl	8000aa8 <__addsf3>
 800be7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800be82:	f7f4 fe0f 	bl	8000aa4 <__aeabi_fsub>
 800be86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800be8a:	4605      	mov	r5, r0
 800be8c:	4620      	mov	r0, r4
 800be8e:	f7f4 fe0b 	bl	8000aa8 <__addsf3>
 800be92:	4601      	mov	r1, r0
 800be94:	4628      	mov	r0, r5
 800be96:	f7f4 ffc3 	bl	8000e20 <__aeabi_fdiv>
 800be9a:	2600      	movs	r6, #0
 800be9c:	4604      	mov	r4, r0
 800be9e:	4621      	mov	r1, r4
 800bea0:	4620      	mov	r0, r4
 800bea2:	f7f4 ff09 	bl	8000cb8 <__aeabi_fmul>
 800bea6:	4601      	mov	r1, r0
 800bea8:	4680      	mov	r8, r0
 800beaa:	f7f4 ff05 	bl	8000cb8 <__aeabi_fmul>
 800beae:	4605      	mov	r5, r0
 800beb0:	494d      	ldr	r1, [pc, #308]	; (800bfe8 <atanf+0x1d8>)
 800beb2:	f7f4 ff01 	bl	8000cb8 <__aeabi_fmul>
 800beb6:	494d      	ldr	r1, [pc, #308]	; (800bfec <atanf+0x1dc>)
 800beb8:	f7f4 fdf6 	bl	8000aa8 <__addsf3>
 800bebc:	4629      	mov	r1, r5
 800bebe:	f7f4 fefb 	bl	8000cb8 <__aeabi_fmul>
 800bec2:	494b      	ldr	r1, [pc, #300]	; (800bff0 <atanf+0x1e0>)
 800bec4:	f7f4 fdf0 	bl	8000aa8 <__addsf3>
 800bec8:	4629      	mov	r1, r5
 800beca:	f7f4 fef5 	bl	8000cb8 <__aeabi_fmul>
 800bece:	4949      	ldr	r1, [pc, #292]	; (800bff4 <atanf+0x1e4>)
 800bed0:	f7f4 fdea 	bl	8000aa8 <__addsf3>
 800bed4:	4629      	mov	r1, r5
 800bed6:	f7f4 feef 	bl	8000cb8 <__aeabi_fmul>
 800beda:	4947      	ldr	r1, [pc, #284]	; (800bff8 <atanf+0x1e8>)
 800bedc:	f7f4 fde4 	bl	8000aa8 <__addsf3>
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7f4 fee9 	bl	8000cb8 <__aeabi_fmul>
 800bee6:	4945      	ldr	r1, [pc, #276]	; (800bffc <atanf+0x1ec>)
 800bee8:	f7f4 fdde 	bl	8000aa8 <__addsf3>
 800beec:	4641      	mov	r1, r8
 800beee:	f7f4 fee3 	bl	8000cb8 <__aeabi_fmul>
 800bef2:	4943      	ldr	r1, [pc, #268]	; (800c000 <atanf+0x1f0>)
 800bef4:	4680      	mov	r8, r0
 800bef6:	4628      	mov	r0, r5
 800bef8:	f7f4 fede 	bl	8000cb8 <__aeabi_fmul>
 800befc:	4941      	ldr	r1, [pc, #260]	; (800c004 <atanf+0x1f4>)
 800befe:	f7f4 fdd1 	bl	8000aa4 <__aeabi_fsub>
 800bf02:	4629      	mov	r1, r5
 800bf04:	f7f4 fed8 	bl	8000cb8 <__aeabi_fmul>
 800bf08:	493f      	ldr	r1, [pc, #252]	; (800c008 <atanf+0x1f8>)
 800bf0a:	f7f4 fdcb 	bl	8000aa4 <__aeabi_fsub>
 800bf0e:	4629      	mov	r1, r5
 800bf10:	f7f4 fed2 	bl	8000cb8 <__aeabi_fmul>
 800bf14:	493d      	ldr	r1, [pc, #244]	; (800c00c <atanf+0x1fc>)
 800bf16:	f7f4 fdc5 	bl	8000aa4 <__aeabi_fsub>
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	f7f4 fecc 	bl	8000cb8 <__aeabi_fmul>
 800bf20:	493b      	ldr	r1, [pc, #236]	; (800c010 <atanf+0x200>)
 800bf22:	f7f4 fdbf 	bl	8000aa4 <__aeabi_fsub>
 800bf26:	4629      	mov	r1, r5
 800bf28:	f7f4 fec6 	bl	8000cb8 <__aeabi_fmul>
 800bf2c:	4601      	mov	r1, r0
 800bf2e:	4640      	mov	r0, r8
 800bf30:	f7f4 fdba 	bl	8000aa8 <__addsf3>
 800bf34:	4621      	mov	r1, r4
 800bf36:	f7f4 febf 	bl	8000cb8 <__aeabi_fmul>
 800bf3a:	1c73      	adds	r3, r6, #1
 800bf3c:	4601      	mov	r1, r0
 800bf3e:	d133      	bne.n	800bfa8 <atanf+0x198>
 800bf40:	4620      	mov	r0, r4
 800bf42:	f7f4 fdaf 	bl	8000aa4 <__aeabi_fsub>
 800bf46:	e772      	b.n	800be2e <atanf+0x1e>
 800bf48:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bf4c:	f7f4 fdaa 	bl	8000aa4 <__aeabi_fsub>
 800bf50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bf54:	4605      	mov	r5, r0
 800bf56:	4620      	mov	r0, r4
 800bf58:	f7f4 fda6 	bl	8000aa8 <__addsf3>
 800bf5c:	4601      	mov	r1, r0
 800bf5e:	4628      	mov	r0, r5
 800bf60:	f7f4 ff5e 	bl	8000e20 <__aeabi_fdiv>
 800bf64:	2601      	movs	r6, #1
 800bf66:	4604      	mov	r4, r0
 800bf68:	e799      	b.n	800be9e <atanf+0x8e>
 800bf6a:	4b2a      	ldr	r3, [pc, #168]	; (800c014 <atanf+0x204>)
 800bf6c:	429d      	cmp	r5, r3
 800bf6e:	dc14      	bgt.n	800bf9a <atanf+0x18a>
 800bf70:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800bf74:	f7f4 fd96 	bl	8000aa4 <__aeabi_fsub>
 800bf78:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800bf7c:	4605      	mov	r5, r0
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f7f4 fe9a 	bl	8000cb8 <__aeabi_fmul>
 800bf84:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bf88:	f7f4 fd8e 	bl	8000aa8 <__addsf3>
 800bf8c:	4601      	mov	r1, r0
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f7f4 ff46 	bl	8000e20 <__aeabi_fdiv>
 800bf94:	2602      	movs	r6, #2
 800bf96:	4604      	mov	r4, r0
 800bf98:	e781      	b.n	800be9e <atanf+0x8e>
 800bf9a:	4601      	mov	r1, r0
 800bf9c:	481e      	ldr	r0, [pc, #120]	; (800c018 <atanf+0x208>)
 800bf9e:	f7f4 ff3f 	bl	8000e20 <__aeabi_fdiv>
 800bfa2:	2603      	movs	r6, #3
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	e77a      	b.n	800be9e <atanf+0x8e>
 800bfa8:	4b1c      	ldr	r3, [pc, #112]	; (800c01c <atanf+0x20c>)
 800bfaa:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800bfae:	f7f4 fd79 	bl	8000aa4 <__aeabi_fsub>
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	f7f4 fd76 	bl	8000aa4 <__aeabi_fsub>
 800bfb8:	4b19      	ldr	r3, [pc, #100]	; (800c020 <atanf+0x210>)
 800bfba:	4601      	mov	r1, r0
 800bfbc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bfc0:	f7f4 fd70 	bl	8000aa4 <__aeabi_fsub>
 800bfc4:	2f00      	cmp	r7, #0
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	f6bf af37 	bge.w	800be3a <atanf+0x2a>
 800bfcc:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800bfd0:	e733      	b.n	800be3a <atanf+0x2a>
 800bfd2:	4c14      	ldr	r4, [pc, #80]	; (800c024 <atanf+0x214>)
 800bfd4:	e731      	b.n	800be3a <atanf+0x2a>
 800bfd6:	bf00      	nop
 800bfd8:	3fc90fdb 	.word	0x3fc90fdb
 800bfdc:	3edfffff 	.word	0x3edfffff
 800bfe0:	7149f2ca 	.word	0x7149f2ca
 800bfe4:	3f97ffff 	.word	0x3f97ffff
 800bfe8:	3c8569d7 	.word	0x3c8569d7
 800bfec:	3d4bda59 	.word	0x3d4bda59
 800bff0:	3d886b35 	.word	0x3d886b35
 800bff4:	3dba2e6e 	.word	0x3dba2e6e
 800bff8:	3e124925 	.word	0x3e124925
 800bffc:	3eaaaaab 	.word	0x3eaaaaab
 800c000:	bd15a221 	.word	0xbd15a221
 800c004:	3d6ef16b 	.word	0x3d6ef16b
 800c008:	3d9d8795 	.word	0x3d9d8795
 800c00c:	3de38e38 	.word	0x3de38e38
 800c010:	3e4ccccd 	.word	0x3e4ccccd
 800c014:	401bffff 	.word	0x401bffff
 800c018:	bf800000 	.word	0xbf800000
 800c01c:	0800c7a4 	.word	0x0800c7a4
 800c020:	0800c794 	.word	0x0800c794
 800c024:	bfc90fdb 	.word	0xbfc90fdb

0800c028 <fabsf>:
 800c028:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c02c:	4770      	bx	lr
	...

0800c030 <scalbnf>:
 800c030:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800c034:	b510      	push	{r4, lr}
 800c036:	4602      	mov	r2, r0
 800c038:	460c      	mov	r4, r1
 800c03a:	4601      	mov	r1, r0
 800c03c:	d027      	beq.n	800c08e <scalbnf+0x5e>
 800c03e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c042:	d303      	bcc.n	800c04c <scalbnf+0x1c>
 800c044:	f7f4 fd30 	bl	8000aa8 <__addsf3>
 800c048:	4602      	mov	r2, r0
 800c04a:	e020      	b.n	800c08e <scalbnf+0x5e>
 800c04c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c050:	d215      	bcs.n	800c07e <scalbnf+0x4e>
 800c052:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800c056:	f7f4 fe2f 	bl	8000cb8 <__aeabi_fmul>
 800c05a:	4b18      	ldr	r3, [pc, #96]	; (800c0bc <scalbnf+0x8c>)
 800c05c:	4602      	mov	r2, r0
 800c05e:	429c      	cmp	r4, r3
 800c060:	db22      	blt.n	800c0a8 <scalbnf+0x78>
 800c062:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c066:	3b19      	subs	r3, #25
 800c068:	4423      	add	r3, r4
 800c06a:	2bfe      	cmp	r3, #254	; 0xfe
 800c06c:	dd09      	ble.n	800c082 <scalbnf+0x52>
 800c06e:	4611      	mov	r1, r2
 800c070:	4813      	ldr	r0, [pc, #76]	; (800c0c0 <scalbnf+0x90>)
 800c072:	f000 f829 	bl	800c0c8 <copysignf>
 800c076:	4912      	ldr	r1, [pc, #72]	; (800c0c0 <scalbnf+0x90>)
 800c078:	f7f4 fe1e 	bl	8000cb8 <__aeabi_fmul>
 800c07c:	e7e4      	b.n	800c048 <scalbnf+0x18>
 800c07e:	0ddb      	lsrs	r3, r3, #23
 800c080:	e7f2      	b.n	800c068 <scalbnf+0x38>
 800c082:	2b00      	cmp	r3, #0
 800c084:	dd05      	ble.n	800c092 <scalbnf+0x62>
 800c086:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c08a:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800c08e:	4610      	mov	r0, r2
 800c090:	bd10      	pop	{r4, pc}
 800c092:	f113 0f16 	cmn.w	r3, #22
 800c096:	da09      	bge.n	800c0ac <scalbnf+0x7c>
 800c098:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c09c:	429c      	cmp	r4, r3
 800c09e:	4611      	mov	r1, r2
 800c0a0:	dce6      	bgt.n	800c070 <scalbnf+0x40>
 800c0a2:	4808      	ldr	r0, [pc, #32]	; (800c0c4 <scalbnf+0x94>)
 800c0a4:	f000 f810 	bl	800c0c8 <copysignf>
 800c0a8:	4906      	ldr	r1, [pc, #24]	; (800c0c4 <scalbnf+0x94>)
 800c0aa:	e7e5      	b.n	800c078 <scalbnf+0x48>
 800c0ac:	3319      	adds	r3, #25
 800c0ae:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c0b2:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800c0b6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c0ba:	e7dd      	b.n	800c078 <scalbnf+0x48>
 800c0bc:	ffff3cb0 	.word	0xffff3cb0
 800c0c0:	7149f2ca 	.word	0x7149f2ca
 800c0c4:	0da24260 	.word	0x0da24260

0800c0c8 <copysignf>:
 800c0c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c0cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c0d0:	4308      	orrs	r0, r1
 800c0d2:	4770      	bx	lr

0800c0d4 <__errno>:
 800c0d4:	4b01      	ldr	r3, [pc, #4]	; (800c0dc <__errno+0x8>)
 800c0d6:	6818      	ldr	r0, [r3, #0]
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	200000ec 	.word	0x200000ec

0800c0e0 <_init>:
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	bf00      	nop
 800c0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0e6:	bc08      	pop	{r3}
 800c0e8:	469e      	mov	lr, r3
 800c0ea:	4770      	bx	lr

0800c0ec <_fini>:
 800c0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ee:	bf00      	nop
 800c0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0f2:	bc08      	pop	{r3}
 800c0f4:	469e      	mov	lr, r3
 800c0f6:	4770      	bx	lr
